
usb hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800b0f0  0800b0f0  0001b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6cc  0800b6cc  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6cc  0800b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6d4  0800b6d4  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6d8  0800b6d8  0001b6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800b6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c24  200000f4  0800b7d0  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d18  0800b7d0  00020d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a930  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e8a  00000000  00000000  0003aa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0003e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b663  00000000  00000000  00040b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2b5  00000000  00000000  0005c163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a0c6  00000000  00000000  00076418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001104de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de0  00000000  00000000  00110530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f4 	.word	0x200000f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b0d8 	.word	0x0800b0d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f8 	.word	0x200000f8
 80001dc:	0800b0d8 	.word	0x0800b0d8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f023 030f 	bic.w	r3, r3, #15
 80005b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	f043 030c 	orr.w	r3, r3, #12
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	f043 0308 	orr.w	r3, r3, #8
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	f043 030c 	orr.w	r3, r3, #12
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005e4:	f107 0208 	add.w	r2, r7, #8
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2304      	movs	r3, #4
 80005ee:	214e      	movs	r1, #78	; 0x4e
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <lcd_send_cmd+0x5c>)
 80005f2:	f004 fadb 	bl	8004bac <HAL_I2C_Master_Transmit>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000158 	.word	0x20000158

08000604 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af02      	add	r7, sp, #8
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f023 030f 	bic.w	r3, r3, #15
 8000614:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	f043 030d 	orr.w	r3, r3, #13
 8000622:	b2db      	uxtb	r3, r3
 8000624:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f043 0309 	orr.w	r3, r3, #9
 800062c:	b2db      	uxtb	r3, r3
 800062e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000630:	7bbb      	ldrb	r3, [r7, #14]
 8000632:	f043 030d 	orr.w	r3, r3, #13
 8000636:	b2db      	uxtb	r3, r3
 8000638:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	f043 0309 	orr.w	r3, r3, #9
 8000640:	b2db      	uxtb	r3, r3
 8000642:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000644:	f107 0208 	add.w	r2, r7, #8
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2304      	movs	r3, #4
 800064e:	214e      	movs	r1, #78	; 0x4e
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <lcd_send_data+0x5c>)
 8000652:	f004 faab 	bl	8004bac <HAL_I2C_Master_Transmit>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000158 	.word	0x20000158

08000664 <lcd_clear>:

void lcd_clear (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	f7ff ff9a 	bl	80005a4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	e005      	b.n	8000682 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000676:	2020      	movs	r0, #32
 8000678:	f7ff ffc4 	bl	8000604 <lcd_send_data>
	for (int i=0; i<70; i++)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b45      	cmp	r3, #69	; 0x45
 8000686:	ddf6      	ble.n	8000676 <lcd_clear+0x12>
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
    switch (row)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <lcd_put_cur+0x18>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d005      	beq.n	80006b4 <lcd_put_cur+0x22>
 80006a8:	e009      	b.n	80006be <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	603b      	str	r3, [r7, #0]
            break;
 80006b2:	e004      	b.n	80006be <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006ba:	603b      	str	r3, [r7, #0]
            break;
 80006bc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff6e 	bl	80005a4 <lcd_send_cmd>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_init>:


void lcd_init (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006d4:	2032      	movs	r0, #50	; 0x32
 80006d6:	f001 fdd3 	bl	8002280 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006da:	2030      	movs	r0, #48	; 0x30
 80006dc:	f7ff ff62 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006e0:	2005      	movs	r0, #5
 80006e2:	f001 fdcd 	bl	8002280 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006e6:	2030      	movs	r0, #48	; 0x30
 80006e8:	f7ff ff5c 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006ec:	2001      	movs	r0, #1
 80006ee:	f001 fdc7 	bl	8002280 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006f2:	2030      	movs	r0, #48	; 0x30
 80006f4:	f7ff ff56 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f001 fdc1 	bl	8002280 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006fe:	2020      	movs	r0, #32
 8000700:	f7ff ff50 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(10);
 8000704:	200a      	movs	r0, #10
 8000706:	f001 fdbb 	bl	8002280 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800070a:	2028      	movs	r0, #40	; 0x28
 800070c:	f7ff ff4a 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f001 fdb5 	bl	8002280 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000716:	2008      	movs	r0, #8
 8000718:	f7ff ff44 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f001 fdaf 	bl	8002280 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ff3e 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fda9 	bl	8002280 <HAL_Delay>
	HAL_Delay(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 fda6 	bl	8002280 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000734:	2006      	movs	r0, #6
 8000736:	f7ff ff35 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f001 fda0 	bl	8002280 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff ff2f 	bl	80005a4 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}

0800074a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000752:	e006      	b.n	8000762 <lcd_send_string+0x18>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff51 	bl	8000604 <lcd_send_data>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f4      	bne.n	8000754 <lcd_send_string+0xa>
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <startsWith>:
extern HID_MOUSE_Info_TypeDef mouse_info;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool startsWith(const char *haystack, const char *needle) {
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; needle[i] != '\0'; i++) {
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	e00e      	b.n	80007a2 <startsWith+0x2e>
        if (haystack[i] != needle[i]) {
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	6839      	ldr	r1, [r7, #0]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	440b      	add	r3, r1
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	d001      	beq.n	800079c <startsWith+0x28>
            return false;
 8000798:	2300      	movs	r3, #0
 800079a:	e009      	b.n	80007b0 <startsWith+0x3c>
    for (size_t i = 0; needle[i] != '\0'; i++) {
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1ea      	bne.n	8000784 <startsWith+0x10>
        }
    }

    return true;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	603b      	str	r3, [r7, #0]
return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	69b9      	ldr	r1, [r7, #24]
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	1a8a      	subs	r2, r1, r2
 80007d6:	fb03 f202 	mul.w	r2, r3, r2
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1acb      	subs	r3, r1, r3
 80007e0:	fb92 f2f3 	sdiv	r2, r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	4413      	add	r3, r2
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <USBH_HID_EventCallback>:
//(startsWith(buffer1, "5")==true)



void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
HID_KEYBD_Info_TypeDef *keybd_info;

HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	60fb      	str	r3, [r7, #12]
if(HID_Handle->Init == USBH_HID_KeybdInit){
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <USBH_HID_EventCallback+0x58>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d118      	bne.n	8000842 <USBH_HID_EventCallback+0x4e>
keybd_info = USBH_HID_GetKeybdInfo(phost);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f007 fed9 	bl	80085c8 <USBH_HID_GetKeybdInfo>
 8000816:	60b8      	str	r0, [r7, #8]
keycode = USBH_HID_GetASCIICode(keybd_info);
 8000818:	68b8      	ldr	r0, [r7, #8]
 800081a:	f007 ff79 	bl	8008710 <USBH_HID_GetASCIICode>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <USBH_HID_EventCallback+0x5c>)
 8000824:	701a      	strb	r2, [r3, #0]
uart_length=sprintf(uart_tx_buffer,"%c",keycode);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <USBH_HID_EventCallback+0x5c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4909      	ldr	r1, [pc, #36]	; (8000854 <USBH_HID_EventCallback+0x60>)
 800082e:	480a      	ldr	r0, [pc, #40]	; (8000858 <USBH_HID_EventCallback+0x64>)
 8000830:	f00a f8b2 	bl	800a998 <siprintf>
 8000834:	4603      	mov	r3, r0
 8000836:	4a09      	ldr	r2, [pc, #36]	; (800085c <USBH_HID_EventCallback+0x68>)
 8000838:	6013      	str	r3, [r2, #0]
strcat(buffer1,uart_tx_buffer);
 800083a:	4907      	ldr	r1, [pc, #28]	; (8000858 <USBH_HID_EventCallback+0x64>)
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <USBH_HID_EventCallback+0x6c>)
 800083e:	f00a f8cb 	bl	800a9d8 <strcat>
}}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	08008521 	.word	0x08008521
 8000850:	200005e0 	.word	0x200005e0
 8000854:	0800b0f0 	.word	0x0800b0f0
 8000858:	2000025c 	.word	0x2000025c
 800085c:	20000234 	.word	0x20000234
 8000860:	200002c0 	.word	0x200002c0

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 800086a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f001 fc96 	bl	800219c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f001 f8d2 	bl	8001a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f001 fa0e 	bl	8001c94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000878:	f001 f9b8 	bl	8001bec <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 800087c:	f009 fc86 	bl	800a18c <MX_USB_HOST_Init>
  MX_USART6_UART_Init();
 8000880:	f001 f9de 	bl	8001c40 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000884:	f001 f984 	bl	8001b90 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000888:	f001 f930 	bl	8001aec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 800088c:	f7ff ff20 	bl	80006d0 <lcd_init>
  lcd_send_string ("sagemcom");
 8000890:	4884      	ldr	r0, [pc, #528]	; (8000aa4 <main+0x240>)
 8000892:	f7ff ff5a 	bl	800074a <lcd_send_string>

  HAL_Delay(1000);
 8000896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089a:	f001 fcf1 	bl	8002280 <HAL_Delay>
  lcd_clear ();
 800089e:	f7ff fee1 	bl	8000664 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80008a2:	f009 fc99 	bl	800a1d8 <MX_USB_HOST_Process>

    if(strcmp(uart_tx_buffer,"Y")== 0){
 80008a6:	4980      	ldr	r1, [pc, #512]	; (8000aa8 <main+0x244>)
 80008a8:	4880      	ldr	r0, [pc, #512]	; (8000aac <main+0x248>)
 80008aa:	f7ff fc99 	bl	80001e0 <strcmp>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f6      	bne.n	80008a2 <main+0x3e>
    	if((startsWith(buffer1, "0")==true)){
 80008b4:	497e      	ldr	r1, [pc, #504]	; (8000ab0 <main+0x24c>)
 80008b6:	487f      	ldr	r0, [pc, #508]	; (8000ab4 <main+0x250>)
 80008b8:	f7ff ff5c 	bl	8000774 <startsWith>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d059      	beq.n	8000976 <main+0x112>
    		if(strcmp(buffer1,"00000001XY")== 0){
 80008c2:	497d      	ldr	r1, [pc, #500]	; (8000ab8 <main+0x254>)
 80008c4:	487b      	ldr	r0, [pc, #492]	; (8000ab4 <main+0x250>)
 80008c6:	f7ff fc8b 	bl	80001e0 <strcmp>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d125      	bne.n	800091c <main+0xb8>


    			HAL_UART_Transmit(&huart2,(uint8_t*)"position 1  \r\n",sizeof ("position 1  \r\n"), 1000);
 80008d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d4:	220f      	movs	r2, #15
 80008d6:	4979      	ldr	r1, [pc, #484]	; (8000abc <main+0x258>)
 80008d8:	4879      	ldr	r0, [pc, #484]	; (8000ac0 <main+0x25c>)
 80008da:	f005 f954 	bl	8005b86 <HAL_UART_Transmit>
    			lcd_put_cur(0, 0);
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fed6 	bl	8000692 <lcd_put_cur>
    			lcd_send_string("position 1");
 80008e6:	4877      	ldr	r0, [pc, #476]	; (8000ac4 <main+0x260>)
 80008e8:	f7ff ff2f 	bl	800074a <lcd_send_string>
    			lcd_put_cur(1, 0);
 80008ec:	2100      	movs	r1, #0
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff fecf 	bl	8000692 <lcd_put_cur>
    			lcd_send_string(buffer1);
 80008f4:	486f      	ldr	r0, [pc, #444]	; (8000ab4 <main+0x250>)
 80008f6:	f7ff ff28 	bl	800074a <lcd_send_string>
    			HAL_Delay(1000);
 80008fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fe:	f001 fcbf 	bl	8002280 <HAL_Delay>
    			strncpy(position, "machine1", sizeof(position));
 8000902:	2264      	movs	r2, #100	; 0x64
 8000904:	4970      	ldr	r1, [pc, #448]	; (8000ac8 <main+0x264>)
 8000906:	4871      	ldr	r0, [pc, #452]	; (8000acc <main+0x268>)
 8000908:	f00a f875 	bl	800a9f6 <strncpy>
    			strncpy(buffer1, "", sizeof(buffer1));
 800090c:	2264      	movs	r2, #100	; 0x64
 800090e:	4970      	ldr	r1, [pc, #448]	; (8000ad0 <main+0x26c>)
 8000910:	4868      	ldr	r0, [pc, #416]	; (8000ab4 <main+0x250>)
 8000912:	f00a f870 	bl	800a9f6 <strncpy>
    			i=1;
 8000916:	4b6f      	ldr	r3, [pc, #444]	; (8000ad4 <main+0x270>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
            									}

            if (strcmp(buffer1,"00000002XY")== 0){
 800091c:	496e      	ldr	r1, [pc, #440]	; (8000ad8 <main+0x274>)
 800091e:	4865      	ldr	r0, [pc, #404]	; (8000ab4 <main+0x250>)
 8000920:	f7ff fc5e 	bl	80001e0 <strcmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d125      	bne.n	8000976 <main+0x112>
            	 HAL_UART_Transmit(&huart2,(uint8_t*)"position 2  \r\n",sizeof ("position 2  \r\n"), 1000);
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	220f      	movs	r2, #15
 8000930:	496a      	ldr	r1, [pc, #424]	; (8000adc <main+0x278>)
 8000932:	4863      	ldr	r0, [pc, #396]	; (8000ac0 <main+0x25c>)
 8000934:	f005 f927 	bl	8005b86 <HAL_UART_Transmit>
            	 lcd_put_cur(0, 0);
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fea9 	bl	8000692 <lcd_put_cur>
            	 lcd_send_string("position 2");
 8000940:	4867      	ldr	r0, [pc, #412]	; (8000ae0 <main+0x27c>)
 8000942:	f7ff ff02 	bl	800074a <lcd_send_string>
            	 lcd_put_cur(1, 0);
 8000946:	2100      	movs	r1, #0
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fea2 	bl	8000692 <lcd_put_cur>
            	 lcd_send_string(buffer1);
 800094e:	4859      	ldr	r0, [pc, #356]	; (8000ab4 <main+0x250>)
 8000950:	f7ff fefb 	bl	800074a <lcd_send_string>
            	 HAL_Delay(1000);
 8000954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000958:	f001 fc92 	bl	8002280 <HAL_Delay>

            	 strncpy(position, "machine2", sizeof(position));
 800095c:	2264      	movs	r2, #100	; 0x64
 800095e:	4961      	ldr	r1, [pc, #388]	; (8000ae4 <main+0x280>)
 8000960:	485a      	ldr	r0, [pc, #360]	; (8000acc <main+0x268>)
 8000962:	f00a f848 	bl	800a9f6 <strncpy>


            	 strncpy(buffer1, "", sizeof(buffer1));
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	4959      	ldr	r1, [pc, #356]	; (8000ad0 <main+0x26c>)
 800096a:	4852      	ldr	r0, [pc, #328]	; (8000ab4 <main+0x250>)
 800096c:	f00a f843 	bl	800a9f6 <strncpy>
            	 i=2;
 8000970:	4b58      	ldr	r3, [pc, #352]	; (8000ad4 <main+0x270>)
 8000972:	2202      	movs	r2, #2
 8000974:	601a      	str	r2, [r3, #0]
           	   	   	   	   	   	   	   	   }




    	if (strcmp(buffer1,"")!= 0)
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <main+0x250>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d091      	beq.n	80008a2 <main+0x3e>
                       	   	   	   {
    			char buffer5[100]="/a/";
 800097e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8000982:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8000986:	4a58      	ldr	r2, [pc, #352]	; (8000ae8 <main+0x284>)
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	3304      	adds	r3, #4
 800098c:	2260      	movs	r2, #96	; 0x60
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f009 ff09 	bl	800a7a8 <memset>
    			char buffer8[100]="/a/";
 8000996:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800099a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800099e:	4a52      	ldr	r2, [pc, #328]	; (8000ae8 <main+0x284>)
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	3304      	adds	r3, #4
 80009a4:	2260      	movs	r2, #96	; 0x60
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f009 fefd 	bl	800a7a8 <memset>
    			char buffer10[100]="/a/";
 80009ae:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80009b2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80009b6:	4a4c      	ldr	r2, [pc, #304]	; (8000ae8 <main+0x284>)
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	3304      	adds	r3, #4
 80009bc:	2260      	movs	r2, #96	; 0x60
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f009 fef1 	bl	800a7a8 <memset>
    			char buffer6[100]="/teste1";
 80009c6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80009ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80009ce:	4947      	ldr	r1, [pc, #284]	; (8000aec <main+0x288>)
 80009d0:	461a      	mov	r2, r3
 80009d2:	c903      	ldmia	r1, {r0, r1}
 80009d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80009d8:	3308      	adds	r3, #8
 80009da:	225c      	movs	r2, #92	; 0x5c
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f009 fee2 	bl	800a7a8 <memset>
    			char buffer7[100]="/teste2/validation";
 80009e4:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <main+0x28c>)
 80009e6:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 80009ea:	461d      	mov	r5, r3
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	8022      	strh	r2, [r4, #0]
 80009f6:	3402      	adds	r4, #2
 80009f8:	0c1b      	lsrs	r3, r3, #16
 80009fa:	7023      	strb	r3, [r4, #0]
 80009fc:	f207 13a3 	addw	r3, r7, #419	; 0x1a3
 8000a00:	2251      	movs	r2, #81	; 0x51
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f009 fecf 	bl	800a7a8 <memset>
    			char buffer4[100]="/teste2/position";
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <main+0x290>)
 8000a0c:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 8000a10:	461d      	mov	r5, r3
 8000a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	7023      	strb	r3, [r4, #0]
 8000a1a:	f207 2305 	addw	r3, r7, #517	; 0x205
 8000a1e:	2253      	movs	r2, #83	; 0x53
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f009 fec0 	bl	800a7a8 <memset>
    			strcat(buffer5,buffer1);
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4922      	ldr	r1, [pc, #136]	; (8000ab4 <main+0x250>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f009 ffd3 	bl	800a9d8 <strcat>
    			strcat(buffer5,buffer6);
 8000a32:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8000a36:	463b      	mov	r3, r7
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f009 ffcc 	bl	800a9d8 <strcat>
    			strcat(buffer8,buffer1);
 8000a40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a44:	491b      	ldr	r1, [pc, #108]	; (8000ab4 <main+0x250>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f009 ffc6 	bl	800a9d8 <strcat>
    			strcat(buffer8,buffer7);
 8000a4c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8000a50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f009 ffbe 	bl	800a9d8 <strcat>
    			strcat(buffer10,buffer1);
 8000a5c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a60:	4914      	ldr	r1, [pc, #80]	; (8000ab4 <main+0x250>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f009 ffb8 	bl	800a9d8 <strcat>
    			strcat(buffer10,buffer4);
 8000a68:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8000a6c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f009 ffb0 	bl	800a9d8 <strcat>
    			HAL_UART_Transmit(&huart2,(uint8_t*)buffer5,sizeof(buffer5),1000);
 8000a78:	4639      	mov	r1, r7
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	2264      	movs	r2, #100	; 0x64
 8000a80:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <main+0x25c>)
 8000a82:	f005 f880 	bl	8005b86 <HAL_UART_Transmit>
    			HAL_UART_Transmit(&huart6,(uint8_t*)buffer5,sizeof(buffer5), 3000);
 8000a86:	4639      	mov	r1, r7
 8000a88:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a8c:	2264      	movs	r2, #100	; 0x64
 8000a8e:	481a      	ldr	r0, [pc, #104]	; (8000af8 <main+0x294>)
 8000a90:	f005 f879 	bl	8005b86 <HAL_UART_Transmit>
    			HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer,20,3000);
 8000a94:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a98:	2214      	movs	r2, #20
 8000a9a:	4918      	ldr	r1, [pc, #96]	; (8000afc <main+0x298>)
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <main+0x294>)
 8000a9e:	f005 f904 	bl	8005caa <HAL_UART_Receive>
    			while (strcmp(rx_buffer,"")== 0 ){
 8000aa2:	e037      	b.n	8000b14 <main+0x2b0>
 8000aa4:	0800b0f4 	.word	0x0800b0f4
 8000aa8:	0800b100 	.word	0x0800b100
 8000aac:	2000025c 	.word	0x2000025c
 8000ab0:	0800b104 	.word	0x0800b104
 8000ab4:	200002c0 	.word	0x200002c0
 8000ab8:	0800b108 	.word	0x0800b108
 8000abc:	0800b114 	.word	0x0800b114
 8000ac0:	200001ac 	.word	0x200001ac
 8000ac4:	0800b124 	.word	0x0800b124
 8000ac8:	0800b130 	.word	0x0800b130
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	0800b13c 	.word	0x0800b13c
 8000ad4:	200005e4 	.word	0x200005e4
 8000ad8:	0800b140 	.word	0x0800b140
 8000adc:	0800b14c 	.word	0x0800b14c
 8000ae0:	0800b15c 	.word	0x0800b15c
 8000ae4:	0800b168 	.word	0x0800b168
 8000ae8:	002f612f 	.word	0x002f612f
 8000aec:	0800b240 	.word	0x0800b240
 8000af0:	0800b2a4 	.word	0x0800b2a4
 8000af4:	0800b308 	.word	0x0800b308
 8000af8:	200001f0 	.word	0x200001f0
 8000afc:	20000324 	.word	0x20000324
    				HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer,5,3000);
 8000b00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b04:	2205      	movs	r2, #5
 8000b06:	49b5      	ldr	r1, [pc, #724]	; (8000ddc <main+0x578>)
 8000b08:	48b5      	ldr	r0, [pc, #724]	; (8000de0 <main+0x57c>)
 8000b0a:	f005 f8ce 	bl	8005caa <HAL_UART_Receive>
    				HAL_Delay(50);
 8000b0e:	2032      	movs	r0, #50	; 0x32
 8000b10:	f001 fbb6 	bl	8002280 <HAL_Delay>
    			while (strcmp(rx_buffer,"")== 0 ){
 8000b14:	4bb1      	ldr	r3, [pc, #708]	; (8000ddc <main+0x578>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f1      	beq.n	8000b00 <main+0x29c>

    											}



    			HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer,sizeof(rx_buffer),1000);
 8000b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b20:	2264      	movs	r2, #100	; 0x64
 8000b22:	49ae      	ldr	r1, [pc, #696]	; (8000ddc <main+0x578>)
 8000b24:	48af      	ldr	r0, [pc, #700]	; (8000de4 <main+0x580>)
 8000b26:	f005 f82e 	bl	8005b86 <HAL_UART_Transmit>
    			HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",sizeof("\r\n"),1000);
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	2203      	movs	r2, #3
 8000b30:	49ad      	ldr	r1, [pc, #692]	; (8000de8 <main+0x584>)
 8000b32:	48ac      	ldr	r0, [pc, #688]	; (8000de4 <main+0x580>)
 8000b34:	f005 f827 	bl	8005b86 <HAL_UART_Transmit>
    			lcd_clear ();
 8000b38:	f7ff fd94 	bl	8000664 <lcd_clear>
    			lcd_put_cur(0, 0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fda7 	bl	8000692 <lcd_put_cur>
    			lcd_send_string(rx_buffer);
 8000b44:	48a5      	ldr	r0, [pc, #660]	; (8000ddc <main+0x578>)
 8000b46:	f7ff fe00 	bl	800074a <lcd_send_string>
            	lcd_put_cur(1, 0);
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fda0 	bl	8000692 <lcd_put_cur>
            	lcd_send_string(buffer1);
 8000b52:	48a6      	ldr	r0, [pc, #664]	; (8000dec <main+0x588>)
 8000b54:	f7ff fdf9 	bl	800074a <lcd_send_string>
            	HAL_Delay(2000);
 8000b58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b5c:	f001 fb90 	bl	8002280 <HAL_Delay>
            	lcd_clear ();
 8000b60:	f7ff fd80 	bl	8000664 <lcd_clear>
            	if ((startsWith(rx_buffer, "e")==true )){
 8000b64:	49a2      	ldr	r1, [pc, #648]	; (8000df0 <main+0x58c>)
 8000b66:	489d      	ldr	r0, [pc, #628]	; (8000ddc <main+0x578>)
 8000b68:	f7ff fe04 	bl	8000774 <startsWith>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00d      	beq.n	8000b8e <main+0x32a>

            	        		lcd_send_string("l'article nexis-");
 8000b72:	48a0      	ldr	r0, [pc, #640]	; (8000df4 <main+0x590>)
 8000b74:	f7ff fde9 	bl	800074a <lcd_send_string>


            	        		lcd_put_cur(1, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fd89 	bl	8000692 <lcd_put_cur>
            	        		lcd_send_string("te pas dans la DB");
 8000b80:	489d      	ldr	r0, [pc, #628]	; (8000df8 <main+0x594>)
 8000b82:	f7ff fde2 	bl	800074a <lcd_send_string>
            	        		HAL_Delay(2000);
 8000b86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b8a:	f001 fb79 	bl	8002280 <HAL_Delay>

            	        }
            	if ((startsWith(rx_buffer, "f")==true )){
 8000b8e:	499b      	ldr	r1, [pc, #620]	; (8000dfc <main+0x598>)
 8000b90:	4892      	ldr	r0, [pc, #584]	; (8000ddc <main+0x578>)
 8000b92:	f7ff fdef 	bl	8000774 <startsWith>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00d      	beq.n	8000bb8 <main+0x354>

            	        	        		lcd_send_string("le teste precident");
 8000b9c:	4898      	ldr	r0, [pc, #608]	; (8000e00 <main+0x59c>)
 8000b9e:	f7ff fdd4 	bl	800074a <lcd_send_string>


            	        	        		lcd_put_cur(1, 0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fd74 	bl	8000692 <lcd_put_cur>
            	        	        		lcd_send_string("n'est pas valide");
 8000baa:	4896      	ldr	r0, [pc, #600]	; (8000e04 <main+0x5a0>)
 8000bac:	f7ff fdcd 	bl	800074a <lcd_send_string>
            	        	        		HAL_Delay(2000);
 8000bb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bb4:	f001 fb64 	bl	8002280 <HAL_Delay>

            	        	        }
            	if ((startsWith(rx_buffer, "t")==true ) && ( i==0 )){
 8000bb8:	4993      	ldr	r1, [pc, #588]	; (8000e08 <main+0x5a4>)
 8000bba:	4888      	ldr	r0, [pc, #544]	; (8000ddc <main+0x578>)
 8000bbc:	f7ff fdda 	bl	8000774 <startsWith>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d033      	beq.n	8000c2e <main+0x3ca>
 8000bc6:	4b91      	ldr	r3, [pc, #580]	; (8000e0c <main+0x5a8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d12f      	bne.n	8000c2e <main+0x3ca>
            		HAL_UART_Transmit(&huart6,(uint8_t*)"555",sizeof ("555"), 3000);
 8000bce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	498e      	ldr	r1, [pc, #568]	; (8000e10 <main+0x5ac>)
 8000bd6:	4882      	ldr	r0, [pc, #520]	; (8000de0 <main+0x57c>)
 8000bd8:	f004 ffd5 	bl	8005b86 <HAL_UART_Transmit>
            		lcd_put_cur(0, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fd57 	bl	8000692 <lcd_put_cur>
            		lcd_send_string("teste");
 8000be4:	488b      	ldr	r0, [pc, #556]	; (8000e14 <main+0x5b0>)
 8000be6:	f7ff fdb0 	bl	800074a <lcd_send_string>
            		HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer2,3,3000);
 8000bea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bee:	2203      	movs	r2, #3
 8000bf0:	4989      	ldr	r1, [pc, #548]	; (8000e18 <main+0x5b4>)
 8000bf2:	487b      	ldr	r0, [pc, #492]	; (8000de0 <main+0x57c>)
 8000bf4:	f005 f859 	bl	8005caa <HAL_UART_Receive>
            		HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer2,sizeof(rx_buffer2),1000);
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2264      	movs	r2, #100	; 0x64
 8000bfe:	4986      	ldr	r1, [pc, #536]	; (8000e18 <main+0x5b4>)
 8000c00:	4878      	ldr	r0, [pc, #480]	; (8000de4 <main+0x580>)
 8000c02:	f004 ffc0 	bl	8005b86 <HAL_UART_Transmit>
            		lcd_clear ();
 8000c06:	f7ff fd2d 	bl	8000664 <lcd_clear>
            		lcd_put_cur(0, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fd40 	bl	8000692 <lcd_put_cur>
            		lcd_send_string(rx_buffer2);
 8000c12:	4881      	ldr	r0, [pc, #516]	; (8000e18 <main+0x5b4>)
 8000c14:	f7ff fd99 	bl	800074a <lcd_send_string>
            		lcd_put_cur(1, 0);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fd39 	bl	8000692 <lcd_put_cur>
            		lcd_send_string(buffer1);
 8000c20:	4872      	ldr	r0, [pc, #456]	; (8000dec <main+0x588>)
 8000c22:	f7ff fd92 	bl	800074a <lcd_send_string>
            		HAL_Delay(2000);
 8000c26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c2a:	f001 fb29 	bl	8002280 <HAL_Delay>





            if ((startsWith(rx_buffer, "t")==true ) && ( i==1 )){
 8000c2e:	4976      	ldr	r1, [pc, #472]	; (8000e08 <main+0x5a4>)
 8000c30:	486a      	ldr	r0, [pc, #424]	; (8000ddc <main+0x578>)
 8000c32:	f7ff fd9f 	bl	8000774 <startsWith>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 832f 	beq.w	800129c <main+0xa38>
 8000c3e:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <main+0x5a8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	f040 832a 	bne.w	800129c <main+0xa38>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	4873      	ldr	r0, [pc, #460]	; (8000e1c <main+0x5b8>)
 8000c50:	f002 fa44 	bl	80030dc <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5a:	4870      	ldr	r0, [pc, #448]	; (8000e1c <main+0x5b8>)
 8000c5c:	f002 fa3e 	bl	80030dc <HAL_GPIO_WritePin>

            	lcd_clear ();
 8000c60:	f7ff fd00 	bl	8000664 <lcd_clear>
            	 lcd_put_cur(0, 0);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fd13 	bl	8000692 <lcd_put_cur>
            	            lcd_send_string("validation?");
 8000c6c:	486c      	ldr	r0, [pc, #432]	; (8000e20 <main+0x5bc>)
 8000c6e:	f7ff fd6c 	bl	800074a <lcd_send_string>
            	            lcd_put_cur(1, 0);
 8000c72:	2100      	movs	r1, #0
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fd0c 	bl	8000692 <lcd_put_cur>
            	            lcd_send_string(buffer1);
 8000c7a:	485c      	ldr	r0, [pc, #368]	; (8000dec <main+0x588>)
 8000c7c:	f7ff fd65 	bl	800074a <lcd_send_string>
            	            HAL_Delay(1000);
 8000c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c84:	f001 fafc 	bl	8002280 <HAL_Delay>
            	            lcd_clear ();
 8000c88:	f7ff fcec 	bl	8000664 <lcd_clear>
            //	while ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)== 0) &&  (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)== 0)     ){


          //  }
 while (( db < 90) )
 8000c8c:	e0dd      	b.n	8000e4a <main+0x5e6>
 {
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2120      	movs	r1, #32
 8000c92:	4862      	ldr	r0, [pc, #392]	; (8000e1c <main+0x5b8>)
 8000c94:	f002 fa22 	bl	80030dc <HAL_GPIO_WritePin>
HAL_Delay(500);
 8000c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9c:	f001 faf0 	bl	8002280 <HAL_Delay>

float peakToPeak = 0;                                  // peak-to-peak level
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264

unsigned int signalMax = 0;                            //minimum value
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
unsigned int signalMin = 1024;
 8000cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb2:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
unsigned long startMillis=HAL_GetTick();
 8000cb6:	f001 fad7 	bl	8002268 <HAL_GetTick>
 8000cba:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
 while (((HAL_GetTick() - startMillis) < sampleWindow))
 8000cbe:	e02a      	b.n	8000d16 <main+0x4b2>
{
HAL_ADC_Start(&hadc1);
 8000cc0:	4858      	ldr	r0, [pc, #352]	; (8000e24 <main+0x5c0>)
 8000cc2:	f001 fb45 	bl	8002350 <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cca:	4856      	ldr	r0, [pc, #344]	; (8000e24 <main+0x5c0>)
 8000ccc:	f001 fc27 	bl	800251e <HAL_ADC_PollForConversion>
sample  = HAL_ADC_GetValue(&hadc1 ) ;
 8000cd0:	4854      	ldr	r0, [pc, #336]	; (8000e24 <main+0x5c0>)
 8000cd2:	f001 fcaf 	bl	8002634 <HAL_ADC_GetValue>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a53      	ldr	r2, [pc, #332]	; (8000e28 <main+0x5c4>)
 8000cda:	6013      	str	r3, [r2, #0]
HAL_ADC_Stop(&hadc1);
 8000cdc:	4851      	ldr	r0, [pc, #324]	; (8000e24 <main+0x5c0>)
 8000cde:	f001 fbeb 	bl	80024b8 <HAL_ADC_Stop>

            	                                         //get reading from microphone
 if (sample < 1024)                                  // toss out spurious readings
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <main+0x5c4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cea:	d214      	bcs.n	8000d16 <main+0x4b2>
 {
if (sample > signalMax)
 8000cec:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <main+0x5c4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d204      	bcs.n	8000d02 <main+0x49e>
{
signalMax = sample;                           // save just the max levels
 8000cf8:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <main+0x5c4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8000d00:	e009      	b.n	8000d16 <main+0x4b2>
 }
else if (sample < signalMin)
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <main+0x5c4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d903      	bls.n	8000d16 <main+0x4b2>
{
signalMin = sample;                           // save just the min levels
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <main+0x5c4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 while (((HAL_GetTick() - startMillis) < sampleWindow))
 8000d16:	f001 faa7 	bl	8002268 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2264      	movs	r2, #100	; 0x64
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d3cb      	bcc.n	8000cc0 <main+0x45c>
}
}
}


 peakToPeak = signalMax - signalMin;                    // max - min = peak-peak amplitude
 8000d28:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8000d2c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3a:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
db = map(peakToPeak,20,900,49.5,90);   //(long x, long in_min, long in_max, long out_min, long out_max)
 8000d3e:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 8000d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d46:	235a      	movs	r3, #90	; 0x5a
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2331      	movs	r3, #49	; 0x31
 8000d4c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000d50:	2114      	movs	r1, #20
 8000d52:	ee17 0a90 	vmov	r0, s15
 8000d56:	f7ff fd31 	bl	80007bc <map>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a33      	ldr	r2, [pc, #204]	; (8000e2c <main+0x5c8>)
 8000d5e:	6013      	str	r3, [r2, #0]
lcd_clear ();
 8000d60:	f7ff fc80 	bl	8000664 <lcd_clear>
lcd_put_cur(0,0);
 8000d64:	2100      	movs	r1, #0
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fc93 	bl	8000692 <lcd_put_cur>
lcd_send_string ("bd = ");
 8000d6c:	4830      	ldr	r0, [pc, #192]	; (8000e30 <main+0x5cc>)
 8000d6e:	f7ff fcec 	bl	800074a <lcd_send_string>
lcd_put_cur(0,4);
 8000d72:	2104      	movs	r1, #4
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fc8c 	bl	8000692 <lcd_put_cur>
k++;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <main+0x5d0>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4a2c      	ldr	r2, [pc, #176]	; (8000e34 <main+0x5d0>)
 8000d82:	6013      	str	r3, [r2, #0]

if (db <= 80)
 8000d84:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <main+0x5c8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b50      	cmp	r3, #80	; 0x50
 8000d8a:	dc15      	bgt.n	8000db8 <main+0x554>
{
sprintf ( msg , "%hu\r\n " , db ) ;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <main+0x5c8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4929      	ldr	r1, [pc, #164]	; (8000e38 <main+0x5d4>)
 8000d94:	4829      	ldr	r0, [pc, #164]	; (8000e3c <main+0x5d8>)
 8000d96:	f009 fdff 	bl	800a998 <siprintf>
lcd_put_cur(0,4);
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fc78 	bl	8000692 <lcd_put_cur>
lcd_send_string (msg);
 8000da2:	4826      	ldr	r0, [pc, #152]	; (8000e3c <main+0x5d8>)
 8000da4:	f7ff fcd1 	bl	800074a <lcd_send_string>


if (k>=20)
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <main+0x5d0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b13      	cmp	r3, #19
 8000dae:	dd49      	ble.n	8000e44 <main+0x5e0>
{ teste = false ;
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <main+0x5dc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
break;
 8000db6:	e04d      	b.n	8000e54 <main+0x5f0>

}


else
{  sprintf ( msg , "%hu\r\n " , db ) ;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <main+0x5c8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	491e      	ldr	r1, [pc, #120]	; (8000e38 <main+0x5d4>)
 8000dc0:	481e      	ldr	r0, [pc, #120]	; (8000e3c <main+0x5d8>)
 8000dc2:	f009 fde9 	bl	800a998 <siprintf>

lcd_put_cur(0,4);
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fc62 	bl	8000692 <lcd_put_cur>
lcd_send_string (msg);
 8000dce:	481b      	ldr	r0, [pc, #108]	; (8000e3c <main+0x5d8>)
 8000dd0:	f7ff fcbb 	bl	800074a <lcd_send_string>
 teste = true;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <main+0x5dc>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
break;
 8000dda:	e03b      	b.n	8000e54 <main+0x5f0>
 8000ddc:	20000324 	.word	0x20000324
 8000de0:	200001f0 	.word	0x200001f0
 8000de4:	200001ac 	.word	0x200001ac
 8000de8:	0800b174 	.word	0x0800b174
 8000dec:	200002c0 	.word	0x200002c0
 8000df0:	0800b178 	.word	0x0800b178
 8000df4:	0800b17c 	.word	0x0800b17c
 8000df8:	0800b190 	.word	0x0800b190
 8000dfc:	0800b1a4 	.word	0x0800b1a4
 8000e00:	0800b1a8 	.word	0x0800b1a8
 8000e04:	0800b1bc 	.word	0x0800b1bc
 8000e08:	0800b1d0 	.word	0x0800b1d0
 8000e0c:	200005e4 	.word	0x200005e4
 8000e10:	0800b1d4 	.word	0x0800b1d4
 8000e14:	0800b1d8 	.word	0x0800b1d8
 8000e18:	20000388 	.word	0x20000388
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	0800b1e0 	.word	0x0800b1e0
 8000e24:	20000110 	.word	0x20000110
 8000e28:	2000023c 	.word	0x2000023c
 8000e2c:	20000240 	.word	0x20000240
 8000e30:	0800b1ec 	.word	0x0800b1ec
 8000e34:	20000238 	.word	0x20000238
 8000e38:	0800b1f4 	.word	0x0800b1f4
 8000e3c:	20000244 	.word	0x20000244
 8000e40:	20000258 	.word	0x20000258
 }

HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	; 0x64
 8000e46:	f001 fa1b 	bl	8002280 <HAL_Delay>
 while (( db < 90) )
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <main+0x63c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b59      	cmp	r3, #89	; 0x59
 8000e50:	f77f af1d 	ble.w	8000c8e <main+0x42a>
 }
if (teste==true){
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <main+0x640>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d02d      	beq.n	8000eb8 <main+0x654>
lcd_clear ();
 8000e5c:	f7ff fc02 	bl	8000664 <lcd_clear>
lcd_put_cur(0,0);
 8000e60:	2100      	movs	r1, #0
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fc15 	bl	8000692 <lcd_put_cur>
lcd_send_string ("bd = ");
 8000e68:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <main+0x644>)
 8000e6a:	f7ff fc6e 	bl	800074a <lcd_send_string>
lcd_put_cur(0,4);
 8000e6e:	2104      	movs	r1, #4
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fc0e 	bl	8000692 <lcd_put_cur>
lcd_send_string (msg);
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <main+0x648>)
 8000e78:	f7ff fc67 	bl	800074a <lcd_send_string>
lcd_put_cur(1,0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fc07 	bl	8000692 <lcd_put_cur>
lcd_send_string ("teste valide");
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <main+0x64c>)
 8000e86:	f7ff fc60 	bl	800074a <lcd_send_string>
 HAL_Delay(500);
 8000e8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8e:	f001 f9f7 	bl	8002280 <HAL_Delay>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2120      	movs	r1, #32
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <main+0x650>)
 8000e98:	f002 f920 	bl	80030dc <HAL_GPIO_WritePin>
 8000e9c:	e033      	b.n	8000f06 <main+0x6a2>
 8000e9e:	bf00      	nop
 8000ea0:	20000240 	.word	0x20000240
 8000ea4:	20000258 	.word	0x20000258
 8000ea8:	0800b1ec 	.word	0x0800b1ec
 8000eac:	20000244 	.word	0x20000244
 8000eb0:	0800b1fc 	.word	0x0800b1fc
 8000eb4:	40020400 	.word	0x40020400

}

else if (teste==false ){
 8000eb8:	4bd1      	ldr	r3, [pc, #836]	; (8001200 <main+0x99c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	f083 0301 	eor.w	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d01f      	beq.n	8000f06 <main+0x6a2>
lcd_clear ();
 8000ec6:	f7ff fbcd 	bl	8000664 <lcd_clear>
lcd_put_cur(0,0);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fbe0 	bl	8000692 <lcd_put_cur>
lcd_send_string ("bd = ");
 8000ed2:	48cc      	ldr	r0, [pc, #816]	; (8001204 <main+0x9a0>)
 8000ed4:	f7ff fc39 	bl	800074a <lcd_send_string>
lcd_put_cur(0,4);
 8000ed8:	2104      	movs	r1, #4
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff fbd9 	bl	8000692 <lcd_put_cur>
lcd_send_string (msg);
 8000ee0:	48c9      	ldr	r0, [pc, #804]	; (8001208 <main+0x9a4>)
 8000ee2:	f7ff fc32 	bl	800074a <lcd_send_string>
lcd_put_cur(1,0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fbd2 	bl	8000692 <lcd_put_cur>
lcd_send_string ("teste non valide");
 8000eee:	48c7      	ldr	r0, [pc, #796]	; (800120c <main+0x9a8>)
 8000ef0:	f7ff fc2b 	bl	800074a <lcd_send_string>
HAL_Delay(500);
 8000ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ef8:	f001 f9c2 	bl	8002280 <HAL_Delay>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2120      	movs	r1, #32
 8000f00:	48c3      	ldr	r0, [pc, #780]	; (8001210 <main+0x9ac>)
 8000f02:	f002 f8eb 	bl	80030dc <HAL_GPIO_WritePin>

 }

            if(teste==true)
 8000f06:	4bbe      	ldr	r3, [pc, #760]	; (8001200 <main+0x99c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 80cb 	beq.w	80010a6 <main+0x842>
            {
            lcd_clear ();
 8000f10:	f7ff fba8 	bl	8000664 <lcd_clear>
            HAL_UART_Transmit(&huart6,(uint8_t*)"ook",sizeof ("ook"), 3000);
 8000f14:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f18:	2204      	movs	r2, #4
 8000f1a:	49be      	ldr	r1, [pc, #760]	; (8001214 <main+0x9b0>)
 8000f1c:	48be      	ldr	r0, [pc, #760]	; (8001218 <main+0x9b4>)
 8000f1e:	f004 fe32 	bl	8005b86 <HAL_UART_Transmit>
            lcd_put_cur(0, 0);
 8000f22:	2100      	movs	r1, #0
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fbb4 	bl	8000692 <lcd_put_cur>
            lcd_send_string("oui");
 8000f2a:	48bc      	ldr	r0, [pc, #752]	; (800121c <main+0x9b8>)
 8000f2c:	f7ff fc0d 	bl	800074a <lcd_send_string>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f36:	48b6      	ldr	r0, [pc, #728]	; (8001210 <main+0x9ac>)
 8000f38:	f002 f8d0 	bl	80030dc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	48b3      	ldr	r0, [pc, #716]	; (8001210 <main+0x9ac>)
 8000f44:	f002 f8ca 	bl	80030dc <HAL_GPIO_WritePin>


             HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer2,3,3000);
 8000f48:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	49b4      	ldr	r1, [pc, #720]	; (8001220 <main+0x9bc>)
 8000f50:	48b1      	ldr	r0, [pc, #708]	; (8001218 <main+0x9b4>)
 8000f52:	f004 feaa 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer2,sizeof(rx_buffer2),1000);
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	2264      	movs	r2, #100	; 0x64
 8000f5c:	49b0      	ldr	r1, [pc, #704]	; (8001220 <main+0x9bc>)
 8000f5e:	48b1      	ldr	r0, [pc, #708]	; (8001224 <main+0x9c0>)
 8000f60:	f004 fe11 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 8000f64:	f7ff fb7e 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fb91 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer2);
 8000f70:	48ab      	ldr	r0, [pc, #684]	; (8001220 <main+0x9bc>)
 8000f72:	f7ff fbea 	bl	800074a <lcd_send_string>
            HAL_Delay(2000);
 8000f76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f7a:	f001 f981 	bl	8002280 <HAL_Delay>



            HAL_UART_Transmit(&huart2,(uint8_t*)buffer8,sizeof(buffer8),1000);
 8000f7e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	2264      	movs	r2, #100	; 0x64
 8000f88:	48a6      	ldr	r0, [pc, #664]	; (8001224 <main+0x9c0>)
 8000f8a:	f004 fdfc 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart6,(uint8_t*)buffer8,sizeof(buffer8),3000);
 8000f8e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f92:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f96:	2264      	movs	r2, #100	; 0x64
 8000f98:	489f      	ldr	r0, [pc, #636]	; (8001218 <main+0x9b4>)
 8000f9a:	f004 fdf4 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer4,3,3000);
 8000f9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	49a0      	ldr	r1, [pc, #640]	; (8001228 <main+0x9c4>)
 8000fa6:	489c      	ldr	r0, [pc, #624]	; (8001218 <main+0x9b4>)
 8000fa8:	f004 fe7f 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer4,sizeof(rx_buffer4),1000);
 8000fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb0:	2264      	movs	r2, #100	; 0x64
 8000fb2:	499d      	ldr	r1, [pc, #628]	; (8001228 <main+0x9c4>)
 8000fb4:	489b      	ldr	r0, [pc, #620]	; (8001224 <main+0x9c0>)
 8000fb6:	f004 fde6 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 8000fba:	f7ff fb53 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fb66 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer4);
 8000fc6:	4898      	ldr	r0, [pc, #608]	; (8001228 <main+0x9c4>)
 8000fc8:	f7ff fbbf 	bl	800074a <lcd_send_string>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer5,3,3000);
 8000fcc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	4996      	ldr	r1, [pc, #600]	; (800122c <main+0x9c8>)
 8000fd4:	4890      	ldr	r0, [pc, #576]	; (8001218 <main+0x9b4>)
 8000fd6:	f004 fe68 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer5,sizeof(rx_buffer5),1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	2264      	movs	r2, #100	; 0x64
 8000fe0:	4992      	ldr	r1, [pc, #584]	; (800122c <main+0x9c8>)
 8000fe2:	4890      	ldr	r0, [pc, #576]	; (8001224 <main+0x9c0>)
 8000fe4:	f004 fdcf 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 8000fe8:	f7ff fb3c 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fb4f 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer5);
 8000ff4:	488d      	ldr	r0, [pc, #564]	; (800122c <main+0x9c8>)
 8000ff6:	f7ff fba8 	bl	800074a <lcd_send_string>
            HAL_UART_Transmit(&huart6,(uint8_t*)buffer10,sizeof (buffer10), 3000);
 8000ffa:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000ffe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001002:	2264      	movs	r2, #100	; 0x64
 8001004:	4884      	ldr	r0, [pc, #528]	; (8001218 <main+0x9b4>)
 8001006:	f004 fdbe 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer6,3,3000);
 800100a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800100e:	2203      	movs	r2, #3
 8001010:	4987      	ldr	r1, [pc, #540]	; (8001230 <main+0x9cc>)
 8001012:	4881      	ldr	r0, [pc, #516]	; (8001218 <main+0x9b4>)
 8001014:	f004 fe49 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer6,sizeof(rx_buffer6),1000);
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	2264      	movs	r2, #100	; 0x64
 800101e:	4984      	ldr	r1, [pc, #528]	; (8001230 <main+0x9cc>)
 8001020:	4880      	ldr	r0, [pc, #512]	; (8001224 <main+0x9c0>)
 8001022:	f004 fdb0 	bl	8005b86 <HAL_UART_Transmit>

            lcd_clear ();
 8001026:	f7ff fb1d 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 800102a:	2100      	movs	r1, #0
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff fb30 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer6);
 8001032:	487f      	ldr	r0, [pc, #508]	; (8001230 <main+0x9cc>)
 8001034:	f7ff fb89 	bl	800074a <lcd_send_string>
            HAL_Delay(2000);
 8001038:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800103c:	f001 f920 	bl	8002280 <HAL_Delay>
            HAL_UART_Transmit(&huart6,(uint8_t*)position,sizeof (position), 3000);
 8001040:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001044:	2264      	movs	r2, #100	; 0x64
 8001046:	497b      	ldr	r1, [pc, #492]	; (8001234 <main+0x9d0>)
 8001048:	4873      	ldr	r0, [pc, #460]	; (8001218 <main+0x9b4>)
 800104a:	f004 fd9c 	bl	8005b86 <HAL_UART_Transmit>

            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer7,6,3000);
 800104e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001052:	2206      	movs	r2, #6
 8001054:	4978      	ldr	r1, [pc, #480]	; (8001238 <main+0x9d4>)
 8001056:	4870      	ldr	r0, [pc, #448]	; (8001218 <main+0x9b4>)
 8001058:	f004 fe27 	bl	8005caa <HAL_UART_Receive>
            HAL_UART_Transmit(&huart2,(uint8_t*)"coooo",sizeof("coooo"),1000);
 800105c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001060:	2206      	movs	r2, #6
 8001062:	4976      	ldr	r1, [pc, #472]	; (800123c <main+0x9d8>)
 8001064:	486f      	ldr	r0, [pc, #444]	; (8001224 <main+0x9c0>)
 8001066:	f004 fd8e 	bl	8005b86 <HAL_UART_Transmit>
                   HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer7,sizeof(rx_buffer7),1000);
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	2264      	movs	r2, #100	; 0x64
 8001070:	4971      	ldr	r1, [pc, #452]	; (8001238 <main+0x9d4>)
 8001072:	486c      	ldr	r0, [pc, #432]	; (8001224 <main+0x9c0>)
 8001074:	f004 fd87 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer11,3,3000);
 8001078:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800107c:	2203      	movs	r2, #3
 800107e:	4970      	ldr	r1, [pc, #448]	; (8001240 <main+0x9dc>)
 8001080:	4865      	ldr	r0, [pc, #404]	; (8001218 <main+0x9b4>)
 8001082:	f004 fe12 	bl	8005caa <HAL_UART_Receive>





            lcd_clear ();
 8001086:	f7ff faed 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fb00 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer7);
 8001092:	4869      	ldr	r0, [pc, #420]	; (8001238 <main+0x9d4>)
 8001094:	f7ff fb59 	bl	800074a <lcd_send_string>
            lcd_put_cur(1, 0);
 8001098:	2100      	movs	r1, #0
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff faf9 	bl	8000692 <lcd_put_cur>
            lcd_send_string("BD update ");
 80010a0:	4868      	ldr	r0, [pc, #416]	; (8001244 <main+0x9e0>)
 80010a2:	f7ff fb52 	bl	800074a <lcd_send_string>





            if(teste==false)
 80010a6:	4b56      	ldr	r3, [pc, #344]	; (8001200 <main+0x99c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80f3 	beq.w	800129c <main+0xa38>
            {

            lcd_clear ();
 80010b6:	f7ff fad5 	bl	8000664 <lcd_clear>

            HAL_UART_Transmit(&huart6,(uint8_t*)"non",sizeof ("non"), 3000);
 80010ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010be:	2204      	movs	r2, #4
 80010c0:	4961      	ldr	r1, [pc, #388]	; (8001248 <main+0x9e4>)
 80010c2:	4855      	ldr	r0, [pc, #340]	; (8001218 <main+0x9b4>)
 80010c4:	f004 fd5f 	bl	8005b86 <HAL_UART_Transmit>
            lcd_put_cur(0, 0);
 80010c8:	2100      	movs	r1, #0
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fae1 	bl	8000692 <lcd_put_cur>
            lcd_send_string("non");
 80010d0:	485d      	ldr	r0, [pc, #372]	; (8001248 <main+0x9e4>)
 80010d2:	f7ff fb3a 	bl	800074a <lcd_send_string>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010dc:	484c      	ldr	r0, [pc, #304]	; (8001210 <main+0x9ac>)
 80010de:	f001 fffd 	bl	80030dc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e8:	4849      	ldr	r0, [pc, #292]	; (8001210 <main+0x9ac>)
 80010ea:	f001 fff7 	bl	80030dc <HAL_GPIO_WritePin>


            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer2,3,3000);
 80010ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010f2:	2203      	movs	r2, #3
 80010f4:	494a      	ldr	r1, [pc, #296]	; (8001220 <main+0x9bc>)
 80010f6:	4848      	ldr	r0, [pc, #288]	; (8001218 <main+0x9b4>)
 80010f8:	f004 fdd7 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer2,sizeof(rx_buffer2),1000);
 80010fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001100:	2264      	movs	r2, #100	; 0x64
 8001102:	4947      	ldr	r1, [pc, #284]	; (8001220 <main+0x9bc>)
 8001104:	4847      	ldr	r0, [pc, #284]	; (8001224 <main+0x9c0>)
 8001106:	f004 fd3e 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 800110a:	f7ff faab 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 800110e:	2100      	movs	r1, #0
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fabe 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer2);
 8001116:	4842      	ldr	r0, [pc, #264]	; (8001220 <main+0x9bc>)
 8001118:	f7ff fb17 	bl	800074a <lcd_send_string>
            HAL_Delay(2000);
 800111c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001120:	f001 f8ae 	bl	8002280 <HAL_Delay>



            HAL_UART_Transmit(&huart2,(uint8_t*)buffer8,sizeof(buffer8),1000);
 8001124:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112c:	2264      	movs	r2, #100	; 0x64
 800112e:	483d      	ldr	r0, [pc, #244]	; (8001224 <main+0x9c0>)
 8001130:	f004 fd29 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart6,(uint8_t*)buffer8,sizeof(buffer8),3000);
 8001134:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001138:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800113c:	2264      	movs	r2, #100	; 0x64
 800113e:	4836      	ldr	r0, [pc, #216]	; (8001218 <main+0x9b4>)
 8001140:	f004 fd21 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer4,3,3000);
 8001144:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001148:	2203      	movs	r2, #3
 800114a:	4937      	ldr	r1, [pc, #220]	; (8001228 <main+0x9c4>)
 800114c:	4832      	ldr	r0, [pc, #200]	; (8001218 <main+0x9b4>)
 800114e:	f004 fdac 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer4,sizeof(rx_buffer4),1000);
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	2264      	movs	r2, #100	; 0x64
 8001158:	4933      	ldr	r1, [pc, #204]	; (8001228 <main+0x9c4>)
 800115a:	4832      	ldr	r0, [pc, #200]	; (8001224 <main+0x9c0>)
 800115c:	f004 fd13 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 8001160:	f7ff fa80 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 8001164:	2100      	movs	r1, #0
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fa93 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer4);
 800116c:	482e      	ldr	r0, [pc, #184]	; (8001228 <main+0x9c4>)
 800116e:	f7ff faec 	bl	800074a <lcd_send_string>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer5,3,3000);
 8001172:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001176:	2203      	movs	r2, #3
 8001178:	492c      	ldr	r1, [pc, #176]	; (800122c <main+0x9c8>)
 800117a:	4827      	ldr	r0, [pc, #156]	; (8001218 <main+0x9b4>)
 800117c:	f004 fd95 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer5,sizeof(rx_buffer5),1000);
 8001180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001184:	2264      	movs	r2, #100	; 0x64
 8001186:	4929      	ldr	r1, [pc, #164]	; (800122c <main+0x9c8>)
 8001188:	4826      	ldr	r0, [pc, #152]	; (8001224 <main+0x9c0>)
 800118a:	f004 fcfc 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 800118e:	f7ff fa69 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 8001192:	2100      	movs	r1, #0
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fa7c 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer5);
 800119a:	4824      	ldr	r0, [pc, #144]	; (800122c <main+0x9c8>)
 800119c:	f7ff fad5 	bl	800074a <lcd_send_string>
            HAL_UART_Transmit(&huart6,(uint8_t*)buffer10,sizeof (buffer10), 3000);
 80011a0:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80011a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011a8:	2264      	movs	r2, #100	; 0x64
 80011aa:	481b      	ldr	r0, [pc, #108]	; (8001218 <main+0x9b4>)
 80011ac:	f004 fceb 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer6,3,3000);
 80011b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011b4:	2203      	movs	r2, #3
 80011b6:	491e      	ldr	r1, [pc, #120]	; (8001230 <main+0x9cc>)
 80011b8:	4817      	ldr	r0, [pc, #92]	; (8001218 <main+0x9b4>)
 80011ba:	f004 fd76 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer6,sizeof(rx_buffer6),1000);
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	2264      	movs	r2, #100	; 0x64
 80011c4:	491a      	ldr	r1, [pc, #104]	; (8001230 <main+0x9cc>)
 80011c6:	4817      	ldr	r0, [pc, #92]	; (8001224 <main+0x9c0>)
 80011c8:	f004 fcdd 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 80011cc:	f7ff fa4a 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 80011d0:	2100      	movs	r1, #0
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fa5d 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer6);
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <main+0x9cc>)
 80011da:	f7ff fab6 	bl	800074a <lcd_send_string>
            HAL_Delay(2000);
 80011de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011e2:	f001 f84d 	bl	8002280 <HAL_Delay>

            HAL_UART_Transmit(&huart6,(uint8_t*)position,sizeof (position), 3000);
 80011e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011ea:	2264      	movs	r2, #100	; 0x64
 80011ec:	4911      	ldr	r1, [pc, #68]	; (8001234 <main+0x9d0>)
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <main+0x9b4>)
 80011f0:	f004 fcc9 	bl	8005b86 <HAL_UART_Transmit>

                   HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer7,6,3000);
 80011f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011f8:	2206      	movs	r2, #6
 80011fa:	490f      	ldr	r1, [pc, #60]	; (8001238 <main+0x9d4>)
 80011fc:	e026      	b.n	800124c <main+0x9e8>
 80011fe:	bf00      	nop
 8001200:	20000258 	.word	0x20000258
 8001204:	0800b1ec 	.word	0x0800b1ec
 8001208:	20000244 	.word	0x20000244
 800120c:	0800b20c 	.word	0x0800b20c
 8001210:	40020400 	.word	0x40020400
 8001214:	0800b220 	.word	0x0800b220
 8001218:	200001f0 	.word	0x200001f0
 800121c:	0800b224 	.word	0x0800b224
 8001220:	20000388 	.word	0x20000388
 8001224:	200001ac 	.word	0x200001ac
 8001228:	200003ec 	.word	0x200003ec
 800122c:	20000450 	.word	0x20000450
 8001230:	200004b4 	.word	0x200004b4
 8001234:	20000000 	.word	0x20000000
 8001238:	20000518 	.word	0x20000518
 800123c:	0800b228 	.word	0x0800b228
 8001240:	2000057c 	.word	0x2000057c
 8001244:	0800b230 	.word	0x0800b230
 8001248:	0800b23c 	.word	0x0800b23c
 800124c:	4895      	ldr	r0, [pc, #596]	; (80014a4 <main+0xc40>)
 800124e:	f004 fd2c 	bl	8005caa <HAL_UART_Receive>
                   HAL_UART_Transmit(&huart2,(uint8_t*)"coooo",sizeof("coooo"),1000);
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	2206      	movs	r2, #6
 8001258:	4993      	ldr	r1, [pc, #588]	; (80014a8 <main+0xc44>)
 800125a:	4894      	ldr	r0, [pc, #592]	; (80014ac <main+0xc48>)
 800125c:	f004 fc93 	bl	8005b86 <HAL_UART_Transmit>
                          HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer7,sizeof(rx_buffer7),1000);
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	2264      	movs	r2, #100	; 0x64
 8001266:	4992      	ldr	r1, [pc, #584]	; (80014b0 <main+0xc4c>)
 8001268:	4890      	ldr	r0, [pc, #576]	; (80014ac <main+0xc48>)
 800126a:	f004 fc8c 	bl	8005b86 <HAL_UART_Transmit>
                   HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer11,3,3000);
 800126e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001272:	2203      	movs	r2, #3
 8001274:	498f      	ldr	r1, [pc, #572]	; (80014b4 <main+0xc50>)
 8001276:	488b      	ldr	r0, [pc, #556]	; (80014a4 <main+0xc40>)
 8001278:	f004 fd17 	bl	8005caa <HAL_UART_Receive>

            lcd_clear ();
 800127c:	f7ff f9f2 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 8001280:	2100      	movs	r1, #0
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fa05 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer7);
 8001288:	4889      	ldr	r0, [pc, #548]	; (80014b0 <main+0xc4c>)
 800128a:	f7ff fa5e 	bl	800074a <lcd_send_string>
            lcd_put_cur(1, 0);
 800128e:	2100      	movs	r1, #0
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff f9fe 	bl	8000692 <lcd_put_cur>
            lcd_send_string("BD update ");
 8001296:	4888      	ldr	r0, [pc, #544]	; (80014b8 <main+0xc54>)
 8001298:	f7ff fa57 	bl	800074a <lcd_send_string>
            }

            }


            if ((startsWith(rx_buffer, "t")==true ) && ( i==2 )){
 800129c:	4987      	ldr	r1, [pc, #540]	; (80014bc <main+0xc58>)
 800129e:	4888      	ldr	r0, [pc, #544]	; (80014c0 <main+0xc5c>)
 80012a0:	f7ff fa68 	bl	8000774 <startsWith>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8318 	beq.w	80018dc <main+0x1078>
 80012ac:	4b85      	ldr	r3, [pc, #532]	; (80014c4 <main+0xc60>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	f040 8313 	bne.w	80018dc <main+0x1078>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012bc:	4882      	ldr	r0, [pc, #520]	; (80014c8 <main+0xc64>)
 80012be:	f001 ff0d 	bl	80030dc <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c8:	487f      	ldr	r0, [pc, #508]	; (80014c8 <main+0xc64>)
 80012ca:	f001 ff07 	bl	80030dc <HAL_GPIO_WritePin>

            	lcd_clear ();
 80012ce:	f7ff f9c9 	bl	8000664 <lcd_clear>

          //  	while ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)== 0) &&  (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)== 0)     ){

            lcd_put_cur(0, 0);
 80012d2:	2100      	movs	r1, #0
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff f9dc 	bl	8000692 <lcd_put_cur>
            lcd_send_string("validation?");
 80012da:	487c      	ldr	r0, [pc, #496]	; (80014cc <main+0xc68>)
 80012dc:	f7ff fa35 	bl	800074a <lcd_send_string>
            lcd_put_cur(1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff f9d5 	bl	8000692 <lcd_put_cur>
                    lcd_send_string(buffer1);
 80012e8:	4879      	ldr	r0, [pc, #484]	; (80014d0 <main+0xc6c>)
 80012ea:	f7ff fa2e 	bl	800074a <lcd_send_string>
                    HAL_Delay(500);
 80012ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f2:	f000 ffc5 	bl	8002280 <HAL_Delay>
                    lcd_clear ();
 80012f6:	f7ff f9b5 	bl	8000664 <lcd_clear>
         //   }
                    while (( db < 90) )
 80012fa:	e0a9      	b.n	8001450 <main+0xbec>
                    {
                   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2120      	movs	r1, #32
 8001300:	4871      	ldr	r0, [pc, #452]	; (80014c8 <main+0xc64>)
 8001302:	f001 feeb 	bl	80030dc <HAL_GPIO_WritePin>
                   HAL_Delay(500);
 8001306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130a:	f000 ffb9 	bl	8002280 <HAL_Delay>

                   float peakToPeak = 0;                                  // peak-to-peak level
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

                   unsigned int signalMax = 0;                            //minimum value
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
                   unsigned int signalMin = 1024;
 800131c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001320:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
                   unsigned long startMillis=HAL_GetTick();
 8001324:	f000 ffa0 	bl	8002268 <HAL_GetTick>
 8001328:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
                    while (((HAL_GetTick() - startMillis) < sampleWindow))
 800132c:	e02a      	b.n	8001384 <main+0xb20>
                   {
                   HAL_ADC_Start(&hadc1);
 800132e:	4869      	ldr	r0, [pc, #420]	; (80014d4 <main+0xc70>)
 8001330:	f001 f80e 	bl	8002350 <HAL_ADC_Start>
                   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	4866      	ldr	r0, [pc, #408]	; (80014d4 <main+0xc70>)
 800133a:	f001 f8f0 	bl	800251e <HAL_ADC_PollForConversion>
                   sample  = HAL_ADC_GetValue(&hadc1 ) ;
 800133e:	4865      	ldr	r0, [pc, #404]	; (80014d4 <main+0xc70>)
 8001340:	f001 f978 	bl	8002634 <HAL_ADC_GetValue>
 8001344:	4603      	mov	r3, r0
 8001346:	4a64      	ldr	r2, [pc, #400]	; (80014d8 <main+0xc74>)
 8001348:	6013      	str	r3, [r2, #0]
                   HAL_ADC_Stop(&hadc1);
 800134a:	4862      	ldr	r0, [pc, #392]	; (80014d4 <main+0xc70>)
 800134c:	f001 f8b4 	bl	80024b8 <HAL_ADC_Stop>

                               	                                         //get reading from microphone
                    if (sample < 1024)                                  // toss out spurious readings
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <main+0xc74>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d214      	bcs.n	8001384 <main+0xb20>
                    {
                   if (sample > signalMax)
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <main+0xc74>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001362:	429a      	cmp	r2, r3
 8001364:	d204      	bcs.n	8001370 <main+0xb0c>
                   {
                   signalMax = sample;                           // save just the max levels
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <main+0xc74>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800136e:	e009      	b.n	8001384 <main+0xb20>
                    }
                   else if (sample < signalMin)
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <main+0xc74>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8001378:	429a      	cmp	r2, r3
 800137a:	d903      	bls.n	8001384 <main+0xb20>
                   {
                   signalMin = sample;                           // save just the min levels
 800137c:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <main+0xc74>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
                    while (((HAL_GetTick() - startMillis) < sampleWindow))
 8001384:	f000 ff70 	bl	8002268 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2264      	movs	r2, #100	; 0x64
 8001392:	4293      	cmp	r3, r2
 8001394:	d3cb      	bcc.n	800132e <main+0xaca>
                   }
                   }
                   }


                    peakToPeak = signalMax - signalMin;                    // max - min = peak-peak amplitude
 8001396:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800139a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a8:	edc7 7a97 	vstr	s15, [r7, #604]	; 0x25c
                   db = map(peakToPeak,20,900,49.5,90);   //(long x, long in_min, long in_max, long out_min, long out_max)
 80013ac:	edd7 7a97 	vldr	s15, [r7, #604]	; 0x25c
 80013b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b4:	235a      	movs	r3, #90	; 0x5a
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2331      	movs	r3, #49	; 0x31
 80013ba:	f44f 7261 	mov.w	r2, #900	; 0x384
 80013be:	2114      	movs	r1, #20
 80013c0:	ee17 0a90 	vmov	r0, s15
 80013c4:	f7ff f9fa 	bl	80007bc <map>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a44      	ldr	r2, [pc, #272]	; (80014dc <main+0xc78>)
 80013cc:	6013      	str	r3, [r2, #0]
                   lcd_clear ();
 80013ce:	f7ff f949 	bl	8000664 <lcd_clear>
                   lcd_put_cur(0,0);
 80013d2:	2100      	movs	r1, #0
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff f95c 	bl	8000692 <lcd_put_cur>
                   lcd_send_string ("bd = ");
 80013da:	4841      	ldr	r0, [pc, #260]	; (80014e0 <main+0xc7c>)
 80013dc:	f7ff f9b5 	bl	800074a <lcd_send_string>
                   lcd_put_cur(0,4);
 80013e0:	2104      	movs	r1, #4
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff f955 	bl	8000692 <lcd_put_cur>
                   k++;
 80013e8:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <main+0xc80>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a3d      	ldr	r2, [pc, #244]	; (80014e4 <main+0xc80>)
 80013f0:	6013      	str	r3, [r2, #0]

                   if (db <= 80)
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <main+0xc78>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b50      	cmp	r3, #80	; 0x50
 80013f8:	dc15      	bgt.n	8001426 <main+0xbc2>
                   {
                   sprintf ( msg , "%hu\r\n " , db ) ;
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <main+0xc78>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4939      	ldr	r1, [pc, #228]	; (80014e8 <main+0xc84>)
 8001402:	483a      	ldr	r0, [pc, #232]	; (80014ec <main+0xc88>)
 8001404:	f009 fac8 	bl	800a998 <siprintf>
                   lcd_put_cur(0,4);
 8001408:	2104      	movs	r1, #4
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff f941 	bl	8000692 <lcd_put_cur>
                   lcd_send_string (msg);
 8001410:	4836      	ldr	r0, [pc, #216]	; (80014ec <main+0xc88>)
 8001412:	f7ff f99a 	bl	800074a <lcd_send_string>


                   if (k>=20)
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <main+0xc80>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b13      	cmp	r3, #19
 800141c:	dd15      	ble.n	800144a <main+0xbe6>
                   { teste = false ;
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <main+0xc8c>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
                   break;
 8001424:	e019      	b.n	800145a <main+0xbf6>

                   }


                   else
                   {  sprintf ( msg , "%hu\r\n " , db ) ;
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <main+0xc78>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	492e      	ldr	r1, [pc, #184]	; (80014e8 <main+0xc84>)
 800142e:	482f      	ldr	r0, [pc, #188]	; (80014ec <main+0xc88>)
 8001430:	f009 fab2 	bl	800a998 <siprintf>

                   lcd_put_cur(0,4);
 8001434:	2104      	movs	r1, #4
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff f92b 	bl	8000692 <lcd_put_cur>
                   lcd_send_string (msg);
 800143c:	482b      	ldr	r0, [pc, #172]	; (80014ec <main+0xc88>)
 800143e:	f7ff f984 	bl	800074a <lcd_send_string>
                    teste = true;
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <main+0xc8c>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
                   break;
 8001448:	e007      	b.n	800145a <main+0xbf6>
                    }

                   HAL_Delay(100);
 800144a:	2064      	movs	r0, #100	; 0x64
 800144c:	f000 ff18 	bl	8002280 <HAL_Delay>
                    while (( db < 90) )
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <main+0xc78>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b59      	cmp	r3, #89	; 0x59
 8001456:	f77f af51 	ble.w	80012fc <main+0xa98>
                    }
                   if (teste==true){
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <main+0xc8c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d04a      	beq.n	80014f8 <main+0xc94>
                   lcd_clear ();
 8001462:	f7ff f8ff 	bl	8000664 <lcd_clear>
                   lcd_put_cur(0,0);
 8001466:	2100      	movs	r1, #0
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff f912 	bl	8000692 <lcd_put_cur>
                   lcd_send_string ("bd = ");
 800146e:	481c      	ldr	r0, [pc, #112]	; (80014e0 <main+0xc7c>)
 8001470:	f7ff f96b 	bl	800074a <lcd_send_string>
                   lcd_put_cur(0,4);
 8001474:	2104      	movs	r1, #4
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff f90b 	bl	8000692 <lcd_put_cur>
                   lcd_send_string (msg);
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <main+0xc88>)
 800147e:	f7ff f964 	bl	800074a <lcd_send_string>
                   lcd_put_cur(1,0);
 8001482:	2100      	movs	r1, #0
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff f904 	bl	8000692 <lcd_put_cur>
                   lcd_send_string ("teste valide");
 800148a:	481a      	ldr	r0, [pc, #104]	; (80014f4 <main+0xc90>)
 800148c:	f7ff f95d 	bl	800074a <lcd_send_string>
                    HAL_Delay(500);
 8001490:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001494:	f000 fef4 	bl	8002280 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2120      	movs	r1, #32
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <main+0xc64>)
 800149e:	f001 fe1d 	bl	80030dc <HAL_GPIO_WritePin>
 80014a2:	e050      	b.n	8001546 <main+0xce2>
 80014a4:	200001f0 	.word	0x200001f0
 80014a8:	0800b228 	.word	0x0800b228
 80014ac:	200001ac 	.word	0x200001ac
 80014b0:	20000518 	.word	0x20000518
 80014b4:	2000057c 	.word	0x2000057c
 80014b8:	0800b230 	.word	0x0800b230
 80014bc:	0800b1d0 	.word	0x0800b1d0
 80014c0:	20000324 	.word	0x20000324
 80014c4:	200005e4 	.word	0x200005e4
 80014c8:	40020400 	.word	0x40020400
 80014cc:	0800b1e0 	.word	0x0800b1e0
 80014d0:	200002c0 	.word	0x200002c0
 80014d4:	20000110 	.word	0x20000110
 80014d8:	2000023c 	.word	0x2000023c
 80014dc:	20000240 	.word	0x20000240
 80014e0:	0800b1ec 	.word	0x0800b1ec
 80014e4:	20000238 	.word	0x20000238
 80014e8:	0800b1f4 	.word	0x0800b1f4
 80014ec:	20000244 	.word	0x20000244
 80014f0:	20000258 	.word	0x20000258
 80014f4:	0800b1fc 	.word	0x0800b1fc

                   }

                   else if (teste==false ){
 80014f8:	4bd1      	ldr	r3, [pc, #836]	; (8001840 <main+0xfdc>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f083 0301 	eor.w	r3, r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01f      	beq.n	8001546 <main+0xce2>
                   lcd_clear ();
 8001506:	f7ff f8ad 	bl	8000664 <lcd_clear>
                   lcd_put_cur(0,0);
 800150a:	2100      	movs	r1, #0
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff f8c0 	bl	8000692 <lcd_put_cur>
                   lcd_send_string ("bd = ");
 8001512:	48cc      	ldr	r0, [pc, #816]	; (8001844 <main+0xfe0>)
 8001514:	f7ff f919 	bl	800074a <lcd_send_string>
                   lcd_put_cur(0,4);
 8001518:	2104      	movs	r1, #4
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff f8b9 	bl	8000692 <lcd_put_cur>
                   lcd_send_string (msg);
 8001520:	48c9      	ldr	r0, [pc, #804]	; (8001848 <main+0xfe4>)
 8001522:	f7ff f912 	bl	800074a <lcd_send_string>
                   lcd_put_cur(1,0);
 8001526:	2100      	movs	r1, #0
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff f8b2 	bl	8000692 <lcd_put_cur>
                   lcd_send_string ("teste non valide");
 800152e:	48c7      	ldr	r0, [pc, #796]	; (800184c <main+0xfe8>)
 8001530:	f7ff f90b 	bl	800074a <lcd_send_string>
                   HAL_Delay(500);
 8001534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001538:	f000 fea2 	bl	8002280 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2120      	movs	r1, #32
 8001540:	48c3      	ldr	r0, [pc, #780]	; (8001850 <main+0xfec>)
 8001542:	f001 fdcb 	bl	80030dc <HAL_GPIO_WritePin>

                    }



            if(teste==true)
 8001546:	4bbe      	ldr	r3, [pc, #760]	; (8001840 <main+0xfdc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80cb 	beq.w	80016e6 <main+0xe82>
            {
            lcd_clear ();
 8001550:	f7ff f888 	bl	8000664 <lcd_clear>
            HAL_UART_Transmit(&huart6,(uint8_t*)"ook",sizeof ("ook"), 3000);
 8001554:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001558:	2204      	movs	r2, #4
 800155a:	49be      	ldr	r1, [pc, #760]	; (8001854 <main+0xff0>)
 800155c:	48be      	ldr	r0, [pc, #760]	; (8001858 <main+0xff4>)
 800155e:	f004 fb12 	bl	8005b86 <HAL_UART_Transmit>
            lcd_put_cur(0, 0);
 8001562:	2100      	movs	r1, #0
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff f894 	bl	8000692 <lcd_put_cur>
            lcd_send_string("oui");
 800156a:	48bc      	ldr	r0, [pc, #752]	; (800185c <main+0xff8>)
 800156c:	f7ff f8ed 	bl	800074a <lcd_send_string>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001576:	48b6      	ldr	r0, [pc, #728]	; (8001850 <main+0xfec>)
 8001578:	f001 fdb0 	bl	80030dc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001582:	48b3      	ldr	r0, [pc, #716]	; (8001850 <main+0xfec>)
 8001584:	f001 fdaa 	bl	80030dc <HAL_GPIO_WritePin>


             HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer2,3,3000);
 8001588:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800158c:	2203      	movs	r2, #3
 800158e:	49b4      	ldr	r1, [pc, #720]	; (8001860 <main+0xffc>)
 8001590:	48b1      	ldr	r0, [pc, #708]	; (8001858 <main+0xff4>)
 8001592:	f004 fb8a 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer2,sizeof(rx_buffer2),1000);
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	2264      	movs	r2, #100	; 0x64
 800159c:	49b0      	ldr	r1, [pc, #704]	; (8001860 <main+0xffc>)
 800159e:	48b1      	ldr	r0, [pc, #708]	; (8001864 <main+0x1000>)
 80015a0:	f004 faf1 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 80015a4:	f7ff f85e 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff f871 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer2);
 80015b0:	48ab      	ldr	r0, [pc, #684]	; (8001860 <main+0xffc>)
 80015b2:	f7ff f8ca 	bl	800074a <lcd_send_string>
            HAL_Delay(2000);
 80015b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015ba:	f000 fe61 	bl	8002280 <HAL_Delay>



            HAL_UART_Transmit(&huart2,(uint8_t*)buffer8,sizeof(buffer8),1000);
 80015be:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	2264      	movs	r2, #100	; 0x64
 80015c8:	48a6      	ldr	r0, [pc, #664]	; (8001864 <main+0x1000>)
 80015ca:	f004 fadc 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart6,(uint8_t*)buffer8,sizeof(buffer8),3000);
 80015ce:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80015d2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015d6:	2264      	movs	r2, #100	; 0x64
 80015d8:	489f      	ldr	r0, [pc, #636]	; (8001858 <main+0xff4>)
 80015da:	f004 fad4 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer4,3,3000);
 80015de:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015e2:	2203      	movs	r2, #3
 80015e4:	49a0      	ldr	r1, [pc, #640]	; (8001868 <main+0x1004>)
 80015e6:	489c      	ldr	r0, [pc, #624]	; (8001858 <main+0xff4>)
 80015e8:	f004 fb5f 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer4,sizeof(rx_buffer4),1000);
 80015ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f0:	2264      	movs	r2, #100	; 0x64
 80015f2:	499d      	ldr	r1, [pc, #628]	; (8001868 <main+0x1004>)
 80015f4:	489b      	ldr	r0, [pc, #620]	; (8001864 <main+0x1000>)
 80015f6:	f004 fac6 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 80015fa:	f7ff f833 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 80015fe:	2100      	movs	r1, #0
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff f846 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer4);
 8001606:	4898      	ldr	r0, [pc, #608]	; (8001868 <main+0x1004>)
 8001608:	f7ff f89f 	bl	800074a <lcd_send_string>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer5,3,3000);
 800160c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001610:	2203      	movs	r2, #3
 8001612:	4996      	ldr	r1, [pc, #600]	; (800186c <main+0x1008>)
 8001614:	4890      	ldr	r0, [pc, #576]	; (8001858 <main+0xff4>)
 8001616:	f004 fb48 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer5,sizeof(rx_buffer5),1000);
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	2264      	movs	r2, #100	; 0x64
 8001620:	4992      	ldr	r1, [pc, #584]	; (800186c <main+0x1008>)
 8001622:	4890      	ldr	r0, [pc, #576]	; (8001864 <main+0x1000>)
 8001624:	f004 faaf 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 8001628:	f7ff f81c 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 800162c:	2100      	movs	r1, #0
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff f82f 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer5);
 8001634:	488d      	ldr	r0, [pc, #564]	; (800186c <main+0x1008>)
 8001636:	f7ff f888 	bl	800074a <lcd_send_string>
            HAL_UART_Transmit(&huart6,(uint8_t*)buffer10,sizeof (buffer10), 3000);
 800163a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800163e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001642:	2264      	movs	r2, #100	; 0x64
 8001644:	4884      	ldr	r0, [pc, #528]	; (8001858 <main+0xff4>)
 8001646:	f004 fa9e 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer6,3,3000);
 800164a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800164e:	2203      	movs	r2, #3
 8001650:	4987      	ldr	r1, [pc, #540]	; (8001870 <main+0x100c>)
 8001652:	4881      	ldr	r0, [pc, #516]	; (8001858 <main+0xff4>)
 8001654:	f004 fb29 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer6,sizeof(rx_buffer6),1000);
 8001658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165c:	2264      	movs	r2, #100	; 0x64
 800165e:	4984      	ldr	r1, [pc, #528]	; (8001870 <main+0x100c>)
 8001660:	4880      	ldr	r0, [pc, #512]	; (8001864 <main+0x1000>)
 8001662:	f004 fa90 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 8001666:	f7fe fffd 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 800166a:	2100      	movs	r1, #0
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff f810 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer6);
 8001672:	487f      	ldr	r0, [pc, #508]	; (8001870 <main+0x100c>)
 8001674:	f7ff f869 	bl	800074a <lcd_send_string>
            HAL_Delay(2000);
 8001678:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800167c:	f000 fe00 	bl	8002280 <HAL_Delay>
            HAL_UART_Transmit(&huart6,(uint8_t*)position,sizeof (position), 3000);
 8001680:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001684:	2264      	movs	r2, #100	; 0x64
 8001686:	497b      	ldr	r1, [pc, #492]	; (8001874 <main+0x1010>)
 8001688:	4873      	ldr	r0, [pc, #460]	; (8001858 <main+0xff4>)
 800168a:	f004 fa7c 	bl	8005b86 <HAL_UART_Transmit>

                   HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer7,6,3000);
 800168e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001692:	2206      	movs	r2, #6
 8001694:	4978      	ldr	r1, [pc, #480]	; (8001878 <main+0x1014>)
 8001696:	4870      	ldr	r0, [pc, #448]	; (8001858 <main+0xff4>)
 8001698:	f004 fb07 	bl	8005caa <HAL_UART_Receive>
                   HAL_UART_Transmit(&huart2,(uint8_t*)"coooo",sizeof("coooo"),1000);
 800169c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a0:	2206      	movs	r2, #6
 80016a2:	4976      	ldr	r1, [pc, #472]	; (800187c <main+0x1018>)
 80016a4:	486f      	ldr	r0, [pc, #444]	; (8001864 <main+0x1000>)
 80016a6:	f004 fa6e 	bl	8005b86 <HAL_UART_Transmit>
                          HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer7,sizeof(rx_buffer7),1000);
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	2264      	movs	r2, #100	; 0x64
 80016b0:	4971      	ldr	r1, [pc, #452]	; (8001878 <main+0x1014>)
 80016b2:	486c      	ldr	r0, [pc, #432]	; (8001864 <main+0x1000>)
 80016b4:	f004 fa67 	bl	8005b86 <HAL_UART_Transmit>
                   HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer11,3,3000);
 80016b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016bc:	2203      	movs	r2, #3
 80016be:	4970      	ldr	r1, [pc, #448]	; (8001880 <main+0x101c>)
 80016c0:	4865      	ldr	r0, [pc, #404]	; (8001858 <main+0xff4>)
 80016c2:	f004 faf2 	bl	8005caa <HAL_UART_Receive>

            lcd_clear ();
 80016c6:	f7fe ffcd 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7fe ffe0 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer7);
 80016d2:	4869      	ldr	r0, [pc, #420]	; (8001878 <main+0x1014>)
 80016d4:	f7ff f839 	bl	800074a <lcd_send_string>
            lcd_put_cur(1, 0);
 80016d8:	2100      	movs	r1, #0
 80016da:	2001      	movs	r0, #1
 80016dc:	f7fe ffd9 	bl	8000692 <lcd_put_cur>
            lcd_send_string("BD update ");
 80016e0:	4868      	ldr	r0, [pc, #416]	; (8001884 <main+0x1020>)
 80016e2:	f7ff f832 	bl	800074a <lcd_send_string>





            if(teste==false)
 80016e6:	4b56      	ldr	r3, [pc, #344]	; (8001840 <main+0xfdc>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	f083 0301 	eor.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80f3 	beq.w	80018dc <main+0x1078>
            {

            lcd_clear ();
 80016f6:	f7fe ffb5 	bl	8000664 <lcd_clear>

            HAL_UART_Transmit(&huart6,(uint8_t*)"non",sizeof ("non"), 3000);
 80016fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016fe:	2204      	movs	r2, #4
 8001700:	4961      	ldr	r1, [pc, #388]	; (8001888 <main+0x1024>)
 8001702:	4855      	ldr	r0, [pc, #340]	; (8001858 <main+0xff4>)
 8001704:	f004 fa3f 	bl	8005b86 <HAL_UART_Transmit>
            lcd_put_cur(0, 0);
 8001708:	2100      	movs	r1, #0
 800170a:	2000      	movs	r0, #0
 800170c:	f7fe ffc1 	bl	8000692 <lcd_put_cur>
            lcd_send_string("non");
 8001710:	485d      	ldr	r0, [pc, #372]	; (8001888 <main+0x1024>)
 8001712:	f7ff f81a 	bl	800074a <lcd_send_string>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171c:	484c      	ldr	r0, [pc, #304]	; (8001850 <main+0xfec>)
 800171e:	f001 fcdd 	bl	80030dc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001728:	4849      	ldr	r0, [pc, #292]	; (8001850 <main+0xfec>)
 800172a:	f001 fcd7 	bl	80030dc <HAL_GPIO_WritePin>


            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer2,3,3000);
 800172e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001732:	2203      	movs	r2, #3
 8001734:	494a      	ldr	r1, [pc, #296]	; (8001860 <main+0xffc>)
 8001736:	4848      	ldr	r0, [pc, #288]	; (8001858 <main+0xff4>)
 8001738:	f004 fab7 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer2,sizeof(rx_buffer2),1000);
 800173c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001740:	2264      	movs	r2, #100	; 0x64
 8001742:	4947      	ldr	r1, [pc, #284]	; (8001860 <main+0xffc>)
 8001744:	4847      	ldr	r0, [pc, #284]	; (8001864 <main+0x1000>)
 8001746:	f004 fa1e 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 800174a:	f7fe ff8b 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 800174e:	2100      	movs	r1, #0
 8001750:	2000      	movs	r0, #0
 8001752:	f7fe ff9e 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer2);
 8001756:	4842      	ldr	r0, [pc, #264]	; (8001860 <main+0xffc>)
 8001758:	f7fe fff7 	bl	800074a <lcd_send_string>
            HAL_Delay(2000);
 800175c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001760:	f000 fd8e 	bl	8002280 <HAL_Delay>



            HAL_UART_Transmit(&huart2,(uint8_t*)buffer8,sizeof(buffer8),1000);
 8001764:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176c:	2264      	movs	r2, #100	; 0x64
 800176e:	483d      	ldr	r0, [pc, #244]	; (8001864 <main+0x1000>)
 8001770:	f004 fa09 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart6,(uint8_t*)buffer8,sizeof(buffer8),3000);
 8001774:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001778:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800177c:	2264      	movs	r2, #100	; 0x64
 800177e:	4836      	ldr	r0, [pc, #216]	; (8001858 <main+0xff4>)
 8001780:	f004 fa01 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer4,3,3000);
 8001784:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001788:	2203      	movs	r2, #3
 800178a:	4937      	ldr	r1, [pc, #220]	; (8001868 <main+0x1004>)
 800178c:	4832      	ldr	r0, [pc, #200]	; (8001858 <main+0xff4>)
 800178e:	f004 fa8c 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer4,sizeof(rx_buffer4),1000);
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	2264      	movs	r2, #100	; 0x64
 8001798:	4933      	ldr	r1, [pc, #204]	; (8001868 <main+0x1004>)
 800179a:	4832      	ldr	r0, [pc, #200]	; (8001864 <main+0x1000>)
 800179c:	f004 f9f3 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 80017a0:	f7fe ff60 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 80017a4:	2100      	movs	r1, #0
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7fe ff73 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer4);
 80017ac:	482e      	ldr	r0, [pc, #184]	; (8001868 <main+0x1004>)
 80017ae:	f7fe ffcc 	bl	800074a <lcd_send_string>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer5,3,3000);
 80017b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017b6:	2203      	movs	r2, #3
 80017b8:	492c      	ldr	r1, [pc, #176]	; (800186c <main+0x1008>)
 80017ba:	4827      	ldr	r0, [pc, #156]	; (8001858 <main+0xff4>)
 80017bc:	f004 fa75 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer5,sizeof(rx_buffer5),1000);
 80017c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c4:	2264      	movs	r2, #100	; 0x64
 80017c6:	4929      	ldr	r1, [pc, #164]	; (800186c <main+0x1008>)
 80017c8:	4826      	ldr	r0, [pc, #152]	; (8001864 <main+0x1000>)
 80017ca:	f004 f9dc 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 80017ce:	f7fe ff49 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 80017d2:	2100      	movs	r1, #0
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7fe ff5c 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer5);
 80017da:	4824      	ldr	r0, [pc, #144]	; (800186c <main+0x1008>)
 80017dc:	f7fe ffb5 	bl	800074a <lcd_send_string>
            HAL_UART_Transmit(&huart6,(uint8_t*)buffer10,sizeof (buffer10), 3000);
 80017e0:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80017e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017e8:	2264      	movs	r2, #100	; 0x64
 80017ea:	481b      	ldr	r0, [pc, #108]	; (8001858 <main+0xff4>)
 80017ec:	f004 f9cb 	bl	8005b86 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer6,3,3000);
 80017f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017f4:	2203      	movs	r2, #3
 80017f6:	491e      	ldr	r1, [pc, #120]	; (8001870 <main+0x100c>)
 80017f8:	4817      	ldr	r0, [pc, #92]	; (8001858 <main+0xff4>)
 80017fa:	f004 fa56 	bl	8005caa <HAL_UART_Receive>

            HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer6,sizeof(rx_buffer6),1000);
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	2264      	movs	r2, #100	; 0x64
 8001804:	491a      	ldr	r1, [pc, #104]	; (8001870 <main+0x100c>)
 8001806:	4817      	ldr	r0, [pc, #92]	; (8001864 <main+0x1000>)
 8001808:	f004 f9bd 	bl	8005b86 <HAL_UART_Transmit>
            lcd_clear ();
 800180c:	f7fe ff2a 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 8001810:	2100      	movs	r1, #0
 8001812:	2000      	movs	r0, #0
 8001814:	f7fe ff3d 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer6);
 8001818:	4815      	ldr	r0, [pc, #84]	; (8001870 <main+0x100c>)
 800181a:	f7fe ff96 	bl	800074a <lcd_send_string>
            HAL_Delay(2000);
 800181e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001822:	f000 fd2d 	bl	8002280 <HAL_Delay>
            HAL_UART_Transmit(&huart6,(uint8_t*)position,sizeof (position), 3000);
 8001826:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800182a:	2264      	movs	r2, #100	; 0x64
 800182c:	4911      	ldr	r1, [pc, #68]	; (8001874 <main+0x1010>)
 800182e:	480a      	ldr	r0, [pc, #40]	; (8001858 <main+0xff4>)
 8001830:	f004 f9a9 	bl	8005b86 <HAL_UART_Transmit>

                   HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer7,6,3000);
 8001834:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001838:	2206      	movs	r2, #6
 800183a:	490f      	ldr	r1, [pc, #60]	; (8001878 <main+0x1014>)
 800183c:	e026      	b.n	800188c <main+0x1028>
 800183e:	bf00      	nop
 8001840:	20000258 	.word	0x20000258
 8001844:	0800b1ec 	.word	0x0800b1ec
 8001848:	20000244 	.word	0x20000244
 800184c:	0800b20c 	.word	0x0800b20c
 8001850:	40020400 	.word	0x40020400
 8001854:	0800b220 	.word	0x0800b220
 8001858:	200001f0 	.word	0x200001f0
 800185c:	0800b224 	.word	0x0800b224
 8001860:	20000388 	.word	0x20000388
 8001864:	200001ac 	.word	0x200001ac
 8001868:	200003ec 	.word	0x200003ec
 800186c:	20000450 	.word	0x20000450
 8001870:	200004b4 	.word	0x200004b4
 8001874:	20000000 	.word	0x20000000
 8001878:	20000518 	.word	0x20000518
 800187c:	0800b228 	.word	0x0800b228
 8001880:	2000057c 	.word	0x2000057c
 8001884:	0800b230 	.word	0x0800b230
 8001888:	0800b23c 	.word	0x0800b23c
 800188c:	4852      	ldr	r0, [pc, #328]	; (80019d8 <main+0x1174>)
 800188e:	f004 fa0c 	bl	8005caa <HAL_UART_Receive>
                   HAL_UART_Transmit(&huart2,(uint8_t*)"coooo",sizeof("coooo"),1000);
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	2206      	movs	r2, #6
 8001898:	4950      	ldr	r1, [pc, #320]	; (80019dc <main+0x1178>)
 800189a:	4851      	ldr	r0, [pc, #324]	; (80019e0 <main+0x117c>)
 800189c:	f004 f973 	bl	8005b86 <HAL_UART_Transmit>
                          HAL_UART_Transmit(&huart2,(uint8_t*)rx_buffer7,sizeof(rx_buffer7),1000);
 80018a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a4:	2264      	movs	r2, #100	; 0x64
 80018a6:	494f      	ldr	r1, [pc, #316]	; (80019e4 <main+0x1180>)
 80018a8:	484d      	ldr	r0, [pc, #308]	; (80019e0 <main+0x117c>)
 80018aa:	f004 f96c 	bl	8005b86 <HAL_UART_Transmit>
                   HAL_UART_Receive(&huart6,(uint8_t*)rx_buffer11,3,3000);
 80018ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018b2:	2203      	movs	r2, #3
 80018b4:	494c      	ldr	r1, [pc, #304]	; (80019e8 <main+0x1184>)
 80018b6:	4848      	ldr	r0, [pc, #288]	; (80019d8 <main+0x1174>)
 80018b8:	f004 f9f7 	bl	8005caa <HAL_UART_Receive>

            lcd_clear ();
 80018bc:	f7fe fed2 	bl	8000664 <lcd_clear>
            lcd_put_cur(0, 0);
 80018c0:	2100      	movs	r1, #0
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7fe fee5 	bl	8000692 <lcd_put_cur>
            lcd_send_string(rx_buffer7);
 80018c8:	4846      	ldr	r0, [pc, #280]	; (80019e4 <main+0x1180>)
 80018ca:	f7fe ff3e 	bl	800074a <lcd_send_string>
            lcd_put_cur(1, 0);
 80018ce:	2100      	movs	r1, #0
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7fe fede 	bl	8000692 <lcd_put_cur>
            lcd_send_string("BD update ");
 80018d6:	4845      	ldr	r0, [pc, #276]	; (80019ec <main+0x1188>)
 80018d8:	f7fe ff37 	bl	800074a <lcd_send_string>

            }

            }

        strncpy(position, "", sizeof(position));
 80018dc:	2264      	movs	r2, #100	; 0x64
 80018de:	4944      	ldr	r1, [pc, #272]	; (80019f0 <main+0x118c>)
 80018e0:	4844      	ldr	r0, [pc, #272]	; (80019f4 <main+0x1190>)
 80018e2:	f009 f888 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer, "", sizeof(rx_buffer));
 80018e6:	2264      	movs	r2, #100	; 0x64
 80018e8:	4941      	ldr	r1, [pc, #260]	; (80019f0 <main+0x118c>)
 80018ea:	4843      	ldr	r0, [pc, #268]	; (80019f8 <main+0x1194>)
 80018ec:	f009 f883 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer, "", sizeof(rx_buffer));
 80018f0:	2264      	movs	r2, #100	; 0x64
 80018f2:	493f      	ldr	r1, [pc, #252]	; (80019f0 <main+0x118c>)
 80018f4:	4840      	ldr	r0, [pc, #256]	; (80019f8 <main+0x1194>)
 80018f6:	f009 f87e 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer2, "", sizeof(rx_buffer2));
 80018fa:	2264      	movs	r2, #100	; 0x64
 80018fc:	493c      	ldr	r1, [pc, #240]	; (80019f0 <main+0x118c>)
 80018fe:	483f      	ldr	r0, [pc, #252]	; (80019fc <main+0x1198>)
 8001900:	f009 f879 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer5, "", sizeof(rx_buffer5));
 8001904:	2264      	movs	r2, #100	; 0x64
 8001906:	493a      	ldr	r1, [pc, #232]	; (80019f0 <main+0x118c>)
 8001908:	483d      	ldr	r0, [pc, #244]	; (8001a00 <main+0x119c>)
 800190a:	f009 f874 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer4, "", sizeof(rx_buffer4));
 800190e:	2264      	movs	r2, #100	; 0x64
 8001910:	4937      	ldr	r1, [pc, #220]	; (80019f0 <main+0x118c>)
 8001912:	483c      	ldr	r0, [pc, #240]	; (8001a04 <main+0x11a0>)
 8001914:	f009 f86f 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer6, "", sizeof(rx_buffer6));
 8001918:	2264      	movs	r2, #100	; 0x64
 800191a:	4935      	ldr	r1, [pc, #212]	; (80019f0 <main+0x118c>)
 800191c:	483a      	ldr	r0, [pc, #232]	; (8001a08 <main+0x11a4>)
 800191e:	f009 f86a 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer7, "", sizeof(rx_buffer7));
 8001922:	2264      	movs	r2, #100	; 0x64
 8001924:	4932      	ldr	r1, [pc, #200]	; (80019f0 <main+0x118c>)
 8001926:	482f      	ldr	r0, [pc, #188]	; (80019e4 <main+0x1180>)
 8001928:	f009 f865 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer11, "", sizeof(rx_buffer11));
 800192c:	2264      	movs	r2, #100	; 0x64
 800192e:	4930      	ldr	r1, [pc, #192]	; (80019f0 <main+0x118c>)
 8001930:	482d      	ldr	r0, [pc, #180]	; (80019e8 <main+0x1184>)
 8001932:	f009 f860 	bl	800a9f6 <strncpy>
        strncpy(uart_tx_buffer, "", sizeof(uart_tx_buffer));
 8001936:	2264      	movs	r2, #100	; 0x64
 8001938:	492d      	ldr	r1, [pc, #180]	; (80019f0 <main+0x118c>)
 800193a:	4834      	ldr	r0, [pc, #208]	; (8001a0c <main+0x11a8>)
 800193c:	f009 f85b 	bl	800a9f6 <strncpy>
        strncpy(buffer8, "", sizeof(buffer8));
 8001940:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001944:	2264      	movs	r2, #100	; 0x64
 8001946:	492a      	ldr	r1, [pc, #168]	; (80019f0 <main+0x118c>)
 8001948:	4618      	mov	r0, r3
 800194a:	f009 f854 	bl	800a9f6 <strncpy>
        strncpy(buffer7, "", sizeof(buffer7));
 800194e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001952:	2264      	movs	r2, #100	; 0x64
 8001954:	4926      	ldr	r1, [pc, #152]	; (80019f0 <main+0x118c>)
 8001956:	4618      	mov	r0, r3
 8001958:	f009 f84d 	bl	800a9f6 <strncpy>
        strncpy(uart_tx_buffer, "", sizeof(uart_tx_buffer));
 800195c:	2264      	movs	r2, #100	; 0x64
 800195e:	4924      	ldr	r1, [pc, #144]	; (80019f0 <main+0x118c>)
 8001960:	482a      	ldr	r0, [pc, #168]	; (8001a0c <main+0x11a8>)
 8001962:	f009 f848 	bl	800a9f6 <strncpy>
        strncpy(buffer1, "", sizeof(buffer1));
 8001966:	2264      	movs	r2, #100	; 0x64
 8001968:	4921      	ldr	r1, [pc, #132]	; (80019f0 <main+0x118c>)
 800196a:	4829      	ldr	r0, [pc, #164]	; (8001a10 <main+0x11ac>)
 800196c:	f009 f843 	bl	800a9f6 <strncpy>
        strncpy(buffer5, "", sizeof(buffer5));
 8001970:	463b      	mov	r3, r7
 8001972:	2264      	movs	r2, #100	; 0x64
 8001974:	491e      	ldr	r1, [pc, #120]	; (80019f0 <main+0x118c>)
 8001976:	4618      	mov	r0, r3
 8001978:	f009 f83d 	bl	800a9f6 <strncpy>
        strncpy(buffer6, "", sizeof(buffer6));
 800197c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001980:	2264      	movs	r2, #100	; 0x64
 8001982:	491b      	ldr	r1, [pc, #108]	; (80019f0 <main+0x118c>)
 8001984:	4618      	mov	r0, r3
 8001986:	f009 f836 	bl	800a9f6 <strncpy>
        strncpy(rx_buffer, "", sizeof(rx_buffer));
 800198a:	2264      	movs	r2, #100	; 0x64
 800198c:	4918      	ldr	r1, [pc, #96]	; (80019f0 <main+0x118c>)
 800198e:	481a      	ldr	r0, [pc, #104]	; (80019f8 <main+0x1194>)
 8001990:	f009 f831 	bl	800a9f6 <strncpy>
        strncpy(buffer8, "", sizeof(buffer8));
 8001994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001998:	2264      	movs	r2, #100	; 0x64
 800199a:	4915      	ldr	r1, [pc, #84]	; (80019f0 <main+0x118c>)
 800199c:	4618      	mov	r0, r3
 800199e:	f009 f82a 	bl	800a9f6 <strncpy>
        strncpy(buffer7, "", sizeof(buffer7));
 80019a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80019a6:	2264      	movs	r2, #100	; 0x64
 80019a8:	4911      	ldr	r1, [pc, #68]	; (80019f0 <main+0x118c>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f009 f823 	bl	800a9f6 <strncpy>
        strncpy(buffer4, "", sizeof(buffer4));
 80019b0:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80019b4:	2264      	movs	r2, #100	; 0x64
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <main+0x118c>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f009 f81c 	bl	800a9f6 <strncpy>
        strncpy(buffer10, "", sizeof(buffer10));
 80019be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019c2:	2264      	movs	r2, #100	; 0x64
 80019c4:	490a      	ldr	r1, [pc, #40]	; (80019f0 <main+0x118c>)
 80019c6:	4618      	mov	r0, r3
 80019c8:	f009 f815 	bl	800a9f6 <strncpy>
    i=0;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <main+0x11b0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
    MX_USB_HOST_Process();
 80019d2:	f7fe bf66 	b.w	80008a2 <main+0x3e>
 80019d6:	bf00      	nop
 80019d8:	200001f0 	.word	0x200001f0
 80019dc:	0800b228 	.word	0x0800b228
 80019e0:	200001ac 	.word	0x200001ac
 80019e4:	20000518 	.word	0x20000518
 80019e8:	2000057c 	.word	0x2000057c
 80019ec:	0800b230 	.word	0x0800b230
 80019f0:	0800b13c 	.word	0x0800b13c
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000324 	.word	0x20000324
 80019fc:	20000388 	.word	0x20000388
 8001a00:	20000450 	.word	0x20000450
 8001a04:	200003ec 	.word	0x200003ec
 8001a08:	200004b4 	.word	0x200004b4
 8001a0c:	2000025c 	.word	0x2000025c
 8001a10:	200002c0 	.word	0x200002c0
 8001a14:	200005e4 	.word	0x200005e4

08001a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b094      	sub	sp, #80	; 0x50
 8001a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	2230      	movs	r2, #48	; 0x30
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f008 febe 	bl	800a7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <SystemClock_Config+0xcc>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <SystemClock_Config+0xcc>)
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <SystemClock_Config+0xcc>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <SystemClock_Config+0xd0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a64:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <SystemClock_Config+0xd0>)
 8001a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <SystemClock_Config+0xd0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a82:	2302      	movs	r3, #2
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a90:	23a8      	movs	r3, #168	; 0xa8
 8001a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a94:	2304      	movs	r3, #4
 8001a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a98:	2307      	movs	r3, #7
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fb8b 	bl	80051bc <HAL_RCC_OscConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001aac:	f000 f976 	bl	8001d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2102      	movs	r1, #2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fded 	bl	80056ac <HAL_RCC_ClockConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ad8:	f000 f960 	bl	8001d9c <Error_Handler>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3750      	adds	r7, #80	; 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000

08001aec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b00:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <MX_ADC1_Init+0xa0>)
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b4e:	f000 fbbb 	bl	80022c8 <HAL_ADC_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b58:	f000 f920 	bl	8001d9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_ADC1_Init+0x98>)
 8001b6e:	f000 fd6f 	bl	8002650 <HAL_ADC_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b78:	f000 f910 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000110 	.word	0x20000110
 8001b88:	40012000 	.word	0x40012000
 8001b8c:	0f000001 	.word	0x0f000001

08001b90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <MX_I2C2_Init+0x54>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_I2C2_Init+0x58>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bce:	f002 fea9 	bl	8004924 <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 f8e0 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000158 	.word	0x20000158
 8001be4:	40005800 	.word	0x40005800
 8001be8:	000186a0 	.word	0x000186a0

08001bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART2_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c24:	f003 ff62 	bl	8005aec <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f000 f8b5 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200001ac 	.word	0x200001ac
 8001c3c:	40004400 	.word	0x40004400

08001c40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_USART6_UART_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c78:	f003 ff38 	bl	8005aec <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c82:	f000 f88b 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200001f0 	.word	0x200001f0
 8001c90:	40011400 	.word	0x40011400

08001c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a37      	ldr	r2, [pc, #220]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a30      	ldr	r2, [pc, #192]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <MX_GPIO_Init+0xfc>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001d20:	481c      	ldr	r0, [pc, #112]	; (8001d94 <MX_GPIO_Init+0x100>)
 8001d22:	f001 f9db 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001d26:	2200      	movs	r2, #0
 8001d28:	f24f 0120 	movw	r1, #61472	; 0xf020
 8001d2c:	481a      	ldr	r0, [pc, #104]	; (8001d98 <MX_GPIO_Init+0x104>)
 8001d2e:	f001 f9d5 	bl	80030dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001d32:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4812      	ldr	r0, [pc, #72]	; (8001d94 <MX_GPIO_Init+0x100>)
 8001d4c:	f001 f842 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8001d50:	2316      	movs	r3, #22
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480d      	ldr	r0, [pc, #52]	; (8001d98 <MX_GPIO_Init+0x104>)
 8001d64:	f001 f836 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001d68:	f24f 0320 	movw	r3, #61472	; 0xf020
 8001d6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_GPIO_Init+0x104>)
 8001d82:	f001 f827 	bl	8002dd4 <HAL_GPIO_Init>

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400

08001d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <Error_Handler+0x8>
	...

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <HAL_MspInit+0x4c>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_MspInit+0x4c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_ADC_MspInit+0x7c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d127      	bne.n	8001e6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e52:	2301      	movs	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e56:	2303      	movs	r3, #3
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_ADC_MspInit+0x84>)
 8001e66:	f000 ffb5 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40012000 	.word	0x40012000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a21      	ldr	r2, [pc, #132]	; (8001f24 <HAL_I2C_MspInit+0xa4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d13c      	bne.n	8001f1c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_I2C_MspInit+0xa8>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <HAL_I2C_MspInit+0xa8>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_I2C_MspInit+0xa8>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec4:	2312      	movs	r3, #18
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <HAL_I2C_MspInit+0xac>)
 8001edc:	f000 ff7a 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee4:	2312      	movs	r3, #18
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001ef0:	2309      	movs	r3, #9
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480c      	ldr	r0, [pc, #48]	; (8001f2c <HAL_I2C_MspInit+0xac>)
 8001efc:	f000 ff6a 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_I2C_MspInit+0xa8>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_I2C_MspInit+0xa8>)
 8001f0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_I2C_MspInit+0xa8>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40005800 	.word	0x40005800
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020400 	.word	0x40020400

08001f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a36      	ldr	r2, [pc, #216]	; (8002028 <HAL_UART_MspInit+0xf8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d134      	bne.n	8001fbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4822      	ldr	r0, [pc, #136]	; (8002030 <HAL_UART_MspInit+0x100>)
 8001fa6:	f000 ff15 	bl	8002dd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	2026      	movs	r0, #38	; 0x26
 8001fb0:	f000 fe47 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fb4:	2026      	movs	r0, #38	; 0x26
 8001fb6:	f000 fe60 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fba:	e030      	b.n	800201e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_UART_MspInit+0x104>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12b      	bne.n	800201e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a17      	ldr	r2, [pc, #92]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001fd0:	f043 0320 	orr.w	r3, r3, #32
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_UART_MspInit+0xfc>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800200e:	2308      	movs	r3, #8
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	4807      	ldr	r0, [pc, #28]	; (8002038 <HAL_UART_MspInit+0x108>)
 800201a:	f000 fedb 	bl	8002dd4 <HAL_GPIO_Init>
}
 800201e:	bf00      	nop
 8002020:	3730      	adds	r7, #48	; 0x30
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40004400 	.word	0x40004400
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000
 8002034:	40011400 	.word	0x40011400
 8002038:	40020800 	.word	0x40020800

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 f8da 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <USART2_IRQHandler+0x10>)
 8002096:	f003 feab 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200001ac 	.word	0x200001ac

080020a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <OTG_FS_IRQHandler+0x10>)
 80020aa:	f001 fa9b 	bl	80035e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000a04 	.word	0x20000a04

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f008 fb24 	bl	800a734 <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20018000 	.word	0x20018000
 8002118:	00000400 	.word	0x00000400
 800211c:	200005e8 	.word	0x200005e8
 8002120:	20000d18 	.word	0x20000d18

08002124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <SystemInit+0x20>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <SystemInit+0x20>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack  		 /* set stack pointer */
 8002148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800214e:	490e      	ldr	r1, [pc, #56]	; (8002188 <LoopFillZerobss+0x1a>)
    ldr r2, =_sidata
 8002150:	4a0e      	ldr	r2, [pc, #56]	; (800218c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002154:	e002      	b.n	800215c <LoopCopyDataInit>

08002156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215a:	3304      	adds	r3, #4

0800215c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800215c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002160:	d3f9      	bcc.n	8002156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002164:	4c0b      	ldr	r4, [pc, #44]	; (8002194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002168:	e001      	b.n	800216e <LoopFillZerobss>

0800216a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800216c:	3204      	adds	r2, #4

0800216e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002170:	d3fb      	bcc.n	800216a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002172:	f7ff ffd7 	bl	8002124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002176:	f008 fae3 	bl	800a740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217a:	f7fe fb73 	bl	8000864 <main>
  bx  lr    
 800217e:	4770      	bx	lr
  ldr   sp, =_estack  		 /* set stack pointer */
 8002180:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002188:	200000f4 	.word	0x200000f4
    ldr r2, =_sidata
 800218c:	0800b6dc 	.word	0x0800b6dc
  ldr r2, =_sbss
 8002190:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8002194:	20000d18 	.word	0x20000d18

08002198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002198:	e7fe      	b.n	8002198 <ADC_IRQHandler>
	...

0800219c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <HAL_Init+0x40>)
 80021a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_Init+0x40>)
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_Init+0x40>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 fd31 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	200f      	movs	r0, #15
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fdea 	bl	8001da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fd49 	bl	8002c96 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f000 fd11 	bl	8002c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000064 	.word	0x20000064
 8002238:	2000006c 	.word	0x2000006c
 800223c:	20000068 	.word	0x20000068

08002240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000006c 	.word	0x2000006c
 8002264:	200005ec 	.word	0x200005ec

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200005ec 	.word	0x200005ec

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff ffee 	bl	8002268 <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffde 	bl	8002268 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000006c 	.word	0x2000006c

080022c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e033      	b.n	8002346 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fd86 	bl	8001df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800230e:	f023 0302 	bic.w	r3, r3, #2
 8002312:	f043 0202 	orr.w	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 faba 	bl	8002894 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
 8002336:	e001      	b.n	800233c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_ADC_Start+0x1a>
 8002366:	2302      	movs	r3, #2
 8002368:	e097      	b.n	800249a <HAL_ADC_Start+0x14a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d018      	beq.n	80023b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002390:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <HAL_ADC_Start+0x158>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a45      	ldr	r2, [pc, #276]	; (80024ac <HAL_ADC_Start+0x15c>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0c9a      	lsrs	r2, r3, #18
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023a4:	e002      	b.n	80023ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f9      	bne.n	80023a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d15f      	bne.n	8002480 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fe:	d106      	bne.n	800240e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f023 0206 	bic.w	r2, r3, #6
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	645a      	str	r2, [r3, #68]	; 0x44
 800240c:	e002      	b.n	8002414 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_ADC_Start+0x160>)
 800241e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002428:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d129      	bne.n	8002498 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	e020      	b.n	8002498 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_ADC_Start+0x164>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d11b      	bne.n	8002498 <HAL_ADC_Start+0x148>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d114      	bne.n	8002498 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	e00b      	b.n	8002498 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f043 0210 	orr.w	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000064 	.word	0x20000064
 80024ac:	431bde83 	.word	0x431bde83
 80024b0:	40012300 	.word	0x40012300
 80024b4:	40012000 	.word	0x40012000

080024b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_Stop+0x16>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e021      	b.n	8002512 <HAL_ADC_Stop+0x5a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253a:	d113      	bne.n	8002564 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254a:	d10b      	bne.n	8002564 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e063      	b.n	800262c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002564:	f7ff fe80 	bl	8002268 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800256a:	e021      	b.n	80025b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d01d      	beq.n	80025b0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_ADC_PollForConversion+0x6c>
 800257a:	f7ff fe75 	bl	8002268 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d212      	bcs.n	80025b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d00b      	beq.n	80025b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f043 0204 	orr.w	r2, r3, #4
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e03d      	b.n	800262c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d1d6      	bne.n	800256c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f06f 0212 	mvn.w	r2, #18
 80025c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d123      	bne.n	800262a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11f      	bne.n	800262a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002602:	2b00      	cmp	r3, #0
 8002604:	d111      	bne.n	800262a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1c>
 8002668:	2302      	movs	r3, #2
 800266a:	e105      	b.n	8002878 <HAL_ADC_ConfigChannel+0x228>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b09      	cmp	r3, #9
 800267a:	d925      	bls.n	80026c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68d9      	ldr	r1, [r3, #12]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	3b1e      	subs	r3, #30
 8002692:	2207      	movs	r2, #7
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43da      	mvns	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	400a      	ands	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68d9      	ldr	r1, [r3, #12]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	4603      	mov	r3, r0
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4403      	add	r3, r0
 80026ba:	3b1e      	subs	r3, #30
 80026bc:	409a      	lsls	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	e022      	b.n	800270e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	2207      	movs	r2, #7
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	400a      	ands	r2, r1
 80026ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4403      	add	r3, r0
 8002704:	409a      	lsls	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d824      	bhi.n	8002760 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b05      	subs	r3, #5
 8002728:	221f      	movs	r2, #31
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	400a      	ands	r2, r1
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3b05      	subs	r3, #5
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
 800275e:	e04c      	b.n	80027fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d824      	bhi.n	80027b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b23      	subs	r3, #35	; 0x23
 800277a:	221f      	movs	r2, #31
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43da      	mvns	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	400a      	ands	r2, r1
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4618      	mov	r0, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3b23      	subs	r3, #35	; 0x23
 80027a4:	fa00 f203 	lsl.w	r2, r0, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
 80027b0:	e023      	b.n	80027fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b41      	subs	r3, #65	; 0x41
 80027c4:	221f      	movs	r2, #31
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43da      	mvns	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	400a      	ands	r2, r1
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b41      	subs	r3, #65	; 0x41
 80027ee:	fa00 f203 	lsl.w	r2, r0, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_ADC_ConfigChannel+0x234>)
 80027fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a21      	ldr	r2, [pc, #132]	; (8002888 <HAL_ADC_ConfigChannel+0x238>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d109      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1cc>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b12      	cmp	r3, #18
 800280e:	d105      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_ADC_ConfigChannel+0x238>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d123      	bne.n	800286e <HAL_ADC_ConfigChannel+0x21e>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b10      	cmp	r3, #16
 800282c:	d003      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x1e6>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b11      	cmp	r3, #17
 8002834:	d11b      	bne.n	800286e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b10      	cmp	r3, #16
 8002848:	d111      	bne.n	800286e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_ADC_ConfigChannel+0x23c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_ADC_ConfigChannel+0x240>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	0c9a      	lsrs	r2, r3, #18
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002860:	e002      	b.n	8002868 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3b01      	subs	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f9      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40012300 	.word	0x40012300
 8002888:	40012000 	.word	0x40012000
 800288c:	20000064 	.word	0x20000064
 8002890:	431bde83 	.word	0x431bde83

08002894 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289c:	4b79      	ldr	r3, [pc, #484]	; (8002a84 <ADC_Init+0x1f0>)
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	021a      	lsls	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <ADC_Init+0x1f4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800293a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800295c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e00f      	b.n	8002992 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002990:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0202 	bic.w	r2, r2, #2
 80029a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e1b      	ldrb	r3, [r3, #24]
 80029ac:	005a      	lsls	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	3b01      	subs	r3, #1
 80029ec:	035a      	lsls	r2, r3, #13
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	e007      	b.n	8002a08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	051a      	lsls	r2, r3, #20
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a4a:	025a      	lsls	r2, r3, #9
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	029a      	lsls	r2, r3, #10
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40012300 	.word	0x40012300
 8002a88:	0f000001 	.word	0x0f000001

08002a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0b      	blt.n	8002b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4907      	ldr	r1, [pc, #28]	; (8002b28 <__NVIC_EnableIRQ+0x38>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf8:	d301      	bcc.n	8002bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00f      	b.n	8002c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <SysTick_Config+0x40>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c06:	210f      	movs	r1, #15
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	f7ff ff8e 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <SysTick_Config+0x40>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <SysTick_Config+0x40>)
 8002c18:	2207      	movs	r2, #7
 8002c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000e010 	.word	0xe000e010

08002c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff29 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c54:	f7ff ff3e 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f7ff ff8e 	bl	8002b80 <NVIC_EncodePriority>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff5d 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff31 	bl	8002af0 <__NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffa2 	bl	8002be8 <SysTick_Config>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff fad4 	bl	8002268 <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d008      	beq.n	8002ce0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e052      	b.n	8002d86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0216 	bic.w	r2, r2, #22
 8002cee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cfe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d103      	bne.n	8002d10 <HAL_DMA_Abort+0x62>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0208 	bic.w	r2, r2, #8
 8002d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d30:	e013      	b.n	8002d5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d32:	f7ff fa99 	bl	8002268 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d90c      	bls.n	8002d5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e015      	b.n	8002d86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e4      	bne.n	8002d32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	223f      	movs	r2, #63	; 0x3f
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d004      	beq.n	8002dac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e00c      	b.n	8002dc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2205      	movs	r2, #5
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e159      	b.n	80030a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 8148 	bne.w	800309e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d005      	beq.n	8002e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d130      	bne.n	8002e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 0201 	and.w	r2, r3, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d017      	beq.n	8002ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d123      	bne.n	8002f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	08da      	lsrs	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0203 	and.w	r2, r3, #3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a2 	beq.w	800309e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b57      	ldr	r3, [pc, #348]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a56      	ldr	r2, [pc, #344]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b54      	ldr	r3, [pc, #336]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f76:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_GPIO_Init+0x2ec>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a49      	ldr	r2, [pc, #292]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d019      	beq.n	8002fd6 <HAL_GPIO_Init+0x202>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a48      	ldr	r2, [pc, #288]	; (80030c8 <HAL_GPIO_Init+0x2f4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_GPIO_Init+0x1fe>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a47      	ldr	r2, [pc, #284]	; (80030cc <HAL_GPIO_Init+0x2f8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00d      	beq.n	8002fce <HAL_GPIO_Init+0x1fa>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a46      	ldr	r2, [pc, #280]	; (80030d0 <HAL_GPIO_Init+0x2fc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d007      	beq.n	8002fca <HAL_GPIO_Init+0x1f6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a45      	ldr	r2, [pc, #276]	; (80030d4 <HAL_GPIO_Init+0x300>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_GPIO_Init+0x1f2>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	e008      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e004      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	f002 0203 	and.w	r2, r2, #3
 8002fde:	0092      	lsls	r2, r2, #2
 8002fe0:	4093      	lsls	r3, r2
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe8:	4935      	ldr	r1, [pc, #212]	; (80030c0 <HAL_GPIO_Init+0x2ec>)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_GPIO_Init+0x304>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301a:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <HAL_GPIO_Init+0x304>)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003020:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_GPIO_Init+0x304>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003044:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <HAL_GPIO_Init+0x304>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_GPIO_Init+0x304>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306e:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <HAL_GPIO_Init+0x304>)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003074:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_GPIO_Init+0x304>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003098:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <HAL_GPIO_Init+0x304>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	f67f aea2 	bls.w	8002df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40013800 	.word	0x40013800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020c00 	.word	0x40020c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40013c00 	.word	0x40013c00

080030dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
 80030e8:	4613      	mov	r3, r2
 80030ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ec:	787b      	ldrb	r3, [r7, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f8:	e003      	b.n	8003102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	041a      	lsls	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	619a      	str	r2, [r3, #24]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800310e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003110:	b08f      	sub	sp, #60	; 0x3c
 8003112:	af0a      	add	r7, sp, #40	; 0x28
 8003114:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e054      	b.n	80031ca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f007 f884 	bl	800a248 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2203      	movs	r2, #3
 8003144:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f003 fdec 	bl	8006d3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	687e      	ldr	r6, [r7, #4]
 800316c:	466d      	mov	r5, sp
 800316e:	f106 0410 	add.w	r4, r6, #16
 8003172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800317e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003182:	1d33      	adds	r3, r6, #4
 8003184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003186:	6838      	ldr	r0, [r7, #0]
 8003188:	f003 fd66 	bl	8006c58 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f003 fde3 	bl	8006d5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	687e      	ldr	r6, [r7, #4]
 80031a0:	466d      	mov	r5, sp
 80031a2:	f106 0410 	add.w	r4, r6, #16
 80031a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b6:	1d33      	adds	r3, r6, #4
 80031b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	f003 ff6c 	bl	8007098 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031d2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b089      	sub	sp, #36	; 0x24
 80031d6:	af04      	add	r7, sp, #16
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	4608      	mov	r0, r1
 80031dc:	4611      	mov	r1, r2
 80031de:	461a      	mov	r2, r3
 80031e0:	4603      	mov	r3, r0
 80031e2:	70fb      	strb	r3, [r7, #3]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70bb      	strb	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_HCD_HC_Init+0x28>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e076      	b.n	80032e8 <HAL_HCD_HC_Init+0x116>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	333d      	adds	r3, #61	; 0x3d
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3338      	adds	r3, #56	; 0x38
 8003222:	787a      	ldrb	r2, [r7, #1]
 8003224:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3340      	adds	r3, #64	; 0x40
 8003234:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003236:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3339      	adds	r3, #57	; 0x39
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	333f      	adds	r3, #63	; 0x3f
 8003258:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800325c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	78ba      	ldrb	r2, [r7, #2]
 8003262:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003266:	b2d0      	uxtb	r0, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	333a      	adds	r3, #58	; 0x3a
 8003274:	4602      	mov	r2, r0
 8003276:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003278:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800327c:	2b00      	cmp	r3, #0
 800327e:	da09      	bge.n	8003294 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	333b      	adds	r3, #59	; 0x3b
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e008      	b.n	80032a6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	333b      	adds	r3, #59	; 0x3b
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	333c      	adds	r3, #60	; 0x3c
 80032b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032b8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	787c      	ldrb	r4, [r7, #1]
 80032c0:	78ba      	ldrb	r2, [r7, #2]
 80032c2:	78f9      	ldrb	r1, [r7, #3]
 80032c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032c6:	9302      	str	r3, [sp, #8]
 80032c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4623      	mov	r3, r4
 80032d6:	f004 f865 	bl	80073a4 <USB_HC_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}

080032f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_HCD_HC_Halt+0x1e>
 800330a:	2302      	movs	r3, #2
 800330c:	e00f      	b.n	800332e <HAL_HCD_HC_Halt+0x3e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f004 fab5 	bl	800788e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	70fb      	strb	r3, [r7, #3]
 800334a:	460b      	mov	r3, r1
 800334c:	70bb      	strb	r3, [r7, #2]
 800334e:	4613      	mov	r3, r2
 8003350:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	333b      	adds	r3, #59	; 0x3b
 8003360:	78ba      	ldrb	r2, [r7, #2]
 8003362:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	333f      	adds	r3, #63	; 0x3f
 8003372:	787a      	ldrb	r2, [r7, #1]
 8003374:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003376:	7c3b      	ldrb	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d112      	bne.n	80033a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3342      	adds	r3, #66	; 0x42
 800338a:	2203      	movs	r2, #3
 800338c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	333d      	adds	r3, #61	; 0x3d
 800339c:	7f3a      	ldrb	r2, [r7, #28]
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e008      	b.n	80033b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3342      	adds	r3, #66	; 0x42
 80033b0:	2202      	movs	r2, #2
 80033b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	f200 80c6 	bhi.w	8003548 <HAL_HCD_HC_SubmitRequest+0x210>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	08003535 	.word	0x08003535
 80033cc:	08003439 	.word	0x08003439
 80033d0:	080034b7 	.word	0x080034b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80033d4:	7c3b      	ldrb	r3, [r7, #16]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	f040 80b8 	bne.w	800354c <HAL_HCD_HC_SubmitRequest+0x214>
 80033dc:	78bb      	ldrb	r3, [r7, #2]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 80b4 	bne.w	800354c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80033e4:	8b3b      	ldrh	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3355      	adds	r3, #85	; 0x55
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3355      	adds	r3, #85	; 0x55
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3342      	adds	r3, #66	; 0x42
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003422:	e093      	b.n	800354c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3342      	adds	r3, #66	; 0x42
 8003432:	2202      	movs	r2, #2
 8003434:	701a      	strb	r2, [r3, #0]
      break;
 8003436:	e089      	b.n	800354c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003438:	78bb      	ldrb	r3, [r7, #2]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11d      	bne.n	800347a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3355      	adds	r3, #85	; 0x55
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	3342      	adds	r3, #66	; 0x42
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003464:	e073      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	3342      	adds	r3, #66	; 0x42
 8003474:	2202      	movs	r2, #2
 8003476:	701a      	strb	r2, [r3, #0]
      break;
 8003478:	e069      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3354      	adds	r3, #84	; 0x54
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3342      	adds	r3, #66	; 0x42
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
      break;
 80034a0:	e055      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3342      	adds	r3, #66	; 0x42
 80034b0:	2202      	movs	r2, #2
 80034b2:	701a      	strb	r2, [r3, #0]
      break;
 80034b4:	e04b      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034b6:	78bb      	ldrb	r3, [r7, #2]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11d      	bne.n	80034f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3355      	adds	r3, #85	; 0x55
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3342      	adds	r3, #66	; 0x42
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034e2:	e034      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3342      	adds	r3, #66	; 0x42
 80034f2:	2202      	movs	r2, #2
 80034f4:	701a      	strb	r2, [r3, #0]
      break;
 80034f6:	e02a      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3354      	adds	r3, #84	; 0x54
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3342      	adds	r3, #66	; 0x42
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
      break;
 800351e:	e016      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3342      	adds	r3, #66	; 0x42
 800352e:	2202      	movs	r2, #2
 8003530:	701a      	strb	r2, [r3, #0]
      break;
 8003532:	e00c      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3342      	adds	r3, #66	; 0x42
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
      break;
 8003546:	e002      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800354c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	212c      	movs	r1, #44	; 0x2c
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	4413      	add	r3, r2
 800355a:	3344      	adds	r3, #68	; 0x44
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	8b3a      	ldrh	r2, [r7, #24]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	202c      	movs	r0, #44	; 0x2c
 8003568:	fb00 f303 	mul.w	r3, r0, r3
 800356c:	440b      	add	r3, r1
 800356e:	334c      	adds	r3, #76	; 0x4c
 8003570:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	212c      	movs	r1, #44	; 0x2c
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	4413      	add	r3, r2
 800357e:	3360      	adds	r3, #96	; 0x60
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3350      	adds	r3, #80	; 0x50
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3339      	adds	r3, #57	; 0x39
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	3361      	adds	r3, #97	; 0x61
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	222c      	movs	r2, #44	; 0x2c
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	3338      	adds	r3, #56	; 0x38
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	18d1      	adds	r1, r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	f004 f808 	bl	80075e8 <USB_HC_StartXfer>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop

080035e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 fd09 	bl	8007012 <USB_GetMode>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	f040 80f6 	bne.w	80037f4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fced 	bl	8006fec <USB_ReadInterrupts>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80ec 	beq.w	80037f2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fce4 	bl	8006fec <USB_ReadInterrupts>
 8003624:	4603      	mov	r3, r0
 8003626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800362e:	d104      	bne.n	800363a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003638:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f003 fcd4 	bl	8006fec <USB_ReadInterrupts>
 8003644:	4603      	mov	r3, r0
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364e:	d104      	bne.n	800365a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003658:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f003 fcc4 	bl	8006fec <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800366a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366e:	d104      	bne.n	800367a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003678:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f003 fcb4 	bl	8006fec <USB_ReadInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b02      	cmp	r3, #2
 800368c:	d103      	bne.n	8003696 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2202      	movs	r2, #2
 8003694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f003 fca6 	bl	8006fec <USB_ReadInterrupts>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036aa:	d11c      	bne.n	80036e6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036c6:	2110      	movs	r1, #16
 80036c8:	6938      	ldr	r0, [r7, #16]
 80036ca:	f003 fb95 	bl	8006df8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036ce:	6938      	ldr	r0, [r7, #16]
 80036d0:	f003 fbc6 	bl	8006e60 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 fd9c 	bl	8007218 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f006 fe21 	bl	800a328 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 fc7e 	bl	8006fec <USB_ReadInterrupts>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fa:	d102      	bne.n	8003702 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 f89e 	bl	800483e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f003 fc70 	bl	8006fec <USB_ReadInterrupts>
 800370c:	4603      	mov	r3, r0
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b08      	cmp	r3, #8
 8003714:	d106      	bne.n	8003724 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f006 fdea 	bl	800a2f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2208      	movs	r2, #8
 8003722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 fc5f 	bl	8006fec <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d101      	bne.n	800373c <HAL_HCD_IRQHandler+0x158>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_HCD_IRQHandler+0x15a>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d012      	beq.n	8003768 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0210 	bic.w	r2, r2, #16
 8003750:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 ffa1 	bl	800469a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0210 	orr.w	r2, r2, #16
 8003766:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f003 fc3d 	bl	8006fec <USB_ReadInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800377c:	d13a      	bne.n	80037f4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f004 f872 	bl	800786c <USB_HC_ReadInterrupt>
 8003788:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e025      	b.n	80037dc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d018      	beq.n	80037d6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d106      	bne.n	80037ca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	4619      	mov	r1, r3
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f8ab 	bl	800391e <HCD_HC_IN_IRQHandler>
 80037c8:	e005      	b.n	80037d6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fbf9 	bl	8003fc8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	3301      	adds	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3d4      	bcc.n	8003790 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ee:	615a      	str	r2, [r3, #20]
 80037f0:	e000      	b.n	80037f4 <HAL_HCD_IRQHandler+0x210>
      return;
 80037f2:	bf00      	nop
    }
  }
}
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_HCD_Start+0x16>
 800380c:	2302      	movs	r3, #2
 800380e:	e013      	b.n	8003838 <HAL_HCD_Start+0x3e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2101      	movs	r1, #1
 800381e:	4618      	mov	r0, r3
 8003820:	f003 fd5e 	bl	80072e0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f003 fa76 	bl	8006d1a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_HCD_Stop+0x16>
 8003852:	2302      	movs	r3, #2
 8003854:	e00d      	b.n	8003872 <HAL_HCD_Stop+0x32>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f004 f94c 	bl	8007b00 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fd00 	bl	800728c <USB_ResetPort>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3360      	adds	r3, #96	; 0x60
 80038b0:	781b      	ldrb	r3, [r3, #0]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3350      	adds	r3, #80	; 0x50
 80038d8:	681b      	ldr	r3, [r3, #0]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f003 fd44 	bl	8007380 <USB_GetCurrentFrame>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f003 fd1f 	bl	8007352 <USB_GetHostSpeed>
 8003914:	4603      	mov	r3, r0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d11a      	bne.n	8003984 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	461a      	mov	r2, r3
 800395c:	2304      	movs	r3, #4
 800395e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3361      	adds	r3, #97	; 0x61
 800396e:	2206      	movs	r2, #6
 8003970:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f003 ff86 	bl	800788e <USB_HC_Halt>
 8003982:	e0af      	b.n	8003ae4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399a:	d11b      	bne.n	80039d4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	461a      	mov	r2, r3
 80039aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3361      	adds	r3, #97	; 0x61
 80039be:	2207      	movs	r2, #7
 80039c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 ff5e 	bl	800788e <USB_HC_Halt>
 80039d2:	e087      	b.n	8003ae4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d109      	bne.n	80039fe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2320      	movs	r3, #32
 80039fa:	6093      	str	r3, [r2, #8]
 80039fc:	e072      	b.n	8003ae4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d11a      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a20:	461a      	mov	r2, r3
 8003a22:	2308      	movs	r3, #8
 8003a24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3361      	adds	r3, #97	; 0x61
 8003a34:	2205      	movs	r2, #5
 8003a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 ff23 	bl	800788e <USB_HC_Halt>
 8003a48:	e04c      	b.n	8003ae4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d11b      	bne.n	8003a9a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	212c      	movs	r1, #44	; 0x2c
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	3361      	adds	r3, #97	; 0x61
 8003a84:	2208      	movs	r2, #8
 8003a86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fefb 	bl	800788e <USB_HC_Halt>
 8003a98:	e024      	b.n	8003ae4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aac:	2b80      	cmp	r3, #128	; 0x80
 8003aae:	d119      	bne.n	8003ae4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	461a      	mov	r2, r3
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	212c      	movs	r1, #44	; 0x2c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3361      	adds	r3, #97	; 0x61
 8003ad0:	2206      	movs	r2, #6
 8003ad2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 fed5 	bl	800788e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afa:	d112      	bne.n	8003b22 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f003 fec1 	bl	800788e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b1e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003b20:	e24e      	b.n	8003fc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f040 80df 	bne.w	8003cf8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d019      	beq.n	8003b76 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3348      	adds	r3, #72	; 0x48
 8003b50:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	0159      	lsls	r1, r3, #5
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	440b      	add	r3, r1
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b64:	1ad2      	subs	r2, r2, r3
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	202c      	movs	r0, #44	; 0x2c
 8003b6c:	fb00 f303 	mul.w	r3, r0, r3
 8003b70:	440b      	add	r3, r1
 8003b72:	3350      	adds	r3, #80	; 0x50
 8003b74:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	3361      	adds	r3, #97	; 0x61
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	335c      	adds	r3, #92	; 0x5c
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2301      	movs	r3, #1
 8003baa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	333f      	adds	r3, #63	; 0x3f
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	333f      	adds	r3, #63	; 0x3f
 8003bce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d111      	bne.n	8003bf8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f003 fe55 	bl	800788e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2310      	movs	r3, #16
 8003bf4:	6093      	str	r3, [r2, #8]
 8003bf6:	e03a      	b.n	8003c6e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	212c      	movs	r1, #44	; 0x2c
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	333f      	adds	r3, #63	; 0x3f
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d009      	beq.n	8003c20 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	333f      	adds	r3, #63	; 0x3f
 8003c1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d126      	bne.n	8003c6e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c3e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3360      	adds	r3, #96	; 0x60
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	b2d9      	uxtb	r1, r3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	202c      	movs	r0, #44	; 0x2c
 8003c5c:	fb00 f303 	mul.w	r3, r0, r3
 8003c60:	4413      	add	r3, r2
 8003c62:	3360      	adds	r3, #96	; 0x60
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f006 fb6b 	bl	800a344 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d12b      	bne.n	8003cce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	212c      	movs	r1, #44	; 0x2c
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	3348      	adds	r3, #72	; 0x48
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	202c      	movs	r0, #44	; 0x2c
 8003c8c:	fb00 f202 	mul.w	r2, r0, r2
 8003c90:	440a      	add	r2, r1
 8003c92:	3240      	adds	r2, #64	; 0x40
 8003c94:	8812      	ldrh	r2, [r2, #0]
 8003c96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 818e 	beq.w	8003fc0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3354      	adds	r3, #84	; 0x54
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	f083 0301 	eor.w	r3, r3, #1
 8003cb8:	b2d8      	uxtb	r0, r3
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3354      	adds	r3, #84	; 0x54
 8003cc8:	4602      	mov	r2, r0
 8003cca:	701a      	strb	r2, [r3, #0]
}
 8003ccc:	e178      	b.n	8003fc0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	3354      	adds	r3, #84	; 0x54
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	f083 0301 	eor.w	r3, r3, #1
 8003ce2:	b2d8      	uxtb	r0, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	3354      	adds	r3, #84	; 0x54
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	701a      	strb	r2, [r3, #0]
}
 8003cf6:	e163      	b.n	8003fc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	f040 80f6 	bne.w	8003efc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3361      	adds	r3, #97	; 0x61
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d109      	bne.n	8003d38 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	212c      	movs	r1, #44	; 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	3360      	adds	r3, #96	; 0x60
 8003d32:	2201      	movs	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e0c9      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	212c      	movs	r1, #44	; 0x2c
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	3361      	adds	r3, #97	; 0x61
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b05      	cmp	r3, #5
 8003d4a:	d109      	bne.n	8003d60 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	3360      	adds	r3, #96	; 0x60
 8003d5a:	2205      	movs	r2, #5
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e0b5      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3361      	adds	r3, #97	; 0x61
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b06      	cmp	r3, #6
 8003d72:	d009      	beq.n	8003d88 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3361      	adds	r3, #97	; 0x61
 8003d82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d150      	bne.n	8003e2a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	335c      	adds	r3, #92	; 0x5c
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	202c      	movs	r0, #44	; 0x2c
 8003da0:	fb00 f303 	mul.w	r3, r0, r3
 8003da4:	440b      	add	r3, r1
 8003da6:	335c      	adds	r3, #92	; 0x5c
 8003da8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	335c      	adds	r3, #92	; 0x5c
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d912      	bls.n	8003de4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	335c      	adds	r3, #92	; 0x5c
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	3360      	adds	r3, #96	; 0x60
 8003dde:	2204      	movs	r2, #4
 8003de0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003de2:	e073      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	212c      	movs	r1, #44	; 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	3360      	adds	r3, #96	; 0x60
 8003df2:	2202      	movs	r2, #2
 8003df4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e0c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e14:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e22:	461a      	mov	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e28:	e050      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	212c      	movs	r1, #44	; 0x2c
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	3361      	adds	r3, #97	; 0x61
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d122      	bne.n	8003e84 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	3360      	adds	r3, #96	; 0x60
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e66:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e6e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e023      	b.n	8003ecc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	212c      	movs	r1, #44	; 0x2c
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	3361      	adds	r3, #97	; 0x61
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b07      	cmp	r3, #7
 8003e96:	d119      	bne.n	8003ecc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	335c      	adds	r3, #92	; 0x5c
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	202c      	movs	r0, #44	; 0x2c
 8003eb0:	fb00 f303 	mul.w	r3, r0, r3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	335c      	adds	r3, #92	; 0x5c
 8003eb8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3360      	adds	r3, #96	; 0x60
 8003ec8:	2204      	movs	r2, #4
 8003eca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2302      	movs	r3, #2
 8003edc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	b2d9      	uxtb	r1, r3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	202c      	movs	r0, #44	; 0x2c
 8003ee8:	fb00 f303 	mul.w	r3, r0, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3360      	adds	r3, #96	; 0x60
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f006 fa25 	bl	800a344 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003efa:	e061      	b.n	8003fc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d156      	bne.n	8003fc0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	333f      	adds	r3, #63	; 0x3f
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d111      	bne.n	8003f4a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	335c      	adds	r3, #92	; 0x5c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f003 fca3 	bl	800788e <USB_HC_Halt>
 8003f48:	e031      	b.n	8003fae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	333f      	adds	r3, #63	; 0x3f
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	212c      	movs	r1, #44	; 0x2c
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	333f      	adds	r3, #63	; 0x3f
 8003f6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d11d      	bne.n	8003fae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	212c      	movs	r1, #44	; 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	335c      	adds	r3, #92	; 0x5c
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d110      	bne.n	8003fae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3361      	adds	r3, #97	; 0x61
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f003 fc70 	bl	800788e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	6093      	str	r3, [r2, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d11a      	bne.n	800402e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004004:	461a      	mov	r2, r3
 8004006:	2304      	movs	r3, #4
 8004008:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	3361      	adds	r3, #97	; 0x61
 8004018:	2206      	movs	r2, #6
 800401a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f003 fc31 	bl	800788e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800402c:	e331      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b20      	cmp	r3, #32
 8004042:	d12e      	bne.n	80040a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	461a      	mov	r2, r3
 8004052:	2320      	movs	r3, #32
 8004054:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	333d      	adds	r3, #61	; 0x3d
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	f040 8313 	bne.w	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	333d      	adds	r3, #61	; 0x3d
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	3360      	adds	r3, #96	; 0x60
 800408c:	2202      	movs	r2, #2
 800408e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f003 fbf7 	bl	800788e <USB_HC_Halt>
}
 80040a0:	e2f7      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b8:	d112      	bne.n	80040e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c6:	461a      	mov	r2, r3
 80040c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f003 fbd8 	bl	800788e <USB_HC_Halt>
}
 80040de:	e2d8      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d140      	bne.n	8004178 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	335c      	adds	r3, #92	; 0x5c
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d111      	bne.n	8004142 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	212c      	movs	r1, #44	; 0x2c
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	333d      	adds	r3, #61	; 0x3d
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	461a      	mov	r2, r3
 800413e:	2340      	movs	r3, #64	; 0x40
 8004140:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4413      	add	r3, r2
 800414a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414e:	461a      	mov	r2, r3
 8004150:	2301      	movs	r3, #1
 8004152:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	212c      	movs	r1, #44	; 0x2c
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	4413      	add	r3, r2
 8004160:	3361      	adds	r3, #97	; 0x61
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f003 fb8c 	bl	800788e <USB_HC_Halt>
}
 8004176:	e28c      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	4413      	add	r3, r2
 8004180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d12c      	bne.n	80041e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	212c      	movs	r1, #44	; 0x2c
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	3361      	adds	r3, #97	; 0x61
 800419c:	2204      	movs	r2, #4
 800419e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	212c      	movs	r1, #44	; 0x2c
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	333d      	adds	r3, #61	; 0x3d
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	335c      	adds	r3, #92	; 0x5c
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f003 fb5d 	bl	800788e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	461a      	mov	r2, r3
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	6093      	str	r3, [r2, #8]
}
 80041e6:	e254      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11a      	bne.n	8004234 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	461a      	mov	r2, r3
 800420c:	2308      	movs	r3, #8
 800420e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	3361      	adds	r3, #97	; 0x61
 800421e:	2205      	movs	r2, #5
 8004220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f003 fb2e 	bl	800788e <USB_HC_Halt>
}
 8004232:	e22e      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b10      	cmp	r3, #16
 8004248:	d140      	bne.n	80042cc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	335c      	adds	r3, #92	; 0x5c
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3361      	adds	r3, #97	; 0x61
 800426a:	2203      	movs	r2, #3
 800426c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	333d      	adds	r3, #61	; 0x3d
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d112      	bne.n	80042a8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	333c      	adds	r3, #60	; 0x3c
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d108      	bne.n	80042a8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	333d      	adds	r3, #61	; 0x3d
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	4611      	mov	r1, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f003 faeb 	bl	800788e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	461a      	mov	r2, r3
 80042c6:	2310      	movs	r3, #16
 80042c8:	6093      	str	r3, [r2, #8]
}
 80042ca:	e1e2      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b80      	cmp	r3, #128	; 0x80
 80042e0:	d164      	bne.n	80043ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d111      	bne.n	800430e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3361      	adds	r3, #97	; 0x61
 80042f8:	2206      	movs	r2, #6
 80042fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f003 fac1 	bl	800788e <USB_HC_Halt>
 800430c:	e044      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	335c      	adds	r3, #92	; 0x5c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	202c      	movs	r0, #44	; 0x2c
 8004326:	fb00 f303 	mul.w	r3, r0, r3
 800432a:	440b      	add	r3, r1
 800432c:	335c      	adds	r3, #92	; 0x5c
 800432e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	335c      	adds	r3, #92	; 0x5c
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d920      	bls.n	8004386 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	212c      	movs	r1, #44	; 0x2c
 800434a:	fb01 f303 	mul.w	r3, r1, r3
 800434e:	4413      	add	r3, r2
 8004350:	335c      	adds	r3, #92	; 0x5c
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	212c      	movs	r1, #44	; 0x2c
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	4413      	add	r3, r2
 8004362:	3360      	adds	r3, #96	; 0x60
 8004364:	2204      	movs	r2, #4
 8004366:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	b2d9      	uxtb	r1, r3
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	202c      	movs	r0, #44	; 0x2c
 8004372:	fb00 f303 	mul.w	r3, r0, r3
 8004376:	4413      	add	r3, r2
 8004378:	3360      	adds	r3, #96	; 0x60
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f005 ffe0 	bl	800a344 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004384:	e008      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	3360      	adds	r3, #96	; 0x60
 8004394:	2202      	movs	r2, #2
 8004396:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a4:	461a      	mov	r2, r3
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	6093      	str	r3, [r2, #8]
}
 80043aa:	e172      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d11b      	bne.n	80043fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	212c      	movs	r1, #44	; 0x2c
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	3361      	adds	r3, #97	; 0x61
 80043d2:	2208      	movs	r2, #8
 80043d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f003 fa54 	bl	800788e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f2:	461a      	mov	r2, r3
 80043f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f8:	6093      	str	r3, [r2, #8]
}
 80043fa:	e14a      	b.n	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	4413      	add	r3, r2
 8004404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	f040 813f 	bne.w	8004692 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3361      	adds	r3, #97	; 0x61
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d17d      	bne.n	8004524 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3360      	adds	r3, #96	; 0x60
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	212c      	movs	r1, #44	; 0x2c
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	333f      	adds	r3, #63	; 0x3f
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d00a      	beq.n	8004464 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	333f      	adds	r3, #63	; 0x3f
 800445c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800445e:	2b03      	cmp	r3, #3
 8004460:	f040 8100 	bne.w	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d113      	bne.n	8004494 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3355      	adds	r3, #85	; 0x55
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	f083 0301 	eor.w	r3, r3, #1
 8004480:	b2d8      	uxtb	r0, r3
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	212c      	movs	r1, #44	; 0x2c
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	4413      	add	r3, r2
 800448e:	3355      	adds	r3, #85	; 0x55
 8004490:	4602      	mov	r2, r0
 8004492:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b01      	cmp	r3, #1
 800449a:	f040 80e3 	bne.w	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	212c      	movs	r1, #44	; 0x2c
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	334c      	adds	r3, #76	; 0x4c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80d8 	beq.w	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	334c      	adds	r3, #76	; 0x4c
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	202c      	movs	r0, #44	; 0x2c
 80044ca:	fb00 f202 	mul.w	r2, r0, r2
 80044ce:	440a      	add	r2, r1
 80044d0:	3240      	adds	r2, #64	; 0x40
 80044d2:	8812      	ldrh	r2, [r2, #0]
 80044d4:	4413      	add	r3, r2
 80044d6:	3b01      	subs	r3, #1
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	202c      	movs	r0, #44	; 0x2c
 80044de:	fb00 f202 	mul.w	r2, r0, r2
 80044e2:	440a      	add	r2, r1
 80044e4:	3240      	adds	r2, #64	; 0x40
 80044e6:	8812      	ldrh	r2, [r2, #0]
 80044e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80b5 	beq.w	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	3355      	adds	r3, #85	; 0x55
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	f083 0301 	eor.w	r3, r3, #1
 800450e:	b2d8      	uxtb	r0, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	212c      	movs	r1, #44	; 0x2c
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4413      	add	r3, r2
 800451c:	3355      	adds	r3, #85	; 0x55
 800451e:	4602      	mov	r2, r0
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e09f      	b.n	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	212c      	movs	r1, #44	; 0x2c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	3361      	adds	r3, #97	; 0x61
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d109      	bne.n	800454c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3360      	adds	r3, #96	; 0x60
 8004546:	2202      	movs	r2, #2
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e08b      	b.n	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	3361      	adds	r3, #97	; 0x61
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d109      	bne.n	8004574 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3360      	adds	r3, #96	; 0x60
 800456e:	2202      	movs	r2, #2
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e077      	b.n	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3361      	adds	r3, #97	; 0x61
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b05      	cmp	r3, #5
 8004586:	d109      	bne.n	800459c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	3360      	adds	r3, #96	; 0x60
 8004596:	2205      	movs	r2, #5
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e063      	b.n	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3361      	adds	r3, #97	; 0x61
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b06      	cmp	r3, #6
 80045ae:	d009      	beq.n	80045c4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	212c      	movs	r1, #44	; 0x2c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	3361      	adds	r3, #97	; 0x61
 80045be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d14f      	bne.n	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	335c      	adds	r3, #92	; 0x5c
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	202c      	movs	r0, #44	; 0x2c
 80045dc:	fb00 f303 	mul.w	r3, r0, r3
 80045e0:	440b      	add	r3, r1
 80045e2:	335c      	adds	r3, #92	; 0x5c
 80045e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	335c      	adds	r3, #92	; 0x5c
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d912      	bls.n	8004620 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	212c      	movs	r1, #44	; 0x2c
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	335c      	adds	r3, #92	; 0x5c
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	212c      	movs	r1, #44	; 0x2c
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	4413      	add	r3, r2
 8004618:	3360      	adds	r3, #96	; 0x60
 800461a:	2204      	movs	r2, #4
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e021      	b.n	8004664 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	212c      	movs	r1, #44	; 0x2c
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	4413      	add	r3, r2
 800462c:	3360      	adds	r3, #96	; 0x60
 800462e:	2202      	movs	r2, #2
 8004630:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004648:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004650:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465e:	461a      	mov	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	4413      	add	r3, r2
 800466c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004670:	461a      	mov	r2, r3
 8004672:	2302      	movs	r3, #2
 8004674:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	b2d9      	uxtb	r1, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	202c      	movs	r0, #44	; 0x2c
 8004680:	fb00 f303 	mul.w	r3, r0, r3
 8004684:	4413      	add	r3, r2
 8004686:	3360      	adds	r3, #96	; 0x60
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f005 fe59 	bl	800a344 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004692:	bf00      	nop
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b08a      	sub	sp, #40	; 0x28
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	0c5b      	lsrs	r3, r3, #17
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d004      	beq.n	80046e0 <HCD_RXQLVL_IRQHandler+0x46>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	f000 80a9 	beq.w	8004830 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046de:	e0aa      	b.n	8004836 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a6 	beq.w	8004834 <HCD_RXQLVL_IRQHandler+0x19a>
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	3344      	adds	r3, #68	; 0x44
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 809b 	beq.w	8004834 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	3350      	adds	r3, #80	; 0x50
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	441a      	add	r2, r3
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	202c      	movs	r0, #44	; 0x2c
 8004718:	fb00 f303 	mul.w	r3, r0, r3
 800471c:	440b      	add	r3, r1
 800471e:	334c      	adds	r3, #76	; 0x4c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d87a      	bhi.n	800481c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	212c      	movs	r1, #44	; 0x2c
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	3344      	adds	r3, #68	; 0x44
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	b292      	uxth	r2, r2
 800473e:	4619      	mov	r1, r3
 8004740:	f002 fbfc 	bl	8006f3c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	3344      	adds	r3, #68	; 0x44
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	441a      	add	r2, r3
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	202c      	movs	r0, #44	; 0x2c
 800475e:	fb00 f303 	mul.w	r3, r0, r3
 8004762:	440b      	add	r3, r1
 8004764:	3344      	adds	r3, #68	; 0x44
 8004766:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3350      	adds	r3, #80	; 0x50
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	441a      	add	r2, r3
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	202c      	movs	r0, #44	; 0x2c
 8004782:	fb00 f303 	mul.w	r3, r0, r3
 8004786:	440b      	add	r3, r1
 8004788:	3350      	adds	r3, #80	; 0x50
 800478a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	0cdb      	lsrs	r3, r3, #19
 800479c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	212c      	movs	r1, #44	; 0x2c
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	3340      	adds	r3, #64	; 0x40
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d13c      	bne.n	8004834 <HCD_RXQLVL_IRQHandler+0x19a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d039      	beq.n	8004834 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047d6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047de:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	461a      	mov	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	212c      	movs	r1, #44	; 0x2c
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	3354      	adds	r3, #84	; 0x54
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f083 0301 	eor.w	r3, r3, #1
 8004806:	b2d8      	uxtb	r0, r3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	212c      	movs	r1, #44	; 0x2c
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	4413      	add	r3, r2
 8004814:	3354      	adds	r3, #84	; 0x54
 8004816:	4602      	mov	r2, r0
 8004818:	701a      	strb	r2, [r3, #0]
      break;
 800481a:	e00b      	b.n	8004834 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	212c      	movs	r1, #44	; 0x2c
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	4413      	add	r3, r2
 8004828:	3360      	adds	r3, #96	; 0x60
 800482a:	2204      	movs	r2, #4
 800482c:	701a      	strb	r2, [r3, #0]
      break;
 800482e:	e001      	b.n	8004834 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004834:	bf00      	nop
  }
}
 8004836:	bf00      	nop
 8004838:	3728      	adds	r7, #40	; 0x28
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800486a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d10b      	bne.n	800488e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d102      	bne.n	8004886 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f005 fd43 	bl	800a30c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f043 0302 	orr.w	r3, r3, #2
 800488c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b08      	cmp	r3, #8
 8004896:	d132      	bne.n	80048fe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f043 0308 	orr.w	r3, r3, #8
 800489e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d126      	bne.n	80048f8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d113      	bne.n	80048da <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80048b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048bc:	d106      	bne.n	80048cc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f002 fca7 	bl	8007218 <USB_InitFSLSPClkSel>
 80048ca:	e011      	b.n	80048f0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f002 fca0 	bl	8007218 <USB_InitFSLSPClkSel>
 80048d8:	e00a      	b.n	80048f0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d106      	bne.n	80048f0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e8:	461a      	mov	r2, r3
 80048ea:	f64e 2360 	movw	r3, #60000	; 0xea60
 80048ee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f005 fd35 	bl	800a360 <HAL_HCD_PortEnabled_Callback>
 80048f6:	e002      	b.n	80048fe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f005 fd3f 	bl	800a37c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b20      	cmp	r3, #32
 8004906:	d103      	bne.n	8004910 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f043 0320 	orr.w	r3, r3, #32
 800490e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004916:	461a      	mov	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e12b      	b.n	8004b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd fa98 	bl	8001e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2224      	movs	r2, #36	; 0x24
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004988:	f001 f888 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 800498c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4a81      	ldr	r2, [pc, #516]	; (8004b98 <HAL_I2C_Init+0x274>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d807      	bhi.n	80049a8 <HAL_I2C_Init+0x84>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a80      	ldr	r2, [pc, #512]	; (8004b9c <HAL_I2C_Init+0x278>)
 800499c:	4293      	cmp	r3, r2
 800499e:	bf94      	ite	ls
 80049a0:	2301      	movls	r3, #1
 80049a2:	2300      	movhi	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e006      	b.n	80049b6 <HAL_I2C_Init+0x92>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a7d      	ldr	r2, [pc, #500]	; (8004ba0 <HAL_I2C_Init+0x27c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	bf94      	ite	ls
 80049b0:	2301      	movls	r3, #1
 80049b2:	2300      	movhi	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0e7      	b.n	8004b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a78      	ldr	r2, [pc, #480]	; (8004ba4 <HAL_I2C_Init+0x280>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	0c9b      	lsrs	r3, r3, #18
 80049c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a6a      	ldr	r2, [pc, #424]	; (8004b98 <HAL_I2C_Init+0x274>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d802      	bhi.n	80049f8 <HAL_I2C_Init+0xd4>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	3301      	adds	r3, #1
 80049f6:	e009      	b.n	8004a0c <HAL_I2C_Init+0xe8>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	4a69      	ldr	r2, [pc, #420]	; (8004ba8 <HAL_I2C_Init+0x284>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	099b      	lsrs	r3, r3, #6
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	495c      	ldr	r1, [pc, #368]	; (8004b98 <HAL_I2C_Init+0x274>)
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	d819      	bhi.n	8004a60 <HAL_I2C_Init+0x13c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1e59      	subs	r1, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a3a:	1c59      	adds	r1, r3, #1
 8004a3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a40:	400b      	ands	r3, r1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_I2C_Init+0x138>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1e59      	subs	r1, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5a:	e051      	b.n	8004b00 <HAL_I2C_Init+0x1dc>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	e04f      	b.n	8004b00 <HAL_I2C_Init+0x1dc>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d111      	bne.n	8004a8c <HAL_I2C_Init+0x168>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1e58      	subs	r0, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	440b      	add	r3, r1
 8004a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e012      	b.n	8004ab2 <HAL_I2C_Init+0x18e>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1e58      	subs	r0, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	0099      	lsls	r1, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_I2C_Init+0x196>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e022      	b.n	8004b00 <HAL_I2C_Init+0x1dc>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_I2C_Init+0x1bc>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1e58      	subs	r0, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	460b      	mov	r3, r1
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	440b      	add	r3, r1
 8004ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ade:	e00f      	b.n	8004b00 <HAL_I2C_Init+0x1dc>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1e58      	subs	r0, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	0099      	lsls	r1, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	6809      	ldr	r1, [r1, #0]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6911      	ldr	r1, [r2, #16]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68d2      	ldr	r2, [r2, #12]
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695a      	ldr	r2, [r3, #20]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	000186a0 	.word	0x000186a0
 8004b9c:	001e847f 	.word	0x001e847f
 8004ba0:	003d08ff 	.word	0x003d08ff
 8004ba4:	431bde83 	.word	0x431bde83
 8004ba8:	10624dd3 	.word	0x10624dd3

08004bac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	460b      	mov	r3, r1
 8004bba:	817b      	strh	r3, [r7, #10]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bc0:	f7fd fb52 	bl	8002268 <HAL_GetTick>
 8004bc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	f040 80e0 	bne.w	8004d94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2319      	movs	r3, #25
 8004bda:	2201      	movs	r2, #1
 8004bdc:	4970      	ldr	r1, [pc, #448]	; (8004da0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f964 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
 8004bec:	e0d3      	b.n	8004d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_I2C_Master_Transmit+0x50>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e0cc      	b.n	8004d96 <HAL_I2C_Master_Transmit+0x1ea>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d007      	beq.n	8004c22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2221      	movs	r2, #33	; 0x21
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	893a      	ldrh	r2, [r7, #8]
 8004c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a50      	ldr	r2, [pc, #320]	; (8004da4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c64:	8979      	ldrh	r1, [r7, #10]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f89c 	bl	8004da8 <I2C_MasterRequestWrite>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e08d      	b.n	8004d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c90:	e066      	b.n	8004d60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f9de 	bl	8005058 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d107      	bne.n	8004cba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e06b      	b.n	8004d96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	781a      	ldrb	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d11b      	bne.n	8004d34 <HAL_I2C_Master_Transmit+0x188>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d017      	beq.n	8004d34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	6a39      	ldr	r1, [r7, #32]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f9ce 	bl	80050da <I2C_WaitOnBTFFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d107      	bne.n	8004d5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e01a      	b.n	8004d96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d194      	bne.n	8004c92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	00100002 	.word	0x00100002
 8004da4:	ffff0000 	.word	0xffff0000

08004da8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	460b      	mov	r3, r1
 8004db6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d006      	beq.n	8004dd2 <I2C_MasterRequestWrite+0x2a>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d003      	beq.n	8004dd2 <I2C_MasterRequestWrite+0x2a>
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dd0:	d108      	bne.n	8004de4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e00b      	b.n	8004dfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	2b12      	cmp	r3, #18
 8004dea:	d107      	bne.n	8004dfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f84f 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00d      	beq.n	8004e30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e22:	d103      	bne.n	8004e2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e035      	b.n	8004e9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e38:	d108      	bne.n	8004e4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e3a:	897b      	ldrh	r3, [r7, #10]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e48:	611a      	str	r2, [r3, #16]
 8004e4a:	e01b      	b.n	8004e84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e4c:	897b      	ldrh	r3, [r7, #10]
 8004e4e:	11db      	asrs	r3, r3, #7
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f003 0306 	and.w	r3, r3, #6
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f063 030f 	orn	r3, r3, #15
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	490e      	ldr	r1, [pc, #56]	; (8004ea4 <I2C_MasterRequestWrite+0xfc>)
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f875 	bl	8004f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e010      	b.n	8004e9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e7a:	897b      	ldrh	r3, [r7, #10]
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4907      	ldr	r1, [pc, #28]	; (8004ea8 <I2C_MasterRequestWrite+0x100>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f865 	bl	8004f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	00010008 	.word	0x00010008
 8004ea8:	00010002 	.word	0x00010002

08004eac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ebc:	e025      	b.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d021      	beq.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fd f9cf 	bl	8002268 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d116      	bne.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e023      	b.n	8004f52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d10d      	bne.n	8004f30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	43da      	mvns	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	e00c      	b.n	8004f4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	43da      	mvns	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bf0c      	ite	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	2300      	movne	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d0b6      	beq.n	8004ebe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f68:	e051      	b.n	800500e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d123      	bne.n	8004fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f043 0204 	orr.w	r2, r3, #4
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e046      	b.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d021      	beq.n	800500e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fca:	f7fd f94d 	bl	8002268 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d302      	bcc.n	8004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d116      	bne.n	800500e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f043 0220 	orr.w	r2, r3, #32
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e020      	b.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10c      	bne.n	8005032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	43da      	mvns	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4013      	ands	r3, r2
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf14      	ite	ne
 800502a:	2301      	movne	r3, #1
 800502c:	2300      	moveq	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	e00b      	b.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	43da      	mvns	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4013      	ands	r3, r2
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d18d      	bne.n	8004f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005064:	e02d      	b.n	80050c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f878 	bl	800515c <I2C_IsAcknowledgeFailed>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e02d      	b.n	80050d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d021      	beq.n	80050c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507e:	f7fd f8f3 	bl	8002268 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d116      	bne.n	80050c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e007      	b.n	80050d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	2b80      	cmp	r3, #128	; 0x80
 80050ce:	d1ca      	bne.n	8005066 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e6:	e02d      	b.n	8005144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f837 	bl	800515c <I2C_IsAcknowledgeFailed>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e02d      	b.n	8005154 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fe:	d021      	beq.n	8005144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005100:	f7fd f8b2 	bl	8002268 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	429a      	cmp	r2, r3
 800510e:	d302      	bcc.n	8005116 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d116      	bne.n	8005144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e007      	b.n	8005154 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b04      	cmp	r3, #4
 8005150:	d1ca      	bne.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	d11b      	bne.n	80051ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800517c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	f043 0204 	orr.w	r2, r3, #4
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e267      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d075      	beq.n	80052c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051da:	4b88      	ldr	r3, [pc, #544]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d00c      	beq.n	8005200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051e6:	4b85      	ldr	r3, [pc, #532]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d112      	bne.n	8005218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051f2:	4b82      	ldr	r3, [pc, #520]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051fe:	d10b      	bne.n	8005218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	4b7e      	ldr	r3, [pc, #504]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d05b      	beq.n	80052c4 <HAL_RCC_OscConfig+0x108>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d157      	bne.n	80052c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e242      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005220:	d106      	bne.n	8005230 <HAL_RCC_OscConfig+0x74>
 8005222:	4b76      	ldr	r3, [pc, #472]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a75      	ldr	r2, [pc, #468]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e01d      	b.n	800526c <HAL_RCC_OscConfig+0xb0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005238:	d10c      	bne.n	8005254 <HAL_RCC_OscConfig+0x98>
 800523a:	4b70      	ldr	r3, [pc, #448]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a6f      	ldr	r2, [pc, #444]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b6d      	ldr	r3, [pc, #436]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6c      	ldr	r2, [pc, #432]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e00b      	b.n	800526c <HAL_RCC_OscConfig+0xb0>
 8005254:	4b69      	ldr	r3, [pc, #420]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a68      	ldr	r2, [pc, #416]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 800525a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	4b66      	ldr	r3, [pc, #408]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a65      	ldr	r2, [pc, #404]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800526a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d013      	beq.n	800529c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005274:	f7fc fff8 	bl	8002268 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800527c:	f7fc fff4 	bl	8002268 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b64      	cmp	r3, #100	; 0x64
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e207      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528e:	4b5b      	ldr	r3, [pc, #364]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0xc0>
 800529a:	e014      	b.n	80052c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fc ffe4 	bl	8002268 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052a4:	f7fc ffe0 	bl	8002268 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e1f3      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b6:	4b51      	ldr	r3, [pc, #324]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0xe8>
 80052c2:	e000      	b.n	80052c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d063      	beq.n	800539a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052d2:	4b4a      	ldr	r3, [pc, #296]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052de:	4b47      	ldr	r3, [pc, #284]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d11c      	bne.n	8005324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ea:	4b44      	ldr	r3, [pc, #272]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d116      	bne.n	8005324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052f6:	4b41      	ldr	r3, [pc, #260]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_RCC_OscConfig+0x152>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e1c7      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530e:	4b3b      	ldr	r3, [pc, #236]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4937      	ldr	r1, [pc, #220]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005322:	e03a      	b.n	800539a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d020      	beq.n	800536e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800532c:	4b34      	ldr	r3, [pc, #208]	; (8005400 <HAL_RCC_OscConfig+0x244>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fc ff99 	bl	8002268 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800533a:	f7fc ff95 	bl	8002268 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e1a8      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534c:	4b2b      	ldr	r3, [pc, #172]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005358:	4b28      	ldr	r3, [pc, #160]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4925      	ldr	r1, [pc, #148]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005368:	4313      	orrs	r3, r2
 800536a:	600b      	str	r3, [r1, #0]
 800536c:	e015      	b.n	800539a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800536e:	4b24      	ldr	r3, [pc, #144]	; (8005400 <HAL_RCC_OscConfig+0x244>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fc ff78 	bl	8002268 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537c:	f7fc ff74 	bl	8002268 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e187      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800538e:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d036      	beq.n	8005414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d016      	beq.n	80053dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ae:	4b15      	ldr	r3, [pc, #84]	; (8005404 <HAL_RCC_OscConfig+0x248>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fc ff58 	bl	8002268 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053bc:	f7fc ff54 	bl	8002268 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e167      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <HAL_RCC_OscConfig+0x240>)
 80053d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0x200>
 80053da:	e01b      	b.n	8005414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053dc:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_RCC_OscConfig+0x248>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e2:	f7fc ff41 	bl	8002268 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e8:	e00e      	b.n	8005408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ea:	f7fc ff3d 	bl	8002268 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d907      	bls.n	8005408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e150      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
 80053fc:	40023800 	.word	0x40023800
 8005400:	42470000 	.word	0x42470000
 8005404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005408:	4b88      	ldr	r3, [pc, #544]	; (800562c <HAL_RCC_OscConfig+0x470>)
 800540a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ea      	bne.n	80053ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8097 	beq.w	8005550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005426:	4b81      	ldr	r3, [pc, #516]	; (800562c <HAL_RCC_OscConfig+0x470>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	4b7d      	ldr	r3, [pc, #500]	; (800562c <HAL_RCC_OscConfig+0x470>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	4a7c      	ldr	r2, [pc, #496]	; (800562c <HAL_RCC_OscConfig+0x470>)
 800543c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005440:	6413      	str	r3, [r2, #64]	; 0x40
 8005442:	4b7a      	ldr	r3, [pc, #488]	; (800562c <HAL_RCC_OscConfig+0x470>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800544e:	2301      	movs	r3, #1
 8005450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005452:	4b77      	ldr	r3, [pc, #476]	; (8005630 <HAL_RCC_OscConfig+0x474>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d118      	bne.n	8005490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800545e:	4b74      	ldr	r3, [pc, #464]	; (8005630 <HAL_RCC_OscConfig+0x474>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a73      	ldr	r2, [pc, #460]	; (8005630 <HAL_RCC_OscConfig+0x474>)
 8005464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546a:	f7fc fefd 	bl	8002268 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005472:	f7fc fef9 	bl	8002268 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e10c      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005484:	4b6a      	ldr	r3, [pc, #424]	; (8005630 <HAL_RCC_OscConfig+0x474>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d106      	bne.n	80054a6 <HAL_RCC_OscConfig+0x2ea>
 8005498:	4b64      	ldr	r3, [pc, #400]	; (800562c <HAL_RCC_OscConfig+0x470>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	4a63      	ldr	r2, [pc, #396]	; (800562c <HAL_RCC_OscConfig+0x470>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
 80054a4:	e01c      	b.n	80054e0 <HAL_RCC_OscConfig+0x324>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCC_OscConfig+0x30c>
 80054ae:	4b5f      	ldr	r3, [pc, #380]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	4a5e      	ldr	r2, [pc, #376]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80054b4:	f043 0304 	orr.w	r3, r3, #4
 80054b8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ba:	4b5c      	ldr	r3, [pc, #368]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	4a5b      	ldr	r2, [pc, #364]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6713      	str	r3, [r2, #112]	; 0x70
 80054c6:	e00b      	b.n	80054e0 <HAL_RCC_OscConfig+0x324>
 80054c8:	4b58      	ldr	r3, [pc, #352]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	4a57      	ldr	r2, [pc, #348]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	; 0x70
 80054d4:	4b55      	ldr	r3, [pc, #340]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	4a54      	ldr	r2, [pc, #336]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80054da:	f023 0304 	bic.w	r3, r3, #4
 80054de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fc febe 	bl	8002268 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ee:	e00a      	b.n	8005506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7fc feba 	bl	8002268 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e0cb      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005506:	4b49      	ldr	r3, [pc, #292]	; (800562c <HAL_RCC_OscConfig+0x470>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0ee      	beq.n	80054f0 <HAL_RCC_OscConfig+0x334>
 8005512:	e014      	b.n	800553e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005514:	f7fc fea8 	bl	8002268 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fc fea4 	bl	8002268 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0b5      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005532:	4b3e      	ldr	r3, [pc, #248]	; (800562c <HAL_RCC_OscConfig+0x470>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1ee      	bne.n	800551c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d105      	bne.n	8005550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005544:	4b39      	ldr	r3, [pc, #228]	; (800562c <HAL_RCC_OscConfig+0x470>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	4a38      	ldr	r2, [pc, #224]	; (800562c <HAL_RCC_OscConfig+0x470>)
 800554a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800554e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80a1 	beq.w	800569c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800555a:	4b34      	ldr	r3, [pc, #208]	; (800562c <HAL_RCC_OscConfig+0x470>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b08      	cmp	r3, #8
 8005564:	d05c      	beq.n	8005620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d141      	bne.n	80055f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556e:	4b31      	ldr	r3, [pc, #196]	; (8005634 <HAL_RCC_OscConfig+0x478>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fc fe78 	bl	8002268 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557c:	f7fc fe74 	bl	8002268 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e087      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558e:	4b27      	ldr	r3, [pc, #156]	; (800562c <HAL_RCC_OscConfig+0x470>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	019b      	lsls	r3, r3, #6
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	3b01      	subs	r3, #1
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	491b      	ldr	r1, [pc, #108]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <HAL_RCC_OscConfig+0x478>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fc fe4d 	bl	8002268 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d2:	f7fc fe49 	bl	8002268 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e05c      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <HAL_RCC_OscConfig+0x470>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_RCC_OscConfig+0x416>
 80055f0:	e054      	b.n	800569c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f2:	4b10      	ldr	r3, [pc, #64]	; (8005634 <HAL_RCC_OscConfig+0x478>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fc fe36 	bl	8002268 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005600:	f7fc fe32 	bl	8002268 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e045      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCC_OscConfig+0x470>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0x444>
 800561e:	e03d      	b.n	800569c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d107      	bne.n	8005638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e038      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
 800562c:	40023800 	.word	0x40023800
 8005630:	40007000 	.word	0x40007000
 8005634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <HAL_RCC_OscConfig+0x4ec>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d028      	beq.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d121      	bne.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565e:	429a      	cmp	r2, r3
 8005660:	d11a      	bne.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005668:	4013      	ands	r3, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800566e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005670:	4293      	cmp	r3, r2
 8005672:	d111      	bne.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	3b01      	subs	r3, #1
 8005682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d107      	bne.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800

080056ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0cc      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056c0:	4b68      	ldr	r3, [pc, #416]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d90c      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b65      	ldr	r3, [pc, #404]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b63      	ldr	r3, [pc, #396]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0b8      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d020      	beq.n	8005736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005700:	4b59      	ldr	r3, [pc, #356]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4a58      	ldr	r2, [pc, #352]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800570a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005718:	4b53      	ldr	r3, [pc, #332]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4a52      	ldr	r2, [pc, #328]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005724:	4b50      	ldr	r3, [pc, #320]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	494d      	ldr	r1, [pc, #308]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d044      	beq.n	80057cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d107      	bne.n	800575a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574a:	4b47      	ldr	r3, [pc, #284]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d119      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e07f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d003      	beq.n	800576a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005766:	2b03      	cmp	r3, #3
 8005768:	d107      	bne.n	800577a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576a:	4b3f      	ldr	r3, [pc, #252]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e06f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577a:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e067      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800578a:	4b37      	ldr	r3, [pc, #220]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 0203 	bic.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4934      	ldr	r1, [pc, #208]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800579c:	f7fc fd64 	bl	8002268 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fc fd60 	bl	8002268 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e04f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ba:	4b2b      	ldr	r3, [pc, #172]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 020c 	and.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d1eb      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057cc:	4b25      	ldr	r3, [pc, #148]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d20c      	bcs.n	80057f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	4b20      	ldr	r3, [pc, #128]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e032      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005800:	4b19      	ldr	r3, [pc, #100]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4916      	ldr	r1, [pc, #88]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	490e      	ldr	r1, [pc, #56]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	4313      	orrs	r3, r2
 8005830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005832:	f000 f821 	bl	8005878 <HAL_RCC_GetSysClockFreq>
 8005836:	4602      	mov	r2, r0
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	490a      	ldr	r1, [pc, #40]	; (800586c <HAL_RCC_ClockConfig+0x1c0>)
 8005844:	5ccb      	ldrb	r3, [r1, r3]
 8005846:	fa22 f303 	lsr.w	r3, r2, r3
 800584a:	4a09      	ldr	r2, [pc, #36]	; (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800584c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <HAL_RCC_ClockConfig+0x1c8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fc fcc4 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40023c00 	.word	0x40023c00
 8005868:	40023800 	.word	0x40023800
 800586c:	0800b370 	.word	0x0800b370
 8005870:	20000064 	.word	0x20000064
 8005874:	20000068 	.word	0x20000068

08005878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800587c:	b094      	sub	sp, #80	; 0x50
 800587e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	647b      	str	r3, [r7, #68]	; 0x44
 8005884:	2300      	movs	r3, #0
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005888:	2300      	movs	r3, #0
 800588a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005890:	4b79      	ldr	r3, [pc, #484]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 030c 	and.w	r3, r3, #12
 8005898:	2b08      	cmp	r3, #8
 800589a:	d00d      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0x40>
 800589c:	2b08      	cmp	r3, #8
 800589e:	f200 80e1 	bhi.w	8005a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x34>
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d003      	beq.n	80058b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80058aa:	e0db      	b.n	8005a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058ac:	4b73      	ldr	r3, [pc, #460]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80058ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058b0:	e0db      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058b2:	4b73      	ldr	r3, [pc, #460]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80058b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058b6:	e0d8      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058b8:	4b6f      	ldr	r3, [pc, #444]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058c2:	4b6d      	ldr	r3, [pc, #436]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d063      	beq.n	8005996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ce:	4b6a      	ldr	r3, [pc, #424]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	099b      	lsrs	r3, r3, #6
 80058d4:	2200      	movs	r2, #0
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30
 80058e2:	2300      	movs	r3, #0
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
 80058e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	f04f 0000 	mov.w	r0, #0
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	0159      	lsls	r1, r3, #5
 80058f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058fc:	0150      	lsls	r0, r2, #5
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4621      	mov	r1, r4
 8005904:	1a51      	subs	r1, r2, r1
 8005906:	6139      	str	r1, [r7, #16]
 8005908:	4629      	mov	r1, r5
 800590a:	eb63 0301 	sbc.w	r3, r3, r1
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800591c:	4659      	mov	r1, fp
 800591e:	018b      	lsls	r3, r1, #6
 8005920:	4651      	mov	r1, sl
 8005922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005926:	4651      	mov	r1, sl
 8005928:	018a      	lsls	r2, r1, #6
 800592a:	4651      	mov	r1, sl
 800592c:	ebb2 0801 	subs.w	r8, r2, r1
 8005930:	4659      	mov	r1, fp
 8005932:	eb63 0901 	sbc.w	r9, r3, r1
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800594a:	4690      	mov	r8, r2
 800594c:	4699      	mov	r9, r3
 800594e:	4623      	mov	r3, r4
 8005950:	eb18 0303 	adds.w	r3, r8, r3
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	462b      	mov	r3, r5
 8005958:	eb49 0303 	adc.w	r3, r9, r3
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800596a:	4629      	mov	r1, r5
 800596c:	024b      	lsls	r3, r1, #9
 800596e:	4621      	mov	r1, r4
 8005970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005974:	4621      	mov	r1, r4
 8005976:	024a      	lsls	r2, r1, #9
 8005978:	4610      	mov	r0, r2
 800597a:	4619      	mov	r1, r3
 800597c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800597e:	2200      	movs	r2, #0
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
 8005982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005988:	f7fa fc8a 	bl	80002a0 <__aeabi_uldivmod>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4613      	mov	r3, r2
 8005992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005994:	e058      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005996:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	099b      	lsrs	r3, r3, #6
 800599c:	2200      	movs	r2, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	4611      	mov	r1, r2
 80059a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	2300      	movs	r3, #0
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
 80059ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	f04f 0000 	mov.w	r0, #0
 80059b8:	f04f 0100 	mov.w	r1, #0
 80059bc:	0159      	lsls	r1, r3, #5
 80059be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059c2:	0150      	lsls	r0, r2, #5
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4641      	mov	r1, r8
 80059ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80059ce:	4649      	mov	r1, r9
 80059d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059e8:	ebb2 040a 	subs.w	r4, r2, sl
 80059ec:	eb63 050b 	sbc.w	r5, r3, fp
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	00eb      	lsls	r3, r5, #3
 80059fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059fe:	00e2      	lsls	r2, r4, #3
 8005a00:	4614      	mov	r4, r2
 8005a02:	461d      	mov	r5, r3
 8005a04:	4643      	mov	r3, r8
 8005a06:	18e3      	adds	r3, r4, r3
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	eb45 0303 	adc.w	r3, r5, r3
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	028b      	lsls	r3, r1, #10
 8005a22:	4621      	mov	r1, r4
 8005a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a28:	4621      	mov	r1, r4
 8005a2a:	028a      	lsls	r2, r1, #10
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a32:	2200      	movs	r2, #0
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	61fa      	str	r2, [r7, #28]
 8005a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a3c:	f7fa fc30 	bl	80002a0 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	0c1b      	lsrs	r3, r3, #16
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	3301      	adds	r3, #1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a62:	e002      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3750      	adds	r7, #80	; 0x50
 8005a70:	46bd      	mov	sp, r7
 8005a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a76:	bf00      	nop
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	00f42400 	.word	0x00f42400
 8005a80:	007a1200 	.word	0x007a1200

08005a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a88:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000064 	.word	0x20000064

08005a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005aa0:	f7ff fff0 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b05      	ldr	r3, [pc, #20]	; (8005abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	0a9b      	lsrs	r3, r3, #10
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4903      	ldr	r1, [pc, #12]	; (8005ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	0800b380 	.word	0x0800b380

08005ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ac8:	f7ff ffdc 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	0b5b      	lsrs	r3, r3, #13
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4903      	ldr	r1, [pc, #12]	; (8005ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	0800b380 	.word	0x0800b380

08005aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e03f      	b.n	8005b7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fa0c 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2224      	movs	r2, #36	; 0x24
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fe1d 	bl	8006770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b08a      	sub	sp, #40	; 0x28
 8005b8a:	af02      	add	r7, sp, #8
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	603b      	str	r3, [r7, #0]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d17c      	bne.n	8005ca0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_UART_Transmit+0x2c>
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e075      	b.n	8005ca2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Transmit+0x3e>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e06e      	b.n	8005ca2 <HAL_UART_Transmit+0x11c>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2221      	movs	r2, #33	; 0x21
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bda:	f7fc fb45 	bl	8002268 <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	88fa      	ldrh	r2, [r7, #6]
 8005be4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	88fa      	ldrh	r2, [r7, #6]
 8005bea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf4:	d108      	bne.n	8005c08 <HAL_UART_Transmit+0x82>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	e003      	b.n	8005c10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c18:	e02a      	b.n	8005c70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2200      	movs	r2, #0
 8005c22:	2180      	movs	r1, #128	; 0x80
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fb9b 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e036      	b.n	8005ca2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	e007      	b.n	8005c62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1cf      	bne.n	8005c1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2200      	movs	r2, #0
 8005c82:	2140      	movs	r1, #64	; 0x40
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fb6b 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e006      	b.n	8005ca2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e000      	b.n	8005ca2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ca0:	2302      	movs	r3, #2
  }
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b08a      	sub	sp, #40	; 0x28
 8005cae:	af02      	add	r7, sp, #8
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	f040 808c 	bne.w	8005de4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_UART_Receive+0x2e>
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e084      	b.n	8005de6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Receive+0x40>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e07d      	b.n	8005de6 <HAL_UART_Receive+0x13c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2222      	movs	r2, #34	; 0x22
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d06:	f7fc faaf 	bl	8002268 <HAL_GetTick>
 8005d0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	d108      	bne.n	8005d34 <HAL_UART_Receive+0x8a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e003      	b.n	8005d3c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005d44:	e043      	b.n	8005dce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2120      	movs	r1, #32
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fb05 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e042      	b.n	8005de6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	e01f      	b.n	8005dc0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d88:	d007      	beq.n	8005d9a <HAL_UART_Receive+0xf0>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <HAL_UART_Receive+0xfe>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e008      	b.n	8005dba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1b6      	bne.n	8005d46 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b0ba      	sub	sp, #232	; 0xe8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10f      	bne.n	8005e56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_UART_IRQHandler+0x66>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fbd3 	bl	80065fa <UART_Receive_IT>
      return;
 8005e54:	e256      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80de 	beq.w	800601c <HAL_UART_IRQHandler+0x22c>
 8005e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80d1 	beq.w	800601c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xae>
 8005e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xd2>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f043 0202 	orr.w	r2, r3, #2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_UART_IRQHandler+0xf6>
 8005ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f043 0204 	orr.w	r2, r3, #4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d011      	beq.n	8005f16 <HAL_UART_IRQHandler+0x126>
 8005ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f043 0208 	orr.w	r2, r3, #8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 81ed 	beq.w	80062fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_UART_IRQHandler+0x14e>
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fb5e 	bl	80065fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d103      	bne.n	8005f6a <HAL_UART_IRQHandler+0x17a>
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d04f      	beq.n	800600a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa66 	bl	800643c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d141      	bne.n	8006002 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3314      	adds	r3, #20
 8005fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005faa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1d9      	bne.n	8005f7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d013      	beq.n	8005ffa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	4a7d      	ldr	r2, [pc, #500]	; (80061cc <HAL_UART_IRQHandler+0x3dc>)
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fc fed5 	bl	8002d8e <HAL_DMA_Abort_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d016      	beq.n	8006018 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	e00e      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f99a 	bl	8006334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00a      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f996 	bl	8006334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e006      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f992 	bl	8006334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006016:	e170      	b.n	80062fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	bf00      	nop
    return;
 800601a:	e16e      	b.n	80062fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 814a 	bne.w	80062ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8143 	beq.w	80062ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 813c 	beq.w	80062ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	f040 80b4 	bne.w	80061d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8140 	beq.w	80062fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006086:	429a      	cmp	r2, r3
 8006088:	f080 8139 	bcs.w	80062fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006092:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	f000 8088 	beq.w	80061b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1d9      	bne.n	80060a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3314      	adds	r3, #20
 80060f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3314      	adds	r3, #20
 800610e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006112:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006116:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800611a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e1      	bne.n	80060ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800613a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800613c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800614e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006150:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800615c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e3      	bne.n	800612a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006182:	f023 0310 	bic.w	r3, r3, #16
 8006186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006194:	65ba      	str	r2, [r7, #88]	; 0x58
 8006196:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800619a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e3      	bne.n	8006170 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fc fd7e 	bl	8002cae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	b29b      	uxth	r3, r3
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8c0 	bl	8006348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061c8:	e099      	b.n	80062fe <HAL_UART_IRQHandler+0x50e>
 80061ca:	bf00      	nop
 80061cc:	08006503 	.word	0x08006503
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 808b 	beq.w	8006302 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8086 	beq.w	8006302 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800621a:	647a      	str	r2, [r7, #68]	; 0x44
 800621c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e3      	bne.n	80061f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	623b      	str	r3, [r7, #32]
   return(result);
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006252:	633a      	str	r2, [r7, #48]	; 0x30
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e3      	bne.n	800622e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	60fb      	str	r3, [r7, #12]
   return(result);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0310 	bic.w	r3, r3, #16
 800628a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006298:	61fa      	str	r2, [r7, #28]
 800629a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	617b      	str	r3, [r7, #20]
   return(result);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e3      	bne.n	8006274 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f848 	bl	8006348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062b8:	e023      	b.n	8006302 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_UART_IRQHandler+0x4ea>
 80062c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f929 	bl	800652a <UART_Transmit_IT>
    return;
 80062d8:	e014      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00e      	beq.n	8006304 <HAL_UART_IRQHandler+0x514>
 80062e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f969 	bl	80065ca <UART_EndTransmit_IT>
    return;
 80062f8:	e004      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
    return;
 80062fa:	bf00      	nop
 80062fc:	e002      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
      return;
 80062fe:	bf00      	nop
 8006300:	e000      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
      return;
 8006302:	bf00      	nop
  }
}
 8006304:	37e8      	adds	r7, #232	; 0xe8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop

0800630c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b090      	sub	sp, #64	; 0x40
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006370:	e050      	b.n	8006414 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d04c      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800637a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <UART_WaitOnFlagUntilTimeout+0x30>
 8006380:	f7fb ff72 	bl	8002268 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638c:	429a      	cmp	r2, r3
 800638e:	d241      	bcs.n	8006414 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063b0:	637a      	str	r2, [r7, #52]	; 0x34
 80063b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e5      	bne.n	8006390 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3314      	adds	r3, #20
 80063ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	613b      	str	r3, [r7, #16]
   return(result);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	63bb      	str	r3, [r7, #56]	; 0x38
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3314      	adds	r3, #20
 80063e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e4:	623a      	str	r2, [r7, #32]
 80063e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	69f9      	ldr	r1, [r7, #28]
 80063ea:	6a3a      	ldr	r2, [r7, #32]
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e5      	bne.n	80063c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e00f      	b.n	8006434 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4013      	ands	r3, r2
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	429a      	cmp	r2, r3
 8006430:	d09f      	beq.n	8006372 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3740      	adds	r7, #64	; 0x40
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b095      	sub	sp, #84	; 0x54
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800645a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006464:	643a      	str	r2, [r7, #64]	; 0x40
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800646a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3314      	adds	r3, #20
 800647e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	61fb      	str	r3, [r7, #28]
   return(result);
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3314      	adds	r3, #20
 8006496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800649e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e5      	bne.n	8006478 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d119      	bne.n	80064e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f023 0310 	bic.w	r3, r3, #16
 80064ca:	647b      	str	r3, [r7, #68]	; 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064d4:	61ba      	str	r2, [r7, #24]
 80064d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6979      	ldr	r1, [r7, #20]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	613b      	str	r3, [r7, #16]
   return(result);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064f6:	bf00      	nop
 80064f8:	3754      	adds	r7, #84	; 0x54
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f7ff ff09 	bl	8006334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b21      	cmp	r3, #33	; 0x21
 800653c:	d13e      	bne.n	80065bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006546:	d114      	bne.n	8006572 <UART_Transmit_IT+0x48>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d110      	bne.n	8006572 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006564:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]
 8006570:	e008      	b.n	8006584 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6211      	str	r1, [r2, #32]
 800657c:	781a      	ldrb	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29b      	uxth	r3, r3
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4619      	mov	r1, r3
 8006592:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10f      	bne.n	80065b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e000      	b.n	80065be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065bc:	2302      	movs	r3, #2
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fe8e 	bl	800630c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b08c      	sub	sp, #48	; 0x30
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b22      	cmp	r3, #34	; 0x22
 800660c:	f040 80ab 	bne.w	8006766 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006618:	d117      	bne.n	800664a <UART_Receive_IT+0x50>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d113      	bne.n	800664a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006638:	b29a      	uxth	r2, r3
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	1c9a      	adds	r2, r3, #2
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	629a      	str	r2, [r3, #40]	; 0x28
 8006648:	e026      	b.n	8006698 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665c:	d007      	beq.n	800666e <UART_Receive_IT+0x74>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <UART_Receive_IT+0x82>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	e008      	b.n	800668e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006688:	b2da      	uxtb	r2, r3
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	4619      	mov	r1, r3
 80066a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d15a      	bne.n	8006762 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0220 	bic.w	r2, r2, #32
 80066ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d135      	bne.n	8006758 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	613b      	str	r3, [r7, #16]
   return(result);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f023 0310 	bic.w	r3, r3, #16
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006712:	623a      	str	r2, [r7, #32]
 8006714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	69f9      	ldr	r1, [r7, #28]
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b10      	cmp	r3, #16
 8006732:	d10a      	bne.n	800674a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff fdf9 	bl	8006348 <HAL_UARTEx_RxEventCallback>
 8006756:	e002      	b.n	800675e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff fde1 	bl	8006320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e002      	b.n	8006768 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006766:	2302      	movs	r3, #2
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3730      	adds	r7, #48	; 0x30
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006774:	b0c0      	sub	sp, #256	; 0x100
 8006776:	af00      	add	r7, sp, #0
 8006778:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678c:	68d9      	ldr	r1, [r3, #12]
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	ea40 0301 	orr.w	r3, r0, r1
 8006798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067c8:	f021 010c 	bic.w	r1, r1, #12
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067d6:	430b      	orrs	r3, r1
 80067d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ea:	6999      	ldr	r1, [r3, #24]
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	ea40 0301 	orr.w	r3, r0, r1
 80067f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4b8f      	ldr	r3, [pc, #572]	; (8006a3c <UART_SetConfig+0x2cc>)
 8006800:	429a      	cmp	r2, r3
 8006802:	d005      	beq.n	8006810 <UART_SetConfig+0xa0>
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b8d      	ldr	r3, [pc, #564]	; (8006a40 <UART_SetConfig+0x2d0>)
 800680c:	429a      	cmp	r2, r3
 800680e:	d104      	bne.n	800681a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7ff f958 	bl	8005ac4 <HAL_RCC_GetPCLK2Freq>
 8006814:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006818:	e003      	b.n	8006822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800681a:	f7ff f93f 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 800681e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682c:	f040 810c 	bne.w	8006a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006834:	2200      	movs	r2, #0
 8006836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800683a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800683e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	1891      	adds	r1, r2, r2
 8006848:	65b9      	str	r1, [r7, #88]	; 0x58
 800684a:	415b      	adcs	r3, r3
 800684c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800684e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006852:	4621      	mov	r1, r4
 8006854:	eb12 0801 	adds.w	r8, r2, r1
 8006858:	4629      	mov	r1, r5
 800685a:	eb43 0901 	adc.w	r9, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb18 0303 	adds.w	r3, r8, r3
 800687c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006880:	462b      	mov	r3, r5
 8006882:	eb49 0303 	adc.w	r3, r9, r3
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800689a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800689e:	460b      	mov	r3, r1
 80068a0:	18db      	adds	r3, r3, r3
 80068a2:	653b      	str	r3, [r7, #80]	; 0x50
 80068a4:	4613      	mov	r3, r2
 80068a6:	eb42 0303 	adc.w	r3, r2, r3
 80068aa:	657b      	str	r3, [r7, #84]	; 0x54
 80068ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068b4:	f7f9 fcf4 	bl	80002a0 <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <UART_SetConfig+0x2d4>)
 80068be:	fba3 2302 	umull	r2, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	011c      	lsls	r4, r3, #4
 80068c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	1891      	adds	r1, r2, r2
 80068de:	64b9      	str	r1, [r7, #72]	; 0x48
 80068e0:	415b      	adcs	r3, r3
 80068e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068e8:	4641      	mov	r1, r8
 80068ea:	eb12 0a01 	adds.w	sl, r2, r1
 80068ee:	4649      	mov	r1, r9
 80068f0:	eb43 0b01 	adc.w	fp, r3, r1
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006908:	4692      	mov	sl, r2
 800690a:	469b      	mov	fp, r3
 800690c:	4643      	mov	r3, r8
 800690e:	eb1a 0303 	adds.w	r3, sl, r3
 8006912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006916:	464b      	mov	r3, r9
 8006918:	eb4b 0303 	adc.w	r3, fp, r3
 800691c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800692c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006934:	460b      	mov	r3, r1
 8006936:	18db      	adds	r3, r3, r3
 8006938:	643b      	str	r3, [r7, #64]	; 0x40
 800693a:	4613      	mov	r3, r2
 800693c:	eb42 0303 	adc.w	r3, r2, r3
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
 8006942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800694a:	f7f9 fca9 	bl	80002a0 <__aeabi_uldivmod>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4611      	mov	r1, r2
 8006954:	4b3b      	ldr	r3, [pc, #236]	; (8006a44 <UART_SetConfig+0x2d4>)
 8006956:	fba3 2301 	umull	r2, r3, r3, r1
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	2264      	movs	r2, #100	; 0x64
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	1acb      	subs	r3, r1, r3
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800696a:	4b36      	ldr	r3, [pc, #216]	; (8006a44 <UART_SetConfig+0x2d4>)
 800696c:	fba3 2302 	umull	r2, r3, r3, r2
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006978:	441c      	add	r4, r3
 800697a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800697e:	2200      	movs	r2, #0
 8006980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006984:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800698c:	4642      	mov	r2, r8
 800698e:	464b      	mov	r3, r9
 8006990:	1891      	adds	r1, r2, r2
 8006992:	63b9      	str	r1, [r7, #56]	; 0x38
 8006994:	415b      	adcs	r3, r3
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800699c:	4641      	mov	r1, r8
 800699e:	1851      	adds	r1, r2, r1
 80069a0:	6339      	str	r1, [r7, #48]	; 0x30
 80069a2:	4649      	mov	r1, r9
 80069a4:	414b      	adcs	r3, r1
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069b4:	4659      	mov	r1, fp
 80069b6:	00cb      	lsls	r3, r1, #3
 80069b8:	4651      	mov	r1, sl
 80069ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069be:	4651      	mov	r1, sl
 80069c0:	00ca      	lsls	r2, r1, #3
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	4642      	mov	r2, r8
 80069ca:	189b      	adds	r3, r3, r2
 80069cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069d0:	464b      	mov	r3, r9
 80069d2:	460a      	mov	r2, r1
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069f0:	460b      	mov	r3, r1
 80069f2:	18db      	adds	r3, r3, r3
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f6:	4613      	mov	r3, r2
 80069f8:	eb42 0303 	adc.w	r3, r2, r3
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a06:	f7f9 fc4b 	bl	80002a0 <__aeabi_uldivmod>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <UART_SetConfig+0x2d4>)
 8006a10:	fba3 1302 	umull	r1, r3, r3, r2
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	2164      	movs	r1, #100	; 0x64
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	3332      	adds	r3, #50	; 0x32
 8006a22:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <UART_SetConfig+0x2d4>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	f003 0207 	and.w	r2, r3, #7
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4422      	add	r2, r4
 8006a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a38:	e105      	b.n	8006c46 <UART_SetConfig+0x4d6>
 8006a3a:	bf00      	nop
 8006a3c:	40011000 	.word	0x40011000
 8006a40:	40011400 	.word	0x40011400
 8006a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	1891      	adds	r1, r2, r2
 8006a60:	6239      	str	r1, [r7, #32]
 8006a62:	415b      	adcs	r3, r3
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
 8006a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	1854      	adds	r4, r2, r1
 8006a6e:	4649      	mov	r1, r9
 8006a70:	eb43 0501 	adc.w	r5, r3, r1
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	00eb      	lsls	r3, r5, #3
 8006a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a82:	00e2      	lsls	r2, r4, #3
 8006a84:	4614      	mov	r4, r2
 8006a86:	461d      	mov	r5, r3
 8006a88:	4643      	mov	r3, r8
 8006a8a:	18e3      	adds	r3, r4, r3
 8006a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a90:	464b      	mov	r3, r9
 8006a92:	eb45 0303 	adc.w	r3, r5, r3
 8006a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	008b      	lsls	r3, r1, #2
 8006aba:	4621      	mov	r1, r4
 8006abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	008a      	lsls	r2, r1, #2
 8006ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ac8:	f7f9 fbea 	bl	80002a0 <__aeabi_uldivmod>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4b60      	ldr	r3, [pc, #384]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	011c      	lsls	r4, r3, #4
 8006ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	1891      	adds	r1, r2, r2
 8006af2:	61b9      	str	r1, [r7, #24]
 8006af4:	415b      	adcs	r3, r3
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006afc:	4641      	mov	r1, r8
 8006afe:	1851      	adds	r1, r2, r1
 8006b00:	6139      	str	r1, [r7, #16]
 8006b02:	4649      	mov	r1, r9
 8006b04:	414b      	adcs	r3, r1
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b14:	4659      	mov	r1, fp
 8006b16:	00cb      	lsls	r3, r1, #3
 8006b18:	4651      	mov	r1, sl
 8006b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b1e:	4651      	mov	r1, sl
 8006b20:	00ca      	lsls	r2, r1, #3
 8006b22:	4610      	mov	r0, r2
 8006b24:	4619      	mov	r1, r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	4642      	mov	r2, r8
 8006b2a:	189b      	adds	r3, r3, r2
 8006b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b30:	464b      	mov	r3, r9
 8006b32:	460a      	mov	r2, r1
 8006b34:	eb42 0303 	adc.w	r3, r2, r3
 8006b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b54:	4649      	mov	r1, r9
 8006b56:	008b      	lsls	r3, r1, #2
 8006b58:	4641      	mov	r1, r8
 8006b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b5e:	4641      	mov	r1, r8
 8006b60:	008a      	lsls	r2, r1, #2
 8006b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b66:	f7f9 fb9b 	bl	80002a0 <__aeabi_uldivmod>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4b39      	ldr	r3, [pc, #228]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006b70:	fba3 1302 	umull	r1, r3, r3, r2
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	2164      	movs	r1, #100	; 0x64
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	3332      	adds	r3, #50	; 0x32
 8006b82:	4a34      	ldr	r2, [pc, #208]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006b84:	fba2 2303 	umull	r2, r3, r2, r3
 8006b88:	095b      	lsrs	r3, r3, #5
 8006b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b8e:	441c      	add	r4, r3
 8006b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b94:	2200      	movs	r2, #0
 8006b96:	673b      	str	r3, [r7, #112]	; 0x70
 8006b98:	677a      	str	r2, [r7, #116]	; 0x74
 8006b9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	1891      	adds	r1, r2, r2
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	415b      	adcs	r3, r3
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bae:	4641      	mov	r1, r8
 8006bb0:	1851      	adds	r1, r2, r1
 8006bb2:	6039      	str	r1, [r7, #0]
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	414b      	adcs	r3, r1
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	f04f 0300 	mov.w	r3, #0
 8006bc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	00cb      	lsls	r3, r1, #3
 8006bca:	4651      	mov	r1, sl
 8006bcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bd0:	4651      	mov	r1, sl
 8006bd2:	00ca      	lsls	r2, r1, #3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4603      	mov	r3, r0
 8006bda:	4642      	mov	r2, r8
 8006bdc:	189b      	adds	r3, r3, r2
 8006bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006be0:	464b      	mov	r3, r9
 8006be2:	460a      	mov	r2, r1
 8006be4:	eb42 0303 	adc.w	r3, r2, r3
 8006be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8006bf4:	667a      	str	r2, [r7, #100]	; 0x64
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c02:	4649      	mov	r1, r9
 8006c04:	008b      	lsls	r3, r1, #2
 8006c06:	4641      	mov	r1, r8
 8006c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c0c:	4641      	mov	r1, r8
 8006c0e:	008a      	lsls	r2, r1, #2
 8006c10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c14:	f7f9 fb44 	bl	80002a0 <__aeabi_uldivmod>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	2164      	movs	r1, #100	; 0x64
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	3332      	adds	r3, #50	; 0x32
 8006c30:	4a08      	ldr	r2, [pc, #32]	; (8006c54 <UART_SetConfig+0x4e4>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4422      	add	r2, r4
 8006c44:	609a      	str	r2, [r3, #8]
}
 8006c46:	bf00      	nop
 8006c48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c52:	bf00      	nop
 8006c54:	51eb851f 	.word	0x51eb851f

08006c58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c58:	b084      	sub	sp, #16
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	f107 001c 	add.w	r0, r7, #28
 8006c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d122      	bne.n	8006cb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d105      	bne.n	8006caa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f9c0 	bl	8007030 <USB_CoreReset>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
 8006cb4:	e01a      	b.n	8006cec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9b4 	bl	8007030 <USB_CoreReset>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8006cde:	e005      	b.n	8006cec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d10b      	bne.n	8006d0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f043 0206 	orr.w	r2, r3, #6
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f043 0220 	orr.w	r2, r3, #32
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d16:	b004      	add	sp, #16
 8006d18:	4770      	bx	lr

08006d1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f043 0201 	orr.w	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f023 0201 	bic.w	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d115      	bne.n	8006dac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f7fb fa77 	bl	8002280 <HAL_Delay>
      ms++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f93a 	bl	8007012 <USB_GetMode>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d01e      	beq.n	8006de2 <USB_SetCurrentMode+0x84>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b31      	cmp	r3, #49	; 0x31
 8006da8:	d9f0      	bls.n	8006d8c <USB_SetCurrentMode+0x2e>
 8006daa:	e01a      	b.n	8006de2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dac:	78fb      	ldrb	r3, [r7, #3]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d115      	bne.n	8006dde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	f7fb fa5e 	bl	8002280 <HAL_Delay>
      ms++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f921 	bl	8007012 <USB_GetMode>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <USB_SetCurrentMode+0x84>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b31      	cmp	r3, #49	; 0x31
 8006dda:	d9f0      	bls.n	8006dbe <USB_SetCurrentMode+0x60>
 8006ddc:	e001      	b.n	8006de2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e005      	b.n	8006dee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b32      	cmp	r3, #50	; 0x32
 8006de6:	d101      	bne.n	8006dec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4a13      	ldr	r2, [pc, #76]	; (8006e5c <USB_FlushTxFifo+0x64>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d901      	bls.n	8006e18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e01b      	b.n	8006e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	daf2      	bge.n	8006e06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	019b      	lsls	r3, r3, #6
 8006e28:	f043 0220 	orr.w	r2, r3, #32
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3301      	adds	r3, #1
 8006e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4a08      	ldr	r2, [pc, #32]	; (8006e5c <USB_FlushTxFifo+0x64>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d901      	bls.n	8006e42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e006      	b.n	8006e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d0f0      	beq.n	8006e30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	00030d40 	.word	0x00030d40

08006e60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a11      	ldr	r2, [pc, #68]	; (8006ebc <USB_FlushRxFifo+0x5c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e018      	b.n	8006eb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	daf2      	bge.n	8006e6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <USB_FlushRxFifo+0x5c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d901      	bls.n	8006ea2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e006      	b.n	8006eb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b10      	cmp	r3, #16
 8006eac:	d0f0      	beq.n	8006e90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	00030d40 	.word	0x00030d40

08006ec0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b089      	sub	sp, #36	; 0x24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	461a      	mov	r2, r3
 8006ece:	460b      	mov	r3, r1
 8006ed0:	71fb      	strb	r3, [r7, #7]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d123      	bne.n	8006f2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ee6:	88bb      	ldrh	r3, [r7, #4]
 8006ee8:	3303      	adds	r3, #3
 8006eea:	089b      	lsrs	r3, r3, #2
 8006eec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	e018      	b.n	8006f26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	031a      	lsls	r2, r3, #12
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f00:	461a      	mov	r2, r3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3301      	adds	r3, #1
 8006f12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	3301      	adds	r3, #1
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d3e2      	bcc.n	8006ef4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3724      	adds	r7, #36	; 0x24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b08b      	sub	sp, #44	; 0x2c
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	089b      	lsrs	r3, r3, #2
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f62:	2300      	movs	r3, #0
 8006f64:	623b      	str	r3, [r7, #32]
 8006f66:	e014      	b.n	8006f92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	3301      	adds	r3, #1
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	3301      	adds	r3, #1
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	3301      	adds	r3, #1
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	623b      	str	r3, [r7, #32]
 8006f92:	6a3a      	ldr	r2, [r7, #32]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d3e6      	bcc.n	8006f68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f9a:	8bfb      	ldrh	r3, [r7, #30]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01e      	beq.n	8006fde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006faa:	461a      	mov	r2, r3
 8006fac:	f107 0310 	add.w	r3, r7, #16
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	701a      	strb	r2, [r3, #0]
      i++;
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	3301      	adds	r3, #1
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006fd2:	8bfb      	ldrh	r3, [r7, #30]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fd8:	8bfb      	ldrh	r3, [r7, #30]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1ea      	bne.n	8006fb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	372c      	adds	r7, #44	; 0x2c
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4013      	ands	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007004:	68fb      	ldr	r3, [r7, #12]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0301 	and.w	r3, r3, #1
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3301      	adds	r3, #1
 8007040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4a13      	ldr	r2, [pc, #76]	; (8007094 <USB_CoreReset+0x64>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d901      	bls.n	800704e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e01b      	b.n	8007086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	daf2      	bge.n	800703c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f043 0201 	orr.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <USB_CoreReset+0x64>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d901      	bls.n	8007078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e006      	b.n	8007086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b01      	cmp	r3, #1
 8007082:	d0f0      	beq.n	8007066 <USB_CoreReset+0x36>

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	00030d40 	.word	0x00030d40

08007098 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007098:	b084      	sub	sp, #16
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070b8:	461a      	mov	r2, r3
 80070ba:	2300      	movs	r3, #0
 80070bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d018      	beq.n	8007120 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d10a      	bne.n	800710a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007102:	f043 0304 	orr.w	r3, r3, #4
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	e014      	b.n	8007134 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007118:	f023 0304 	bic.w	r3, r3, #4
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e009      	b.n	8007134 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800712e:	f023 0304 	bic.w	r3, r3, #4
 8007132:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007134:	2110      	movs	r1, #16
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff fe5e 	bl	8006df8 <USB_FlushTxFifo>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fe8a 	bl	8006e60 <USB_FlushRxFifo>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	e015      	b.n	8007188 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007168:	461a      	mov	r2, r3
 800716a:	f04f 33ff 	mov.w	r3, #4294967295
 800716e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717c:	461a      	mov	r2, r3
 800717e:	2300      	movs	r3, #0
 8007180:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3301      	adds	r3, #1
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	429a      	cmp	r2, r3
 800718e:	d3e5      	bcc.n	800715c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f04f 32ff 	mov.w	r2, #4294967295
 800719c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a13      	ldr	r2, [pc, #76]	; (8007204 <USB_HostInit+0x16c>)
 80071b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a13      	ldr	r2, [pc, #76]	; (8007208 <USB_HostInit+0x170>)
 80071bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80071c0:	e009      	b.n	80071d6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2280      	movs	r2, #128	; 0x80
 80071c6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a10      	ldr	r2, [pc, #64]	; (800720c <USB_HostInit+0x174>)
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a0f      	ldr	r2, [pc, #60]	; (8007210 <USB_HostInit+0x178>)
 80071d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	f043 0210 	orr.w	r2, r3, #16
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <USB_HostInit+0x17c>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007200:	b004      	add	sp, #16
 8007202:	4770      	bx	lr
 8007204:	01000200 	.word	0x01000200
 8007208:	00e00300 	.word	0x00e00300
 800720c:	00600080 	.word	0x00600080
 8007210:	004000e0 	.word	0x004000e0
 8007214:	a3200008 	.word	0xa3200008

08007218 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d107      	bne.n	800726a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007260:	461a      	mov	r2, r3
 8007262:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007266:	6053      	str	r3, [r2, #4]
 8007268:	e009      	b.n	800727e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d106      	bne.n	800727e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007276:	461a      	mov	r2, r3
 8007278:	f241 7370 	movw	r3, #6000	; 0x1770
 800727c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80072b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80072bc:	2064      	movs	r0, #100	; 0x64
 80072be:	f7fa ffdf 	bl	8002280 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80072ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80072d0:	200a      	movs	r0, #10
 80072d2:	f7fa ffd5 	bl	8002280 <HAL_Delay>

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007304:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d109      	bne.n	8007324 <USB_DriveVbus+0x44>
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d106      	bne.n	8007324 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800731e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007322:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732e:	d109      	bne.n	8007344 <USB_DriveVbus+0x64>
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800733e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007342:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	0c5b      	lsrs	r3, r3, #17
 8007370:	f003 0303 	and.w	r3, r3, #3
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	b29b      	uxth	r3, r3
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	70fb      	strb	r3, [r7, #3]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70bb      	strb	r3, [r7, #2]
 80073ba:	4613      	mov	r3, r2
 80073bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d2:	461a      	mov	r2, r3
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80073da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d87e      	bhi.n	80074e0 <USB_HC_Init+0x13c>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <USB_HC_Init+0x44>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	080074a3 	.word	0x080074a3
 80073f0:	080073f9 	.word	0x080073f9
 80073f4:	08007465 	.word	0x08007465
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007404:	461a      	mov	r2, r3
 8007406:	f240 439d 	movw	r3, #1181	; 0x49d
 800740a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800740c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007410:	2b00      	cmp	r3, #0
 8007412:	da10      	bge.n	8007436 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4413      	add	r3, r2
 800741c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	78fa      	ldrb	r2, [r7, #3]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	440a      	add	r2, r1
 800742a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800742e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007432:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007434:	e057      	b.n	80074e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743e:	2b00      	cmp	r3, #0
 8007440:	d051      	beq.n	80074e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	440a      	add	r2, r1
 8007458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800745c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007460:	60d3      	str	r3, [r2, #12]
      break;
 8007462:	e040      	b.n	80074e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4413      	add	r3, r2
 800746c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007470:	461a      	mov	r2, r3
 8007472:	f240 639d 	movw	r3, #1693	; 0x69d
 8007476:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007478:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800747c:	2b00      	cmp	r3, #0
 800747e:	da34      	bge.n	80074ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	4413      	add	r3, r2
 8007488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	78fa      	ldrb	r2, [r7, #3]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	440a      	add	r2, r1
 8007496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800749a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800749e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80074a0:	e023      	b.n	80074ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ae:	461a      	mov	r2, r3
 80074b0:	f240 2325 	movw	r3, #549	; 0x225
 80074b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da17      	bge.n	80074ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80074dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80074de:	e006      	b.n	80074ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	77fb      	strb	r3, [r7, #31]
      break;
 80074e4:	e004      	b.n	80074f0 <USB_HC_Init+0x14c>
      break;
 80074e6:	bf00      	nop
 80074e8:	e002      	b.n	80074f0 <USB_HC_Init+0x14c>
      break;
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <USB_HC_Init+0x14c>
      break;
 80074ee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	440a      	add	r2, r1
 8007506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800750a:	f043 0302 	orr.w	r3, r3, #2
 800750e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	f003 030f 	and.w	r3, r3, #15
 800751e:	2101      	movs	r1, #1
 8007520:	fa01 f303 	lsl.w	r3, r1, r3
 8007524:	6939      	ldr	r1, [r7, #16]
 8007526:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800752a:	4313      	orrs	r3, r2
 800752c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800753a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800753e:	2b00      	cmp	r3, #0
 8007540:	da03      	bge.n	800754a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	e001      	b.n	800754e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff feff 	bl	8007352 <USB_GetHostSpeed>
 8007554:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007556:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800755a:	2b02      	cmp	r3, #2
 800755c:	d106      	bne.n	800756c <USB_HC_Init+0x1c8>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d003      	beq.n	800756c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	e001      	b.n	8007570 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007570:	787b      	ldrb	r3, [r7, #1]
 8007572:	059b      	lsls	r3, r3, #22
 8007574:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007578:	78bb      	ldrb	r3, [r7, #2]
 800757a:	02db      	lsls	r3, r3, #11
 800757c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007580:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007582:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007586:	049b      	lsls	r3, r3, #18
 8007588:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800758c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800758e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007590:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007594:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	0159      	lsls	r1, r3, #5
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	440b      	add	r3, r1
 80075a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075ac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80075ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d003      	beq.n	80075be <USB_HC_Init+0x21a>
 80075b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d10f      	bne.n	80075de <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80075de:	7ffb      	ldrb	r3, [r7, #31]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08c      	sub	sp, #48	; 0x30
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	785b      	ldrb	r3, [r3, #1]
 80075fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007604:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760e:	2b00      	cmp	r3, #0
 8007610:	d02d      	beq.n	800766e <USB_HC_StartXfer+0x86>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	791b      	ldrb	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d129      	bne.n	800766e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d117      	bne.n	8007650 <USB_HC_StartXfer+0x68>
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	79db      	ldrb	r3, [r3, #7]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <USB_HC_StartXfer+0x48>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	79db      	ldrb	r3, [r3, #7]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d10f      	bne.n	8007650 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	440a      	add	r2, r1
 8007646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <USB_HC_StartXfer+0x86>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	795b      	ldrb	r3, [r3, #5]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d107      	bne.n	800766e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	4619      	mov	r1, r3
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fa0f 	bl	8007a88 <USB_DoPing>
      return HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	e0f8      	b.n	8007860 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d018      	beq.n	80076a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	8912      	ldrh	r2, [r2, #8]
 800767e:	4413      	add	r3, r2
 8007680:	3b01      	subs	r3, #1
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	8912      	ldrh	r2, [r2, #8]
 8007686:	fbb3 f3f2 	udiv	r3, r3, r2
 800768a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800768c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800768e:	8b7b      	ldrh	r3, [r7, #26]
 8007690:	429a      	cmp	r2, r3
 8007692:	d90b      	bls.n	80076ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007694:	8b7b      	ldrh	r3, [r7, #26]
 8007696:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	8912      	ldrh	r2, [r2, #8]
 800769e:	fb03 f202 	mul.w	r2, r3, r2
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	611a      	str	r2, [r3, #16]
 80076a6:	e001      	b.n	80076ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80076a8:	2301      	movs	r3, #1
 80076aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	78db      	ldrb	r3, [r3, #3]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	8912      	ldrh	r2, [r2, #8]
 80076ba:	fb03 f202 	mul.w	r2, r3, r2
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	611a      	str	r2, [r3, #16]
 80076c2:	e003      	b.n	80076cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	695a      	ldr	r2, [r3, #20]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076d6:	04d9      	lsls	r1, r3, #19
 80076d8:	4b63      	ldr	r3, [pc, #396]	; (8007868 <USB_HC_StartXfer+0x280>)
 80076da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	7a9b      	ldrb	r3, [r3, #10]
 80076e2:	075b      	lsls	r3, r3, #29
 80076e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076e8:	69f9      	ldr	r1, [r7, #28]
 80076ea:	0148      	lsls	r0, r1, #5
 80076ec:	6a39      	ldr	r1, [r7, #32]
 80076ee:	4401      	add	r1, r0
 80076f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	68d9      	ldr	r1, [r3, #12]
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	4413      	add	r3, r2
 800770a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770e:	460a      	mov	r2, r1
 8007710:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	bf0c      	ite	eq
 8007722:	2301      	moveq	r3, #1
 8007724:	2300      	movne	r3, #0
 8007726:	b2db      	uxtb	r3, r3
 8007728:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	4413      	add	r3, r2
 8007732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	0151      	lsls	r1, r2, #5
 800773c:	6a3a      	ldr	r2, [r7, #32]
 800773e:	440a      	add	r2, r1
 8007740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007744:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007748:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	4413      	add	r3, r2
 8007752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	7e7b      	ldrb	r3, [r7, #25]
 800775a:	075b      	lsls	r3, r3, #29
 800775c:	69f9      	ldr	r1, [r7, #28]
 800775e:	0148      	lsls	r0, r1, #5
 8007760:	6a39      	ldr	r1, [r7, #32]
 8007762:	4401      	add	r1, r0
 8007764:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007768:	4313      	orrs	r3, r2
 800776a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	4413      	add	r3, r2
 8007774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007782:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	e003      	b.n	800779e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800779c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b2:	461a      	mov	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e04e      	b.n	8007860 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	78db      	ldrb	r3, [r3, #3]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d149      	bne.n	800785e <USB_HC_StartXfer+0x276>
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d045      	beq.n	800785e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	79db      	ldrb	r3, [r3, #7]
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d830      	bhi.n	800783c <USB_HC_StartXfer+0x254>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <USB_HC_StartXfer+0x1f8>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	08007815 	.word	0x08007815
 80077e8:	080077f1 	.word	0x080077f1
 80077ec:	08007815 	.word	0x08007815
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	3303      	adds	r3, #3
 80077f6:	089b      	lsrs	r3, r3, #2
 80077f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80077fa:	8afa      	ldrh	r2, [r7, #22]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	b29b      	uxth	r3, r3
 8007802:	429a      	cmp	r2, r3
 8007804:	d91c      	bls.n	8007840 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f043 0220 	orr.w	r2, r3, #32
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	619a      	str	r2, [r3, #24]
        }
        break;
 8007812:	e015      	b.n	8007840 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	3303      	adds	r3, #3
 800781a:	089b      	lsrs	r3, r3, #2
 800781c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800781e:	8afa      	ldrh	r2, [r7, #22]
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	b29b      	uxth	r3, r3
 800782a:	429a      	cmp	r2, r3
 800782c:	d90a      	bls.n	8007844 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	619a      	str	r2, [r3, #24]
        }
        break;
 800783a:	e003      	b.n	8007844 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800783c:	bf00      	nop
 800783e:	e002      	b.n	8007846 <USB_HC_StartXfer+0x25e>
        break;
 8007840:	bf00      	nop
 8007842:	e000      	b.n	8007846 <USB_HC_StartXfer+0x25e>
        break;
 8007844:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	68d9      	ldr	r1, [r3, #12]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	785a      	ldrb	r2, [r3, #1]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	b29b      	uxth	r3, r3
 8007854:	2000      	movs	r0, #0
 8007856:	9000      	str	r0, [sp, #0]
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff fb31 	bl	8006ec0 <USB_WritePacket>
  }

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3728      	adds	r7, #40	; 0x28
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	1ff80000 	.word	0x1ff80000

0800786c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	b29b      	uxth	r3, r3
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800788e:	b480      	push	{r7}
 8007890:	b089      	sub	sp, #36	; 0x24
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	460b      	mov	r3, r1
 8007898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	0c9b      	lsrs	r3, r3, #18
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	0fdb      	lsrs	r3, r3, #31
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d104      	bne.n	80078e8 <USB_HC_Halt+0x5a>
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e0c8      	b.n	8007a7a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <USB_HC_Halt+0x66>
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d163      	bne.n	80079bc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	440a      	add	r2, r1
 800790a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800790e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007912:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	f040 80ab 	bne.w	8007a78 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d133      	bne.n	8007996 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	4413      	add	r3, r2
 8007936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	0151      	lsls	r1, r2, #5
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	440a      	add	r2, r1
 8007944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800794c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	0151      	lsls	r1, r2, #5
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	440a      	add	r2, r1
 8007964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800796c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3301      	adds	r3, #1
 8007972:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800797a:	d81d      	bhi.n	80079b8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800798e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007992:	d0ec      	beq.n	800796e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007994:	e070      	b.n	8007a78 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079b6:	e05f      	b.n	8007a78 <USB_HC_Halt+0x1ea>
            break;
 80079b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079ba:	e05d      	b.n	8007a78 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d133      	bne.n	8007a54 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a2a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a38:	d81d      	bhi.n	8007a76 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a50:	d0ec      	beq.n	8007a2c <USB_HC_Halt+0x19e>
 8007a52:	e011      	b.n	8007a78 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	e000      	b.n	8007a78 <USB_HC_Halt+0x1ea>
          break;
 8007a76:	bf00      	nop
    }
  }

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3724      	adds	r7, #36	; 0x24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	04da      	lsls	r2, r3, #19
 8007aa4:	4b15      	ldr	r3, [pc, #84]	; (8007afc <USB_DoPing+0x74>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	0151      	lsls	r1, r2, #5
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	440a      	add	r2, r1
 8007ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ab8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ad0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ad8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	371c      	adds	r7, #28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	1ff80000 	.word	0x1ff80000

08007b00 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff f911 	bl	8006d3c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b1a:	2110      	movs	r1, #16
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff f96b 	bl	8006df8 <USB_FlushTxFifo>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff f997 	bl	8006e60 <USB_FlushRxFifo>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61bb      	str	r3, [r7, #24]
 8007b40:	e01f      	b.n	8007b82 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b76:	461a      	mov	r2, r3
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b0f      	cmp	r3, #15
 8007b86:	d9dc      	bls.n	8007b42 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61bb      	str	r3, [r7, #24]
 8007b8c:	e034      	b.n	8007bf8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ba4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bb4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bd4:	d80c      	bhi.n	8007bf0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bec:	d0ec      	beq.n	8007bc8 <USB_StopHost+0xc8>
 8007bee:	e000      	b.n	8007bf2 <USB_StopHost+0xf2>
        break;
 8007bf0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	61bb      	str	r3, [r7, #24]
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	2b0f      	cmp	r3, #15
 8007bfc:	d9c7      	bls.n	8007b8e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c04:	461a      	mov	r2, r3
 8007c06:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff f880 	bl	8006d1a <USB_EnableGlobalInt>

  return ret;
 8007c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c24:	b590      	push	{r4, r7, lr}
 8007c26:	b08b      	sub	sp, #44	; 0x2c
 8007c28:	af04      	add	r7, sp, #16
 8007c2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c36:	7919      	ldrb	r1, [r3, #4]
 8007c38:	23ff      	movs	r3, #255	; 0xff
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 ff4b 	bl	8008ad8 <USBH_FindInterface>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c46:	7dbb      	ldrb	r3, [r7, #22]
 8007c48:	2bff      	cmp	r3, #255	; 0xff
 8007c4a:	d002      	beq.n	8007c52 <USBH_HID_InterfaceInit+0x2e>
 8007c4c:	7dbb      	ldrb	r3, [r7, #22]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d901      	bls.n	8007c56 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c52:	2302      	movs	r3, #2
 8007c54:	e108      	b.n	8007e68 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8007c56:	7dbb      	ldrb	r3, [r7, #22]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 ff20 	bl	8008aa0 <USBH_SelectInterface>
 8007c60:	4603      	mov	r3, r0
 8007c62:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8007c64:	7d7b      	ldrb	r3, [r7, #21]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e0fc      	b.n	8007e68 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007c74:	2034      	movs	r0, #52	; 0x34
 8007c76:	f002 fd87 	bl	800a788 <malloc>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e0ea      	b.n	8007e68 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8007c92:	2234      	movs	r2, #52	; 0x34
 8007c94:	2100      	movs	r1, #0
 8007c96:	6938      	ldr	r0, [r7, #16]
 8007c98:	f002 fd86 	bl	800a7a8 <memset>

  HID_Handle->state = HID_ERROR;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2207      	movs	r2, #7
 8007ca0:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8007ca2:	7dbb      	ldrb	r3, [r7, #22]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	211a      	movs	r1, #26
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	4413      	add	r3, r2
 8007cae:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d103      	bne.n	8007cc0 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	4a6d      	ldr	r2, [pc, #436]	; (8007e70 <USBH_HID_InterfaceInit+0x24c>)
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8007cbe:	e010      	b.n	8007ce2 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8007cc0:	7dbb      	ldrb	r3, [r7, #22]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	211a      	movs	r1, #26
 8007cc6:	fb01 f303 	mul.w	r3, r1, r3
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d103      	bne.n	8007cde <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	4a66      	ldr	r2, [pc, #408]	; (8007e74 <USBH_HID_InterfaceInit+0x250>)
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
 8007cdc:	e001      	b.n	8007ce2 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8007cde:	2302      	movs	r3, #2
 8007ce0:	e0c2      	b.n	8007e68 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2200      	movs	r2, #0
 8007cec:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007cee:	7dbb      	ldrb	r3, [r7, #22]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	211a      	movs	r1, #26
 8007cf4:	fb01 f303 	mul.w	r3, r1, r3
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cfe:	781a      	ldrb	r2, [r3, #0]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d04:	7dbb      	ldrb	r3, [r7, #22]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	211a      	movs	r1, #26
 8007d0a:	fb01 f303 	mul.w	r3, r1, r3
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d14:	881a      	ldrh	r2, [r3, #0]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007d1a:	7dbb      	ldrb	r3, [r7, #22]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	211a      	movs	r1, #26
 8007d20:	fb01 f303 	mul.w	r3, r1, r3
 8007d24:	4413      	add	r3, r2
 8007d26:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	8b9b      	ldrh	r3, [r3, #28]
 8007d36:	2b09      	cmp	r3, #9
 8007d38:	d802      	bhi.n	8007d40 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	220a      	movs	r2, #10
 8007d3e:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8007d40:	7dbb      	ldrb	r3, [r7, #22]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	211a      	movs	r1, #26
 8007d46:	fb01 f303 	mul.w	r3, r1, r3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	bf28      	it	cs
 8007d56:	2302      	movcs	r3, #2
 8007d58:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75fb      	strb	r3, [r7, #23]
 8007d5e:	e07d      	b.n	8007e5c <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8007d60:	7dbb      	ldrb	r3, [r7, #22]
 8007d62:	7df9      	ldrb	r1, [r7, #23]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	3101      	adds	r1, #1
 8007d68:	00c9      	lsls	r1, r1, #3
 8007d6a:	201a      	movs	r0, #26
 8007d6c:	fb00 f303 	mul.w	r3, r0, r3
 8007d70:	440b      	add	r3, r1
 8007d72:	4413      	add	r3, r2
 8007d74:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b25b      	sxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	da35      	bge.n	8007dec <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007d80:	7dbb      	ldrb	r3, [r7, #22]
 8007d82:	7df9      	ldrb	r1, [r7, #23]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	3101      	adds	r1, #1
 8007d88:	00c9      	lsls	r1, r1, #3
 8007d8a:	201a      	movs	r0, #26
 8007d8c:	fb00 f303 	mul.w	r3, r0, r3
 8007d90:	440b      	add	r3, r1
 8007d92:	4413      	add	r3, r2
 8007d94:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007d98:	781a      	ldrb	r2, [r3, #0]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	791b      	ldrb	r3, [r3, #4]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f002 f98e 	bl	800a0c6 <USBH_AllocPipe>
 8007daa:	4603      	mov	r3, r0
 8007dac:	461a      	mov	r2, r3
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	7859      	ldrb	r1, [r3, #1]
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	7918      	ldrb	r0, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	8b12      	ldrh	r2, [r2, #24]
 8007dca:	9202      	str	r2, [sp, #8]
 8007dcc:	2203      	movs	r2, #3
 8007dce:	9201      	str	r2, [sp, #4]
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	4623      	mov	r3, r4
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f002 f946 	bl	800a068 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	2200      	movs	r2, #0
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f002 fc3e 	bl	800a666 <USBH_LL_SetToggle>
 8007dea:	e034      	b.n	8007e56 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007dec:	7dbb      	ldrb	r3, [r7, #22]
 8007dee:	7df9      	ldrb	r1, [r7, #23]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	3101      	adds	r1, #1
 8007df4:	00c9      	lsls	r1, r1, #3
 8007df6:	201a      	movs	r0, #26
 8007df8:	fb00 f303 	mul.w	r3, r0, r3
 8007dfc:	440b      	add	r3, r1
 8007dfe:	4413      	add	r3, r2
 8007e00:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007e04:	781a      	ldrb	r2, [r3, #0]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	78db      	ldrb	r3, [r3, #3]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f002 f958 	bl	800a0c6 <USBH_AllocPipe>
 8007e16:	4603      	mov	r3, r0
 8007e18:	461a      	mov	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	7819      	ldrb	r1, [r3, #0]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	78d8      	ldrb	r0, [r3, #3]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	8b12      	ldrh	r2, [r2, #24]
 8007e36:	9202      	str	r2, [sp, #8]
 8007e38:	2203      	movs	r2, #3
 8007e3a:	9201      	str	r2, [sp, #4]
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4623      	mov	r3, r4
 8007e40:	4602      	mov	r2, r0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f002 f910 	bl	800a068 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f002 fc08 	bl	800a666 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]
 8007e5c:	7dfa      	ldrb	r2, [r7, #23]
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	f4ff af7d 	bcc.w	8007d60 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd90      	pop	{r4, r7, pc}
 8007e70:	08008521 	.word	0x08008521
 8007e74:	08008769 	.word	0x08008769

08007e78 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00e      	beq.n	8007eb0 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f002 f904 	bl	800a0a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	785b      	ldrb	r3, [r3, #1]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f002 f92f 	bl	800a108 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f002 f8f1 	bl	800a0a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f002 f91c 	bl	800a108 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00b      	beq.n	8007efa <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f002 fc54 	bl	800a798 <free>
    phost->pActiveClass->pData = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8007f10:	2301      	movs	r3, #1
 8007f12:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	795b      	ldrb	r3, [r3, #5]
 8007f22:	2b05      	cmp	r3, #5
 8007f24:	d860      	bhi.n	8007fe8 <USBH_HID_ClassRequest+0xe4>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <USBH_HID_ClassRequest+0x28>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f45 	.word	0x08007f45
 8007f30:	08007fe9 	.word	0x08007fe9
 8007f34:	08007f5f 	.word	0x08007f5f
 8007f38:	08007f45 	.word	0x08007f45
 8007f3c:	08007f89 	.word	0x08007f89
 8007f40:	08007fb3 	.word	0x08007fb3
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	331c      	adds	r3, #28
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4610      	mov	r0, r2
 8007f52:	f000 f9cd 	bl	80082f0 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	715a      	strb	r2, [r3, #5]

      break;
 8007f5c:	e04b      	b.n	8007ff6 <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f930 	bl	80081ca <USBH_HID_GetHIDReportDescriptor>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2204      	movs	r2, #4
 8007f78:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8007f7a:	e037      	b.n	8007fec <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d134      	bne.n	8007fec <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8007f82:	2302      	movs	r3, #2
 8007f84:	73fb      	strb	r3, [r7, #15]
      break;
 8007f86:	e031      	b.n	8007fec <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f935 	bl	80081fc <USBH_HID_SetIdle>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d103      	bne.n	8007fa4 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2205      	movs	r2, #5
 8007fa0:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8007fa2:	e025      	b.n	8007ff0 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d122      	bne.n	8007ff0 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2205      	movs	r2, #5
 8007fae:	715a      	strb	r2, [r3, #5]
      break;
 8007fb0:	e01e      	b.n	8007ff0 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f975 	bl	80082a4 <USBH_HID_SetProtocol>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
        status = USBH_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8007fda:	e00b      	b.n	8007ff4 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d108      	bne.n	8007ff4 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe6:	e005      	b.n	8007ff4 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8007fe8:	bf00      	nop
 8007fea:	e004      	b.n	8007ff6 <USBH_HID_ClassRequest+0xf2>
      break;
 8007fec:	bf00      	nop
 8007fee:	e002      	b.n	8007ff6 <USBH_HID_ClassRequest+0xf2>
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e000      	b.n	8007ff6 <USBH_HID_ClassRequest+0xf2>
      break;
 8007ff4:	bf00      	nop
  }

  return status;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	789b      	ldrb	r3, [r3, #2]
 800801a:	2b06      	cmp	r3, #6
 800801c:	f200 80a9 	bhi.w	8008172 <USBH_HID_Process+0x172>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <USBH_HID_Process+0x28>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008045 	.word	0x08008045
 800802c:	08008055 	.word	0x08008055
 8008030:	08008173 	.word	0x08008173
 8008034:	08008173 	.word	0x08008173
 8008038:	080080c5 	.word	0x080080c5
 800803c:	080080af 	.word	0x080080af
 8008040:	080080f3 	.word	0x080080f3
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	2201      	movs	r2, #1
 8008050:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008052:	e093      	b.n	800817c <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	8b1b      	ldrh	r3, [r3, #24]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	2200      	movs	r2, #0
 8008064:	2101      	movs	r1, #1
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f8f0 	bl	800824c <USBH_HID_GetReport>
 800806c:	4603      	mov	r3, r0
 800806e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d103      	bne.n	800807e <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2205      	movs	r2, #5
 800807a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800807c:	e07e      	b.n	800817c <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d105      	bne.n	8008090 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2201      	movs	r2, #1
 8008088:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	75fb      	strb	r3, [r7, #23]
      break;
 800808e:	e075      	b.n	800817c <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b03      	cmp	r3, #3
 8008094:	d105      	bne.n	80080a2 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2205      	movs	r2, #5
 800809a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	75fb      	strb	r3, [r7, #23]
      break;
 80080a0:	e06c      	b.n	800817c <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2207      	movs	r2, #7
 80080a6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80080a8:	2302      	movs	r3, #2
 80080aa:	75fb      	strb	r3, [r7, #23]
      break;
 80080ac:	e066      	b.n	800817c <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d05c      	beq.n	8008176 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	2204      	movs	r2, #4
 80080c0:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080c2:	e058      	b.n	8008176 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 ffa9 	bl	800a02a <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2206      	movs	r2, #6
 80080dc:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 80080f0:	e044      	b.n	800817c <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f002 fa93 	bl	800a624 <USBH_LL_GetURBState>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b01      	cmp	r3, #1
 8008102:	d120      	bne.n	8008146 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f002 f9f8 	bl	800a500 <USBH_LL_GetLastXferSize>
 8008110:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d12e      	bne.n	800817a <USBH_HID_Process+0x17a>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d02b      	beq.n	800817a <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f103 0008 	add.w	r0, r3, #8
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6959      	ldr	r1, [r3, #20]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	8b1b      	ldrh	r3, [r3, #24]
 8008130:	461a      	mov	r2, r3
 8008132:	f000 f9a0 	bl	8008476 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f8 fb58 	bl	80007f4 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8008144:	e019      	b.n	800817a <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	785b      	ldrb	r3, [r3, #1]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f002 fa69 	bl	800a624 <USBH_LL_GetURBState>
 8008152:	4603      	mov	r3, r0
 8008154:	2b05      	cmp	r3, #5
 8008156:	d110      	bne.n	800817a <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	7e9b      	ldrb	r3, [r3, #26]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fa87 	bl	8009672 <USBH_ClrFeature>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d107      	bne.n	800817a <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2204      	movs	r2, #4
 800816e:	709a      	strb	r2, [r3, #2]
      break;
 8008170:	e003      	b.n	800817a <USBH_HID_Process+0x17a>

    default:
      break;
 8008172:	bf00      	nop
 8008174:	e002      	b.n	800817c <USBH_HID_Process+0x17c>
      break;
 8008176:	bf00      	nop
 8008178:	e000      	b.n	800817c <USBH_HID_Process+0x17c>
      break;
 800817a:	bf00      	nop
  }

  return status;
 800817c:	7dfb      	ldrb	r3, [r7, #23]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop

08008188 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	789b      	ldrb	r3, [r3, #2]
 800819e:	2b06      	cmp	r3, #6
 80081a0:	d10c      	bne.n	80081bc <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	8b92      	ldrh	r2, [r2, #28]
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d302      	bcc.n	80081bc <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2204      	movs	r2, #4
 80081ba:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b086      	sub	sp, #24
 80081ce:	af02      	add	r7, sp, #8
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80081dc:	887b      	ldrh	r3, [r7, #2]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4613      	mov	r3, r2
 80081e2:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80081e6:	2101      	movs	r1, #1
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 f9a2 	bl	8009532 <USBH_GetDescriptor>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
 8008208:	4613      	mov	r3, r2
 800820a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2221      	movs	r2, #33	; 0x21
 8008210:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220a      	movs	r2, #10
 8008216:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	b29b      	uxth	r3, r3
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	b29a      	uxth	r2, r3
 8008220:	78bb      	ldrb	r3, [r7, #2]
 8008222:	b29b      	uxth	r3, r3
 8008224:	4313      	orrs	r3, r2
 8008226:	b29a      	uxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008238:	2200      	movs	r2, #0
 800823a:	2100      	movs	r1, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 fce5 	bl	8009c0c <USBH_CtlReq>
 8008242:	4603      	mov	r3, r0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	607b      	str	r3, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	72fb      	strb	r3, [r7, #11]
 800825a:	4613      	mov	r3, r2
 800825c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	22a1      	movs	r2, #161	; 0xa1
 8008262:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2201      	movs	r2, #1
 8008268:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	b29b      	uxth	r3, r3
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	b29a      	uxth	r2, r3
 8008272:	7abb      	ldrb	r3, [r7, #10]
 8008274:	b29b      	uxth	r3, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8008284:	7e3b      	ldrb	r3, [r7, #24]
 8008286:	b29a      	uxth	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800828c:	7e3b      	ldrb	r3, [r7, #24]
 800828e:	b29b      	uxth	r3, r3
 8008290:	461a      	mov	r2, r3
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f001 fcb9 	bl	8009c0c <USBH_CtlReq>
 800829a:	4603      	mov	r3, r0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2221      	movs	r2, #33	; 0x21
 80082b4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	220b      	movs	r2, #11
 80082ba:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	825a      	strh	r2, [r3, #18]
 80082c8:	e002      	b.n	80082d0 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80082dc:	2200      	movs	r2, #0
 80082de:	2100      	movs	r1, #0
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fc93 	bl	8009c0c <USBH_CtlReq>
 80082e6:	4603      	mov	r3, r0

}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	3302      	adds	r3, #2
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b29a      	uxth	r2, r3
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	3303      	adds	r3, #3
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	b29b      	uxth	r3, r3
 8008312:	4313      	orrs	r3, r2
 8008314:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8008316:	897b      	ldrh	r3, [r7, #10]
 8008318:	2b09      	cmp	r3, #9
 800831a:	d943      	bls.n	80083a4 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 800831c:	2309      	movs	r3, #9
 800831e:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8008320:	e03c      	b.n	800839c <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008322:	f107 0308 	add.w	r3, r7, #8
 8008326:	4619      	mov	r1, r3
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f001 fc54 	bl	8009bd6 <USBH_GetNextDesc>
 800832e:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b21      	cmp	r3, #33	; 0x21
 8008336:	d131      	bne.n	800839c <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	785a      	ldrb	r2, [r3, #1]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3302      	adds	r3, #2
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3303      	adds	r3, #3
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	b29b      	uxth	r3, r3
 800835c:	4313      	orrs	r3, r2
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	791a      	ldrb	r2, [r3, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	795a      	ldrb	r2, [r3, #5]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	799a      	ldrb	r2, [r3, #6]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3307      	adds	r3, #7
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3308      	adds	r3, #8
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	b29b      	uxth	r3, r3
 8008390:	4313      	orrs	r3, r2
 8008392:	b29a      	uxth	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	811a      	strh	r2, [r3, #8]
        break;
 8008398:	bf00      	nop
      }
    }
  }
}
 800839a:	e003      	b.n	80083a4 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 800839c:	893b      	ldrh	r3, [r7, #8]
 800839e:	897a      	ldrh	r2, [r7, #10]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d8be      	bhi.n	8008322 <USBH_HID_ParseHIDDesc+0x32>
}
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	601a      	str	r2, [r3, #0]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	7a9b      	ldrb	r3, [r3, #10]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d131      	bne.n	8008462 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8008404:	2300      	movs	r3, #0
 8008406:	82fb      	strh	r3, [r7, #22]
 8008408:	e027      	b.n	800845a <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	88da      	ldrh	r2, [r3, #6]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	889b      	ldrh	r3, [r3, #4]
 8008412:	429a      	cmp	r2, r3
 8008414:	d019      	beq.n	800844a <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	88d2      	ldrh	r2, [r2, #6]
 800841e:	441a      	add	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	1c59      	adds	r1, r3, #1
 8008424:	6139      	str	r1, [r7, #16]
 8008426:	7812      	ldrb	r2, [r2, #0]
 8008428:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	88db      	ldrh	r3, [r3, #6]
 800842e:	3301      	adds	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	88da      	ldrh	r2, [r3, #6]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	891b      	ldrh	r3, [r3, #8]
 800843e:	429a      	cmp	r2, r3
 8008440:	d108      	bne.n	8008454 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	80da      	strh	r2, [r3, #6]
 8008448:	e004      	b.n	8008454 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	729a      	strb	r2, [r3, #10]
        return i;
 8008450:	8afb      	ldrh	r3, [r7, #22]
 8008452:	e00a      	b.n	800846a <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8008454:	8afb      	ldrh	r3, [r7, #22]
 8008456:	3301      	adds	r3, #1
 8008458:	82fb      	strh	r3, [r7, #22]
 800845a:	8afa      	ldrh	r2, [r7, #22]
 800845c:	88fb      	ldrh	r3, [r7, #6]
 800845e:	429a      	cmp	r2, r3
 8008460:	d3d3      	bcc.n	800840a <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8008468:	88fb      	ldrh	r3, [r7, #6]
}
 800846a:	4618      	mov	r0, r3
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8008476:	b480      	push	{r7}
 8008478:	b087      	sub	sp, #28
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	7a9b      	ldrb	r3, [r3, #10]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d13c      	bne.n	800850a <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8008496:	2300      	movs	r3, #0
 8008498:	82fb      	strh	r3, [r7, #22]
 800849a:	e032      	b.n	8008502 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	889b      	ldrh	r3, [r3, #4]
 80084a0:	3301      	adds	r3, #1
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	88d2      	ldrh	r2, [r2, #6]
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d00a      	beq.n	80084c0 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	889b      	ldrh	r3, [r3, #4]
 80084ae:	3301      	adds	r3, #1
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d108      	bne.n	80084ca <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	88db      	ldrh	r3, [r3, #6]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	729a      	strb	r2, [r3, #10]
        return i;
 80084c6:	8afb      	ldrh	r3, [r7, #22]
 80084c8:	e023      	b.n	8008512 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	613a      	str	r2, [r7, #16]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	6812      	ldr	r2, [r2, #0]
 80084d4:	68f9      	ldr	r1, [r7, #12]
 80084d6:	8889      	ldrh	r1, [r1, #4]
 80084d8:	440a      	add	r2, r1
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	7013      	strb	r3, [r2, #0]
        f->head++;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	889b      	ldrh	r3, [r3, #4]
 80084e2:	3301      	adds	r3, #1
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	889a      	ldrh	r2, [r3, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	891b      	ldrh	r3, [r3, #8]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d102      	bne.n	80084fc <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80084fc:	8afb      	ldrh	r3, [r7, #22]
 80084fe:	3301      	adds	r3, #1
 8008500:	82fb      	strh	r3, [r7, #22]
 8008502:	8afa      	ldrh	r2, [r7, #22]
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	429a      	cmp	r2, r3
 8008508:	d3c8      	bcc.n	800849c <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8008510:	88fb      	ldrh	r3, [r7, #6]
}
 8008512:	4618      	mov	r0, r3
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8008532:	4b22      	ldr	r3, [pc, #136]	; (80085bc <USBH_HID_KeybdInit+0x9c>)
 8008534:	2200      	movs	r2, #0
 8008536:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8008538:	4b20      	ldr	r3, [pc, #128]	; (80085bc <USBH_HID_KeybdInit+0x9c>)
 800853a:	2200      	movs	r2, #0
 800853c:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800853e:	4b1f      	ldr	r3, [pc, #124]	; (80085bc <USBH_HID_KeybdInit+0x9c>)
 8008540:	2200      	movs	r2, #0
 8008542:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8008544:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <USBH_HID_KeybdInit+0x9c>)
 8008546:	2200      	movs	r2, #0
 8008548:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800854a:	4b1c      	ldr	r3, [pc, #112]	; (80085bc <USBH_HID_KeybdInit+0x9c>)
 800854c:	2200      	movs	r2, #0
 800854e:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8008550:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <USBH_HID_KeybdInit+0x9c>)
 8008552:	2200      	movs	r2, #0
 8008554:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8008556:	4b19      	ldr	r3, [pc, #100]	; (80085bc <USBH_HID_KeybdInit+0x9c>)
 8008558:	2200      	movs	r2, #0
 800855a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800855c:	4b17      	ldr	r3, [pc, #92]	; (80085bc <USBH_HID_KeybdInit+0x9c>)
 800855e:	2200      	movs	r2, #0
 8008560:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	e00c      	b.n	8008582 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8008568:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <USBH_HID_KeybdInit+0xa0>)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2100      	movs	r1, #0
 800856e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8008572:	4a14      	ldr	r2, [pc, #80]	; (80085c4 <USBH_HID_KeybdInit+0xa4>)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2100      	movs	r1, #0
 8008578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3301      	adds	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d9ef      	bls.n	8008568 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	8b1b      	ldrh	r3, [r3, #24]
 800858c:	2b08      	cmp	r3, #8
 800858e:	d902      	bls.n	8008596 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2208      	movs	r2, #8
 8008594:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a0a      	ldr	r2, [pc, #40]	; (80085c4 <USBH_HID_KeybdInit+0xa4>)
 800859a:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f103 0008 	add.w	r0, r3, #8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085a8:	2250      	movs	r2, #80	; 0x50
 80085aa:	4619      	mov	r1, r3
 80085ac:	f7ff fefe 	bl	80083ac <USBH_HID_FifoInit>

  return USBH_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200005f0 	.word	0x200005f0
 80085c0:	20000608 	.word	0x20000608
 80085c4:	20000600 	.word	0x20000600

080085c8 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f80d 	bl	80085f0 <USBH_HID_KeybdDecode>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 80085dc:	4b03      	ldr	r3, [pc, #12]	; (80085ec <USBH_HID_GetKeybdInfo+0x24>)
 80085de:	e000      	b.n	80085e2 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 80085e0:	2300      	movs	r3, #0
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	200005f0 	.word	0x200005f0

080085f0 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	8b1b      	ldrh	r3, [r3, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 800860a:	2302      	movs	r3, #2
 800860c:	e066      	b.n	80086dc <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f103 0008 	add.w	r0, r3, #8
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	8b1b      	ldrh	r3, [r3, #24]
 8008618:	461a      	mov	r2, r3
 800861a:	4932      	ldr	r1, [pc, #200]	; (80086e4 <USBH_HID_KeybdDecode+0xf4>)
 800861c:	f7ff fee2 	bl	80083e4 <USBH_HID_FifoRead>
 8008620:	4603      	mov	r3, r0
 8008622:	461a      	mov	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	8b1b      	ldrh	r3, [r3, #24]
 8008628:	429a      	cmp	r2, r3
 800862a:	d156      	bne.n	80086da <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800862c:	2100      	movs	r1, #0
 800862e:	482e      	ldr	r0, [pc, #184]	; (80086e8 <USBH_HID_KeybdDecode+0xf8>)
 8008630:	f000 f8e4 	bl	80087fc <HID_ReadItem>
 8008634:	4603      	mov	r3, r0
 8008636:	b2da      	uxtb	r2, r3
 8008638:	4b2c      	ldr	r3, [pc, #176]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 800863a:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800863c:	2100      	movs	r1, #0
 800863e:	482c      	ldr	r0, [pc, #176]	; (80086f0 <USBH_HID_KeybdDecode+0x100>)
 8008640:	f000 f8dc 	bl	80087fc <HID_ReadItem>
 8008644:	4603      	mov	r3, r0
 8008646:	b2da      	uxtb	r2, r3
 8008648:	4b28      	ldr	r3, [pc, #160]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 800864a:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800864c:	2100      	movs	r1, #0
 800864e:	4829      	ldr	r0, [pc, #164]	; (80086f4 <USBH_HID_KeybdDecode+0x104>)
 8008650:	f000 f8d4 	bl	80087fc <HID_ReadItem>
 8008654:	4603      	mov	r3, r0
 8008656:	b2da      	uxtb	r2, r3
 8008658:	4b24      	ldr	r3, [pc, #144]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 800865a:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800865c:	2100      	movs	r1, #0
 800865e:	4826      	ldr	r0, [pc, #152]	; (80086f8 <USBH_HID_KeybdDecode+0x108>)
 8008660:	f000 f8cc 	bl	80087fc <HID_ReadItem>
 8008664:	4603      	mov	r3, r0
 8008666:	b2da      	uxtb	r2, r3
 8008668:	4b20      	ldr	r3, [pc, #128]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 800866a:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800866c:	2100      	movs	r1, #0
 800866e:	4823      	ldr	r0, [pc, #140]	; (80086fc <USBH_HID_KeybdDecode+0x10c>)
 8008670:	f000 f8c4 	bl	80087fc <HID_ReadItem>
 8008674:	4603      	mov	r3, r0
 8008676:	b2da      	uxtb	r2, r3
 8008678:	4b1c      	ldr	r3, [pc, #112]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 800867a:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800867c:	2100      	movs	r1, #0
 800867e:	4820      	ldr	r0, [pc, #128]	; (8008700 <USBH_HID_KeybdDecode+0x110>)
 8008680:	f000 f8bc 	bl	80087fc <HID_ReadItem>
 8008684:	4603      	mov	r3, r0
 8008686:	b2da      	uxtb	r2, r3
 8008688:	4b18      	ldr	r3, [pc, #96]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 800868a:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800868c:	2100      	movs	r1, #0
 800868e:	481d      	ldr	r0, [pc, #116]	; (8008704 <USBH_HID_KeybdDecode+0x114>)
 8008690:	f000 f8b4 	bl	80087fc <HID_ReadItem>
 8008694:	4603      	mov	r3, r0
 8008696:	b2da      	uxtb	r2, r3
 8008698:	4b14      	ldr	r3, [pc, #80]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 800869a:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800869c:	2100      	movs	r1, #0
 800869e:	481a      	ldr	r0, [pc, #104]	; (8008708 <USBH_HID_KeybdDecode+0x118>)
 80086a0:	f000 f8ac 	bl	80087fc <HID_ReadItem>
 80086a4:	4603      	mov	r3, r0
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	4b10      	ldr	r3, [pc, #64]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 80086aa:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]
 80086b0:	e00e      	b.n	80086d0 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	4619      	mov	r1, r3
 80086b6:	4815      	ldr	r0, [pc, #84]	; (800870c <USBH_HID_KeybdDecode+0x11c>)
 80086b8:	f000 f8a0 	bl	80087fc <HID_ReadItem>
 80086bc:	4602      	mov	r2, r0
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	b2d1      	uxtb	r1, r2
 80086c2:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <USBH_HID_KeybdDecode+0xfc>)
 80086c4:	4413      	add	r3, r2
 80086c6:	460a      	mov	r2, r1
 80086c8:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	3301      	adds	r3, #1
 80086ce:	73fb      	strb	r3, [r7, #15]
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d9ed      	bls.n	80086b2 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e000      	b.n	80086dc <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 80086da:	2302      	movs	r3, #2
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000608 	.word	0x20000608
 80086e8:	0800b388 	.word	0x0800b388
 80086ec:	200005f0 	.word	0x200005f0
 80086f0:	0800b3a8 	.word	0x0800b3a8
 80086f4:	0800b3c8 	.word	0x0800b3c8
 80086f8:	0800b3e8 	.word	0x0800b3e8
 80086fc:	0800b408 	.word	0x0800b408
 8008700:	0800b428 	.word	0x0800b428
 8008704:	0800b448 	.word	0x0800b448
 8008708:	0800b468 	.word	0x0800b468
 800870c:	0800b488 	.word	0x0800b488

08008710 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	789b      	ldrb	r3, [r3, #2]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <USBH_HID_GetASCIICode+0x18>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	799b      	ldrb	r3, [r3, #6]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d009      	beq.n	800873c <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7a5b      	ldrb	r3, [r3, #9]
 800872c:	461a      	mov	r2, r3
 800872e:	4b0b      	ldr	r3, [pc, #44]	; (800875c <USBH_HID_GetASCIICode+0x4c>)
 8008730:	5c9b      	ldrb	r3, [r3, r2]
 8008732:	461a      	mov	r2, r3
 8008734:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <USBH_HID_GetASCIICode+0x50>)
 8008736:	5c9b      	ldrb	r3, [r3, r2]
 8008738:	73fb      	strb	r3, [r7, #15]
 800873a:	e008      	b.n	800874e <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7a5b      	ldrb	r3, [r3, #9]
 8008740:	461a      	mov	r2, r3
 8008742:	4b06      	ldr	r3, [pc, #24]	; (800875c <USBH_HID_GetASCIICode+0x4c>)
 8008744:	5c9b      	ldrb	r3, [r3, r2]
 8008746:	461a      	mov	r2, r3
 8008748:	4b06      	ldr	r3, [pc, #24]	; (8008764 <USBH_HID_GetASCIICode+0x54>)
 800874a:	5c9b      	ldrb	r3, [r3, r2]
 800874c:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	0800b5b0 	.word	0x0800b5b0
 8008760:	0800b52c 	.word	0x0800b52c
 8008764:	0800b4a8 	.word	0x0800b4a8

08008768 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800877a:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <USBH_HID_MouseInit+0x88>)
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8008780:	4b1b      	ldr	r3, [pc, #108]	; (80087f0 <USBH_HID_MouseInit+0x88>)
 8008782:	2200      	movs	r2, #0
 8008784:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8008786:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <USBH_HID_MouseInit+0x88>)
 8008788:	2200      	movs	r2, #0
 800878a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800878c:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <USBH_HID_MouseInit+0x88>)
 800878e:	2200      	movs	r2, #0
 8008790:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8008792:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <USBH_HID_MouseInit+0x88>)
 8008794:	2200      	movs	r2, #0
 8008796:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e00c      	b.n	80087b8 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800879e:	4a15      	ldr	r2, [pc, #84]	; (80087f4 <USBH_HID_MouseInit+0x8c>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2100      	movs	r1, #0
 80087a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80087a8:	4a13      	ldr	r2, [pc, #76]	; (80087f8 <USBH_HID_MouseInit+0x90>)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2100      	movs	r1, #0
 80087ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d9ef      	bls.n	800879e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	8b1b      	ldrh	r3, [r3, #24]
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d902      	bls.n	80087cc <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2208      	movs	r2, #8
 80087ca:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4a0a      	ldr	r2, [pc, #40]	; (80087f8 <USBH_HID_MouseInit+0x90>)
 80087d0:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f103 0008 	add.w	r0, r3, #8
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087de:	2250      	movs	r2, #80	; 0x50
 80087e0:	4619      	mov	r1, r3
 80087e2:	f7ff fde3 	bl	80083ac <USBH_HID_FifoInit>

  return USBH_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20000610 	.word	0x20000610
 80087f4:	20000618 	.word	0x20000618
 80087f8:	20000620 	.word	0x20000620

080087fc <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b089      	sub	sp, #36	; 0x24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7a1b      	ldrb	r3, [r3, #8]
 800881a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	7a5b      	ldrb	r3, [r3, #9]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01a      	beq.n	800885a <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7a5b      	ldrb	r3, [r3, #9]
 8008828:	78fa      	ldrb	r2, [r7, #3]
 800882a:	429a      	cmp	r2, r3
 800882c:	d301      	bcc.n	8008832 <HID_ReadItem+0x36>
    {
      return (0U);
 800882e:	2300      	movs	r3, #0
 8008830:	e078      	b.n	8008924 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6852      	ldr	r2, [r2, #4]
 8008838:	fb02 f303 	mul.w	r3, r2, r3
 800883c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800883e:	7cfb      	ldrb	r3, [r7, #19]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	08db      	lsrs	r3, r3, #3
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4413      	add	r3, r2
 800884e:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 0307 	and.w	r3, r3, #7
 8008858:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800885a:	2300      	movs	r3, #0
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	e00a      	b.n	8008876 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	fa02 f303 	lsl.w	r3, r2, r3
 800886e:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	3301      	adds	r3, #1
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	2b00      	cmp	r3, #0
 8008880:	d004      	beq.n	800888c <HID_ReadItem+0x90>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	08db      	lsrs	r3, r3, #3
 8008888:	3301      	adds	r3, #1
 800888a:	e002      	b.n	8008892 <HID_ReadItem+0x96>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	08db      	lsrs	r3, r3, #3
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	4293      	cmp	r3, r2
 8008896:	d8e3      	bhi.n	8008860 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8008898:	7cfb      	ldrb	r3, [r7, #19]
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	40da      	lsrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f04f 31ff 	mov.w	r1, #4294967295
 80088a6:	fa01 f303 	lsl.w	r3, r1, r3
 80088aa:	43db      	mvns	r3, r3
 80088ac:	4013      	ands	r3, r2
 80088ae:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d304      	bcc.n	80088c4 <HID_ReadItem+0xc8>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d901      	bls.n	80088c8 <HID_ReadItem+0xcc>
  {
    return (0U);
 80088c4:	2300      	movs	r3, #0
 80088c6:	e02d      	b.n	8008924 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7a9b      	ldrb	r3, [r3, #10]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01e      	beq.n	800890e <HID_ReadItem+0x112>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	fa22 f303 	lsr.w	r3, r2, r3
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d014      	beq.n	800890e <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	fa02 f303 	lsl.w	r3, r2, r3
 80088ee:	425b      	negs	r3, r3
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	e010      	b.n	8008924 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	fb02 f303 	mul.w	r3, r2, r3
 800890c:	e00a      	b.n	8008924 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HID_ReadItem+0x11e>
    {
      return (val);
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	e004      	b.n	8008924 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8008924:	4618      	mov	r0, r3
 8008926:	3724      	adds	r7, #36	; 0x24
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008944:	2302      	movs	r3, #2
 8008946:	e029      	b.n	800899c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	79fa      	ldrb	r2, [r7, #7]
 800894c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f81f 	bl	80089a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f001 fcff 	bl	800a398 <USBH_LL_Init>

  return USBH_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e009      	b.n	80089ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	33e0      	adds	r3, #224	; 0xe0
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	2200      	movs	r2, #0
 80089c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b0f      	cmp	r3, #15
 80089ce:	d9f2      	bls.n	80089b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	e009      	b.n	80089ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3301      	adds	r3, #1
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f0:	d3f1      	bcc.n	80089d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2240      	movs	r2, #64	; 0x40
 8008a16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d016      	beq.n	8008a8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10e      	bne.n	8008a88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a70:	1c59      	adds	r1, r3, #1
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	33de      	adds	r3, #222	; 0xde
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
 8008a86:	e004      	b.n	8008a92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	73fb      	strb	r3, [r7, #15]
 8008a8c:	e001      	b.n	8008a92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d204      	bcs.n	8008ac6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008ac4:	e001      	b.n	8008aca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	70fb      	strb	r3, [r7, #3]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70bb      	strb	r3, [r7, #2]
 8008aee:	4613      	mov	r3, r2
 8008af0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b02:	e025      	b.n	8008b50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	221a      	movs	r2, #26
 8008b08:	fb02 f303 	mul.w	r3, r2, r3
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	3302      	adds	r3, #2
 8008b14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	795b      	ldrb	r3, [r3, #5]
 8008b1a:	78fa      	ldrb	r2, [r7, #3]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d002      	beq.n	8008b26 <USBH_FindInterface+0x4e>
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	2bff      	cmp	r3, #255	; 0xff
 8008b24:	d111      	bne.n	8008b4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b2a:	78ba      	ldrb	r2, [r7, #2]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d002      	beq.n	8008b36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b30:	78bb      	ldrb	r3, [r7, #2]
 8008b32:	2bff      	cmp	r3, #255	; 0xff
 8008b34:	d109      	bne.n	8008b4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b3a:	787a      	ldrb	r2, [r7, #1]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d002      	beq.n	8008b46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b40:	787b      	ldrb	r3, [r7, #1]
 8008b42:	2bff      	cmp	r3, #255	; 0xff
 8008b44:	d101      	bne.n	8008b4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	e006      	b.n	8008b58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d9d6      	bls.n	8008b04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b56:	23ff      	movs	r3, #255	; 0xff
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fc4f 	bl	800a410 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008b72:	2101      	movs	r1, #1
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fd68 	bl	800a64a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af04      	add	r7, sp, #16
 8008b8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d102      	bne.n	8008ba6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b0b      	cmp	r3, #11
 8008bae:	f200 81be 	bhi.w	8008f2e <USBH_Process+0x3aa>
 8008bb2:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <USBH_Process+0x34>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008be9 	.word	0x08008be9
 8008bbc:	08008c1b 	.word	0x08008c1b
 8008bc0:	08008c83 	.word	0x08008c83
 8008bc4:	08008ec9 	.word	0x08008ec9
 8008bc8:	08008f2f 	.word	0x08008f2f
 8008bcc:	08008d27 	.word	0x08008d27
 8008bd0:	08008e6f 	.word	0x08008e6f
 8008bd4:	08008d5d 	.word	0x08008d5d
 8008bd8:	08008d7d 	.word	0x08008d7d
 8008bdc:	08008d9d 	.word	0x08008d9d
 8008be0:	08008de1 	.word	0x08008de1
 8008be4:	08008eb1 	.word	0x08008eb1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 819e 	beq.w	8008f32 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008bfc:	20c8      	movs	r0, #200	; 0xc8
 8008bfe:	f001 fd62 	bl	800a6c6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fc61 	bl	800a4ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c18:	e18b      	b.n	8008f32 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d107      	bne.n	8008c34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c32:	e18d      	b.n	8008f50 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c3e:	d914      	bls.n	8008c6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c46:	3301      	adds	r3, #1
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d903      	bls.n	8008c62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	220d      	movs	r2, #13
 8008c5e:	701a      	strb	r2, [r3, #0]
      break;
 8008c60:	e176      	b.n	8008f50 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
      break;
 8008c68:	e172      	b.n	8008f50 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c70:	f103 020a 	add.w	r2, r3, #10
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008c7a:	200a      	movs	r0, #10
 8008c7c:	f001 fd23 	bl	800a6c6 <USBH_Delay>
      break;
 8008c80:	e166      	b.n	8008f50 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c92:	2104      	movs	r1, #4
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c98:	2064      	movs	r0, #100	; 0x64
 8008c9a:	f001 fd14 	bl	800a6c6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 fbec 	bl	800a47c <USBH_LL_GetSpeed>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2205      	movs	r2, #5
 8008cb2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 fa05 	bl	800a0c6 <USBH_AllocPipe>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008cc4:	2180      	movs	r1, #128	; 0x80
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 f9fd 	bl	800a0c6 <USBH_AllocPipe>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7919      	ldrb	r1, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ce8:	b292      	uxth	r2, r2
 8008cea:	9202      	str	r2, [sp, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	9201      	str	r2, [sp, #4]
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2280      	movs	r2, #128	; 0x80
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 f9b6 	bl	800a068 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	7959      	ldrb	r1, [r3, #5]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d10:	b292      	uxth	r2, r2
 8008d12:	9202      	str	r2, [sp, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	9201      	str	r2, [sp, #4]
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f9a2 	bl	800a068 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d24:	e114      	b.n	8008f50 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f918 	bl	8008f5c <USBH_HandleEnum>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 80fe 	bne.w	8008f36 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d103      	bne.n	8008d54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2208      	movs	r2, #8
 8008d50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d52:	e0f0      	b.n	8008f36 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2207      	movs	r2, #7
 8008d58:	701a      	strb	r2, [r3, #0]
      break;
 8008d5a:	e0ec      	b.n	8008f36 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80e9 	beq.w	8008f3a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d6e:	2101      	movs	r1, #1
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2208      	movs	r2, #8
 8008d78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008d7a:	e0de      	b.n	8008f3a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fc2c 	bl	80095e4 <USBH_SetCfg>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 80d5 	bne.w	8008f3e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2209      	movs	r2, #9
 8008d98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d9a:	e0d0      	b.n	8008f3e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d016      	beq.n	8008dd8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008daa:	2101      	movs	r1, #1
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fc3c 	bl	800962a <USBH_SetFeature>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d103      	bne.n	8008dc6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dc4:	e0bd      	b.n	8008f42 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	f040 80b9 	bne.w	8008f42 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	220a      	movs	r2, #10
 8008dd4:	701a      	strb	r2, [r3, #0]
      break;
 8008dd6:	e0b4      	b.n	8008f42 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	220a      	movs	r2, #10
 8008ddc:	701a      	strb	r2, [r3, #0]
      break;
 8008dde:	e0b0      	b.n	8008f42 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 80ad 	beq.w	8008f46 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]
 8008df8:	e016      	b.n	8008e28 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008dfa:	7bfa      	ldrb	r2, [r7, #15]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32de      	adds	r2, #222	; 0xde
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	791a      	ldrb	r2, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d108      	bne.n	8008e22 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e10:	7bfa      	ldrb	r2, [r7, #15]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	32de      	adds	r2, #222	; 0xde
 8008e16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008e20:	e005      	b.n	8008e2e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	3301      	adds	r3, #1
 8008e26:	73fb      	strb	r3, [r7, #15]
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0e5      	beq.n	8008dfa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d016      	beq.n	8008e66 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	4798      	blx	r3
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d109      	bne.n	8008e5e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2206      	movs	r2, #6
 8008e4e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e56:	2103      	movs	r1, #3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e5c:	e073      	b.n	8008f46 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	220d      	movs	r2, #13
 8008e62:	701a      	strb	r2, [r3, #0]
      break;
 8008e64:	e06f      	b.n	8008f46 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	220d      	movs	r2, #13
 8008e6a:	701a      	strb	r2, [r3, #0]
      break;
 8008e6c:	e06b      	b.n	8008f46 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d017      	beq.n	8008ea8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	4798      	blx	r3
 8008e84:	4603      	mov	r3, r0
 8008e86:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d103      	bne.n	8008e98 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	220b      	movs	r2, #11
 8008e94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e96:	e058      	b.n	8008f4a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d154      	bne.n	8008f4a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	220d      	movs	r2, #13
 8008ea4:	701a      	strb	r2, [r3, #0]
      break;
 8008ea6:	e050      	b.n	8008f4a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	220d      	movs	r2, #13
 8008eac:	701a      	strb	r2, [r3, #0]
      break;
 8008eae:	e04c      	b.n	8008f4a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d049      	beq.n	8008f4e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
      }
      break;
 8008ec6:	e042      	b.n	8008f4e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff fd67 	bl	80089a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d009      	beq.n	8008ef4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d005      	beq.n	8008f0a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f04:	2105      	movs	r1, #5
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d107      	bne.n	8008f26 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fe20 	bl	8008b64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f24:	e014      	b.n	8008f50 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f001 fa72 	bl	800a410 <USBH_LL_Start>
      break;
 8008f2c:	e010      	b.n	8008f50 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f2e:	bf00      	nop
 8008f30:	e00e      	b.n	8008f50 <USBH_Process+0x3cc>
      break;
 8008f32:	bf00      	nop
 8008f34:	e00c      	b.n	8008f50 <USBH_Process+0x3cc>
      break;
 8008f36:	bf00      	nop
 8008f38:	e00a      	b.n	8008f50 <USBH_Process+0x3cc>
    break;
 8008f3a:	bf00      	nop
 8008f3c:	e008      	b.n	8008f50 <USBH_Process+0x3cc>
      break;
 8008f3e:	bf00      	nop
 8008f40:	e006      	b.n	8008f50 <USBH_Process+0x3cc>
      break;
 8008f42:	bf00      	nop
 8008f44:	e004      	b.n	8008f50 <USBH_Process+0x3cc>
      break;
 8008f46:	bf00      	nop
 8008f48:	e002      	b.n	8008f50 <USBH_Process+0x3cc>
      break;
 8008f4a:	bf00      	nop
 8008f4c:	e000      	b.n	8008f50 <USBH_Process+0x3cc>
      break;
 8008f4e:	bf00      	nop
  }
  return USBH_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop

08008f5c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af04      	add	r7, sp, #16
 8008f62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f64:	2301      	movs	r3, #1
 8008f66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	2b07      	cmp	r3, #7
 8008f72:	f200 81c1 	bhi.w	80092f8 <USBH_HandleEnum+0x39c>
 8008f76:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <USBH_HandleEnum+0x20>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08008f9d 	.word	0x08008f9d
 8008f80:	0800905b 	.word	0x0800905b
 8008f84:	080090c5 	.word	0x080090c5
 8008f88:	08009153 	.word	0x08009153
 8008f8c:	080091bd 	.word	0x080091bd
 8008f90:	0800922d 	.word	0x0800922d
 8008f94:	08009273 	.word	0x08009273
 8008f98:	080092b9 	.word	0x080092b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f9c:	2108      	movs	r1, #8
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa50 	bl	8009444 <USBH_Get_DevDesc>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d130      	bne.n	8009010 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	7919      	ldrb	r1, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fd2:	b292      	uxth	r2, r2
 8008fd4:	9202      	str	r2, [sp, #8]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	9201      	str	r2, [sp, #4]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2280      	movs	r2, #128	; 0x80
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f841 	bl	800a068 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7959      	ldrb	r1, [r3, #5]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ffa:	b292      	uxth	r2, r2
 8008ffc:	9202      	str	r2, [sp, #8]
 8008ffe:	2200      	movs	r2, #0
 8009000:	9201      	str	r2, [sp, #4]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	4603      	mov	r3, r0
 8009006:	2200      	movs	r2, #0
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 f82d 	bl	800a068 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800900e:	e175      	b.n	80092fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	2b03      	cmp	r3, #3
 8009014:	f040 8172 	bne.w	80092fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800901e:	3301      	adds	r3, #1
 8009020:	b2da      	uxtb	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800902e:	2b03      	cmp	r3, #3
 8009030:	d903      	bls.n	800903a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	220d      	movs	r2, #13
 8009036:	701a      	strb	r2, [r3, #0]
      break;
 8009038:	e160      	b.n	80092fc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	795b      	ldrb	r3, [r3, #5]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 f861 	bl	800a108 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	791b      	ldrb	r3, [r3, #4]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f85b 	bl	800a108 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	701a      	strb	r2, [r3, #0]
      break;
 8009058:	e150      	b.n	80092fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800905a:	2112      	movs	r1, #18
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f9f1 	bl	8009444 <USBH_Get_DevDesc>
 8009062:	4603      	mov	r3, r0
 8009064:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009072:	e145      	b.n	8009300 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b03      	cmp	r3, #3
 8009078:	f040 8142 	bne.w	8009300 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009082:	3301      	adds	r3, #1
 8009084:	b2da      	uxtb	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009092:	2b03      	cmp	r3, #3
 8009094:	d903      	bls.n	800909e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	220d      	movs	r2, #13
 800909a:	701a      	strb	r2, [r3, #0]
      break;
 800909c:	e130      	b.n	8009300 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	795b      	ldrb	r3, [r3, #5]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 f82f 	bl	800a108 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	791b      	ldrb	r3, [r3, #4]
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 f829 	bl	800a108 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	701a      	strb	r2, [r3, #0]
      break;
 80090c2:	e11d      	b.n	8009300 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80090c4:	2101      	movs	r1, #1
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa68 	bl	800959c <USBH_SetAddress>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d132      	bne.n	800913c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80090d6:	2002      	movs	r0, #2
 80090d8:	f001 faf5 	bl	800a6c6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2203      	movs	r2, #3
 80090e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7919      	ldrb	r1, [r3, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090fe:	b292      	uxth	r2, r2
 8009100:	9202      	str	r2, [sp, #8]
 8009102:	2200      	movs	r2, #0
 8009104:	9201      	str	r2, [sp, #4]
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	4603      	mov	r3, r0
 800910a:	2280      	movs	r2, #128	; 0x80
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 ffab 	bl	800a068 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7959      	ldrb	r1, [r3, #5]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009126:	b292      	uxth	r2, r2
 8009128:	9202      	str	r2, [sp, #8]
 800912a:	2200      	movs	r2, #0
 800912c:	9201      	str	r2, [sp, #4]
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	4603      	mov	r3, r0
 8009132:	2200      	movs	r2, #0
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 ff97 	bl	800a068 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800913a:	e0e3      	b.n	8009304 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	2b03      	cmp	r3, #3
 8009140:	f040 80e0 	bne.w	8009304 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	220d      	movs	r2, #13
 8009148:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	705a      	strb	r2, [r3, #1]
      break;
 8009150:	e0d8      	b.n	8009304 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009152:	2109      	movs	r1, #9
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f99d 	bl	8009494 <USBH_Get_CfgDesc>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d103      	bne.n	800916c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2204      	movs	r2, #4
 8009168:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800916a:	e0cd      	b.n	8009308 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b03      	cmp	r3, #3
 8009170:	f040 80ca 	bne.w	8009308 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800917a:	3301      	adds	r3, #1
 800917c:	b2da      	uxtb	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800918a:	2b03      	cmp	r3, #3
 800918c:	d903      	bls.n	8009196 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	220d      	movs	r2, #13
 8009192:	701a      	strb	r2, [r3, #0]
      break;
 8009194:	e0b8      	b.n	8009308 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	795b      	ldrb	r3, [r3, #5]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 ffb3 	bl	800a108 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	791b      	ldrb	r3, [r3, #4]
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 ffad 	bl	800a108 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	701a      	strb	r2, [r3, #0]
      break;
 80091ba:	e0a5      	b.n	8009308 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f965 	bl	8009494 <USBH_Get_CfgDesc>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2205      	movs	r2, #5
 80091d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091da:	e097      	b.n	800930c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	2b03      	cmp	r3, #3
 80091e0:	f040 8094 	bne.w	800930c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091ea:	3301      	adds	r3, #1
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d903      	bls.n	8009206 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	220d      	movs	r2, #13
 8009202:	701a      	strb	r2, [r3, #0]
      break;
 8009204:	e082      	b.n	800930c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	795b      	ldrb	r3, [r3, #5]
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 ff7b 	bl	800a108 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	791b      	ldrb	r3, [r3, #4]
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 ff75 	bl	800a108 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
      break;
 800922a:	e06f      	b.n	800930c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009232:	2b00      	cmp	r3, #0
 8009234:	d019      	beq.n	800926a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009242:	23ff      	movs	r3, #255	; 0xff
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f949 	bl	80094dc <USBH_Get_StringDesc>
 800924a:	4603      	mov	r3, r0
 800924c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800924e:	7bbb      	ldrb	r3, [r7, #14]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d103      	bne.n	800925c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2206      	movs	r2, #6
 8009258:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800925a:	e059      	b.n	8009310 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b03      	cmp	r3, #3
 8009260:	d156      	bne.n	8009310 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2206      	movs	r2, #6
 8009266:	705a      	strb	r2, [r3, #1]
      break;
 8009268:	e052      	b.n	8009310 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2206      	movs	r2, #6
 800926e:	705a      	strb	r2, [r3, #1]
      break;
 8009270:	e04e      	b.n	8009310 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009278:	2b00      	cmp	r3, #0
 800927a:	d019      	beq.n	80092b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009288:	23ff      	movs	r3, #255	; 0xff
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f926 	bl	80094dc <USBH_Get_StringDesc>
 8009290:	4603      	mov	r3, r0
 8009292:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009294:	7bbb      	ldrb	r3, [r7, #14]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2207      	movs	r2, #7
 800929e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092a0:	e038      	b.n	8009314 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d135      	bne.n	8009314 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2207      	movs	r2, #7
 80092ac:	705a      	strb	r2, [r3, #1]
      break;
 80092ae:	e031      	b.n	8009314 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2207      	movs	r2, #7
 80092b4:	705a      	strb	r2, [r3, #1]
      break;
 80092b6:	e02d      	b.n	8009314 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d017      	beq.n	80092f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092ce:	23ff      	movs	r3, #255	; 0xff
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f903 	bl	80094dc <USBH_Get_StringDesc>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80092e4:	e018      	b.n	8009318 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d115      	bne.n	8009318 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]
      break;
 80092f0:	e012      	b.n	8009318 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]
      break;
 80092f6:	e00f      	b.n	8009318 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80092f8:	bf00      	nop
 80092fa:	e00e      	b.n	800931a <USBH_HandleEnum+0x3be>
      break;
 80092fc:	bf00      	nop
 80092fe:	e00c      	b.n	800931a <USBH_HandleEnum+0x3be>
      break;
 8009300:	bf00      	nop
 8009302:	e00a      	b.n	800931a <USBH_HandleEnum+0x3be>
      break;
 8009304:	bf00      	nop
 8009306:	e008      	b.n	800931a <USBH_HandleEnum+0x3be>
      break;
 8009308:	bf00      	nop
 800930a:	e006      	b.n	800931a <USBH_HandleEnum+0x3be>
      break;
 800930c:	bf00      	nop
 800930e:	e004      	b.n	800931a <USBH_HandleEnum+0x3be>
      break;
 8009310:	bf00      	nop
 8009312:	e002      	b.n	800931a <USBH_HandleEnum+0x3be>
      break;
 8009314:	bf00      	nop
 8009316:	e000      	b.n	800931a <USBH_HandleEnum+0x3be>
      break;
 8009318:	bf00      	nop
  }
  return Status;
 800931a:	7bfb      	ldrb	r3, [r7, #15]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f804 	bl	8009366 <USBH_HandleSof>
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b0b      	cmp	r3, #11
 8009376:	d10a      	bne.n	800938e <USBH_HandleSof+0x28>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d005      	beq.n	800938e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
  }
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80093a6:	bf00      	nop
}
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80093c2:	bf00      	nop
}
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 f812 	bl	800a446 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	791b      	ldrb	r3, [r3, #4]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fe6d 	bl	800a108 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	795b      	ldrb	r3, [r3, #5]
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fe67 	bl	800a108 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af02      	add	r7, sp, #8
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009456:	78fb      	ldrb	r3, [r7, #3]
 8009458:	b29b      	uxth	r3, r3
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4613      	mov	r3, r2
 800945e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009462:	2100      	movs	r1, #0
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f864 	bl	8009532 <USBH_GetDescriptor>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f203 3026 	addw	r0, r3, #806	; 0x326
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009480:	78fa      	ldrb	r2, [r7, #3]
 8009482:	b292      	uxth	r2, r2
 8009484:	4619      	mov	r1, r3
 8009486:	f000 f918 	bl	80096ba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af02      	add	r7, sp, #8
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	331c      	adds	r3, #28
 80094a4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80094a6:	887b      	ldrh	r3, [r7, #2]
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f83d 	bl	8009532 <USBH_GetDescriptor>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d107      	bne.n	80094d2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80094c2:	887b      	ldrh	r3, [r7, #2]
 80094c4:	461a      	mov	r2, r3
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f987 	bl	80097dc <USBH_ParseCfgDesc>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af02      	add	r7, sp, #8
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	607a      	str	r2, [r7, #4]
 80094e6:	461a      	mov	r2, r3
 80094e8:	460b      	mov	r3, r1
 80094ea:	72fb      	strb	r3, [r7, #11]
 80094ec:	4613      	mov	r3, r2
 80094ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80094f8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009500:	893b      	ldrh	r3, [r7, #8]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	460b      	mov	r3, r1
 8009506:	2100      	movs	r1, #0
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 f812 	bl	8009532 <USBH_GetDescriptor>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d107      	bne.n	8009528 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800951e:	893a      	ldrh	r2, [r7, #8]
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fb24 	bl	8009b70 <USBH_ParseStringDesc>
  }

  return status;
 8009528:	7dfb      	ldrb	r3, [r7, #23]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	607b      	str	r3, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	72fb      	strb	r3, [r7, #11]
 8009540:	4613      	mov	r3, r2
 8009542:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	789b      	ldrb	r3, [r3, #2]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d11c      	bne.n	8009586 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800954c:	7afb      	ldrb	r3, [r7, #11]
 800954e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009552:	b2da      	uxtb	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2206      	movs	r2, #6
 800955c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	893a      	ldrh	r2, [r7, #8]
 8009562:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009564:	893b      	ldrh	r3, [r7, #8]
 8009566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800956a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800956e:	d104      	bne.n	800957a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f240 4209 	movw	r2, #1033	; 0x409
 8009576:	829a      	strh	r2, [r3, #20]
 8009578:	e002      	b.n	8009580 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8b3a      	ldrh	r2, [r7, #24]
 8009584:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009586:	8b3b      	ldrh	r3, [r7, #24]
 8009588:	461a      	mov	r2, r3
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fb3d 	bl	8009c0c <USBH_CtlReq>
 8009592:	4603      	mov	r3, r0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	789b      	ldrb	r3, [r3, #2]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d10f      	bne.n	80095d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2205      	movs	r2, #5
 80095ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80095bc:	78fb      	ldrb	r3, [r7, #3]
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095d0:	2200      	movs	r2, #0
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fb19 	bl	8009c0c <USBH_CtlReq>
 80095da:	4603      	mov	r3, r0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	789b      	ldrb	r3, [r3, #2]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d10e      	bne.n	8009616 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2209      	movs	r2, #9
 8009602:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	887a      	ldrh	r2, [r7, #2]
 8009608:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009616:	2200      	movs	r2, #0
 8009618:	2100      	movs	r1, #0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 faf6 	bl	8009c0c <USBH_CtlReq>
 8009620:	4603      	mov	r3, r0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	789b      	ldrb	r3, [r3, #2]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d10f      	bne.n	800965e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2203      	movs	r2, #3
 8009648:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800965e:	2200      	movs	r2, #0
 8009660:	2100      	movs	r1, #0
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fad2 	bl	8009c0c <USBH_CtlReq>
 8009668:	4603      	mov	r3, r0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	789b      	ldrb	r3, [r3, #2]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d10f      	bne.n	80096a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	b29a      	uxth	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80096a6:	2200      	movs	r2, #0
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 faae 	bl	8009c0c <USBH_CtlReq>
 80096b0:	4603      	mov	r3, r0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b085      	sub	sp, #20
 80096be:	af00      	add	r7, sp, #0
 80096c0:	60f8      	str	r0, [r7, #12]
 80096c2:	60b9      	str	r1, [r7, #8]
 80096c4:	4613      	mov	r3, r2
 80096c6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	785a      	ldrb	r2, [r3, #1]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	3302      	adds	r3, #2
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b29a      	uxth	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	3303      	adds	r3, #3
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	4313      	orrs	r3, r2
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	791a      	ldrb	r2, [r3, #4]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	795a      	ldrb	r2, [r3, #5]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	799a      	ldrb	r2, [r3, #6]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	79da      	ldrb	r2, [r3, #7]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	79db      	ldrb	r3, [r3, #7]
 8009718:	2b20      	cmp	r3, #32
 800971a:	dc11      	bgt.n	8009740 <USBH_ParseDevDesc+0x86>
 800971c:	2b08      	cmp	r3, #8
 800971e:	db16      	blt.n	800974e <USBH_ParseDevDesc+0x94>
 8009720:	3b08      	subs	r3, #8
 8009722:	2201      	movs	r2, #1
 8009724:	fa02 f303 	lsl.w	r3, r2, r3
 8009728:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800972c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009730:	2b00      	cmp	r3, #0
 8009732:	bf14      	ite	ne
 8009734:	2301      	movne	r3, #1
 8009736:	2300      	moveq	r3, #0
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <USBH_ParseDevDesc+0x8a>
 800973e:	e006      	b.n	800974e <USBH_ParseDevDesc+0x94>
 8009740:	2b40      	cmp	r3, #64	; 0x40
 8009742:	d104      	bne.n	800974e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	79da      	ldrb	r2, [r3, #7]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	71da      	strb	r2, [r3, #7]
      break;
 800974c:	e003      	b.n	8009756 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2240      	movs	r2, #64	; 0x40
 8009752:	71da      	strb	r2, [r3, #7]
      break;
 8009754:	bf00      	nop
  }

  if (length > 8U)
 8009756:	88fb      	ldrh	r3, [r7, #6]
 8009758:	2b08      	cmp	r3, #8
 800975a:	d939      	bls.n	80097d0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	3308      	adds	r3, #8
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b29a      	uxth	r2, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	3309      	adds	r3, #9
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	b29b      	uxth	r3, r3
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	b29b      	uxth	r3, r3
 8009770:	4313      	orrs	r3, r2
 8009772:	b29a      	uxth	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	330a      	adds	r3, #10
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	b29a      	uxth	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	330b      	adds	r3, #11
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	b29b      	uxth	r3, r3
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	b29b      	uxth	r3, r3
 800978c:	4313      	orrs	r3, r2
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	330c      	adds	r3, #12
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b29a      	uxth	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	330d      	adds	r3, #13
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4313      	orrs	r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	7b9a      	ldrb	r2, [r3, #14]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	7bda      	ldrb	r2, [r3, #15]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	7c1a      	ldrb	r2, [r3, #16]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	7c5a      	ldrb	r2, [r3, #17]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	745a      	strb	r2, [r3, #17]
  }
}
 80097d0:	bf00      	nop
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08c      	sub	sp, #48	; 0x30
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	4613      	mov	r3, r2
 80097e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80097f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009802:	2300      	movs	r3, #0
 8009804:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	785a      	ldrb	r2, [r3, #1]
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	3302      	adds	r3, #2
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	b29a      	uxth	r2, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	3303      	adds	r3, #3
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	b29b      	uxth	r3, r3
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	b29b      	uxth	r3, r3
 8009830:	4313      	orrs	r3, r2
 8009832:	b29b      	uxth	r3, r3
 8009834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009838:	bf28      	it	cs
 800983a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800983e:	b29a      	uxth	r2, r3
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	791a      	ldrb	r2, [r3, #4]
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	795a      	ldrb	r2, [r3, #5]
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	799a      	ldrb	r2, [r3, #6]
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	79da      	ldrb	r2, [r3, #7]
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	7a1a      	ldrb	r2, [r3, #8]
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b09      	cmp	r3, #9
 8009872:	d002      	beq.n	800987a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	2209      	movs	r2, #9
 8009878:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800987a:	88fb      	ldrh	r3, [r7, #6]
 800987c:	2b09      	cmp	r3, #9
 800987e:	f240 809d 	bls.w	80099bc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009882:	2309      	movs	r3, #9
 8009884:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800988a:	e081      	b.n	8009990 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800988c:	f107 0316 	add.w	r3, r7, #22
 8009890:	4619      	mov	r1, r3
 8009892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009894:	f000 f99f 	bl	8009bd6 <USBH_GetNextDesc>
 8009898:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d176      	bne.n	8009990 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b09      	cmp	r3, #9
 80098a8:	d002      	beq.n	80098b0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	2209      	movs	r2, #9
 80098ae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80098b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098b4:	221a      	movs	r2, #26
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
 80098ba:	3308      	adds	r3, #8
 80098bc:	6a3a      	ldr	r2, [r7, #32]
 80098be:	4413      	add	r3, r2
 80098c0:	3302      	adds	r3, #2
 80098c2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80098c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098c6:	69f8      	ldr	r0, [r7, #28]
 80098c8:	f000 f87e 	bl	80099c8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098d6:	e043      	b.n	8009960 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098d8:	f107 0316 	add.w	r3, r7, #22
 80098dc:	4619      	mov	r1, r3
 80098de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098e0:	f000 f979 	bl	8009bd6 <USBH_GetNextDesc>
 80098e4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	2b05      	cmp	r3, #5
 80098ec:	d138      	bne.n	8009960 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	795b      	ldrb	r3, [r3, #5]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d10f      	bne.n	8009916 <USBH_ParseCfgDesc+0x13a>
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	799b      	ldrb	r3, [r3, #6]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d10b      	bne.n	8009916 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	79db      	ldrb	r3, [r3, #7]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10f      	bne.n	8009926 <USBH_ParseCfgDesc+0x14a>
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2b09      	cmp	r3, #9
 800990c:	d00b      	beq.n	8009926 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	2209      	movs	r2, #9
 8009912:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009914:	e007      	b.n	8009926 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b07      	cmp	r3, #7
 800991c:	d004      	beq.n	8009928 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	2207      	movs	r2, #7
 8009922:	701a      	strb	r2, [r3, #0]
 8009924:	e000      	b.n	8009928 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009926:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800992c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009930:	3201      	adds	r2, #1
 8009932:	00d2      	lsls	r2, r2, #3
 8009934:	211a      	movs	r1, #26
 8009936:	fb01 f303 	mul.w	r3, r1, r3
 800993a:	4413      	add	r3, r2
 800993c:	3308      	adds	r3, #8
 800993e:	6a3a      	ldr	r2, [r7, #32]
 8009940:	4413      	add	r3, r2
 8009942:	3304      	adds	r3, #4
 8009944:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009948:	69b9      	ldr	r1, [r7, #24]
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f86b 	bl	8009a26 <USBH_ParseEPDesc>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800995a:	3301      	adds	r3, #1
 800995c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	791b      	ldrb	r3, [r3, #4]
 8009964:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009968:	429a      	cmp	r2, r3
 800996a:	d204      	bcs.n	8009976 <USBH_ParseCfgDesc+0x19a>
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	885a      	ldrh	r2, [r3, #2]
 8009970:	8afb      	ldrh	r3, [r7, #22]
 8009972:	429a      	cmp	r2, r3
 8009974:	d8b0      	bhi.n	80098d8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	791b      	ldrb	r3, [r3, #4]
 800997a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800997e:	429a      	cmp	r2, r3
 8009980:	d201      	bcs.n	8009986 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009982:	2303      	movs	r3, #3
 8009984:	e01c      	b.n	80099c0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800998a:	3301      	adds	r3, #1
 800998c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009994:	2b01      	cmp	r3, #1
 8009996:	d805      	bhi.n	80099a4 <USBH_ParseCfgDesc+0x1c8>
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	885a      	ldrh	r2, [r3, #2]
 800999c:	8afb      	ldrh	r3, [r7, #22]
 800999e:	429a      	cmp	r2, r3
 80099a0:	f63f af74 	bhi.w	800988c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	791b      	ldrb	r3, [r3, #4]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	bf28      	it	cs
 80099ac:	2302      	movcs	r3, #2
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d201      	bcs.n	80099bc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e001      	b.n	80099c0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80099bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3730      	adds	r7, #48	; 0x30
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	781a      	ldrb	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	785a      	ldrb	r2, [r3, #1]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	789a      	ldrb	r2, [r3, #2]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	78da      	ldrb	r2, [r3, #3]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	791a      	ldrb	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	795a      	ldrb	r2, [r3, #5]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	799a      	ldrb	r2, [r3, #6]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	79da      	ldrb	r2, [r3, #7]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	7a1a      	ldrb	r2, [r3, #8]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	721a      	strb	r2, [r3, #8]
}
 8009a1a:	bf00      	nop
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b087      	sub	sp, #28
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	60f8      	str	r0, [r7, #12]
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	781a      	ldrb	r2, [r3, #0]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	785a      	ldrb	r2, [r3, #1]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	789a      	ldrb	r2, [r3, #2]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	78da      	ldrb	r2, [r3, #3]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3305      	adds	r3, #5
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	021b      	lsls	r3, r3, #8
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	799a      	ldrb	r2, [r3, #6]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	889b      	ldrh	r3, [r3, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009a82:	2303      	movs	r3, #3
 8009a84:	75fb      	strb	r3, [r7, #23]
 8009a86:	e033      	b.n	8009af0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	889b      	ldrh	r3, [r3, #4]
 8009a8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a90:	f023 0307 	bic.w	r3, r3, #7
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	889b      	ldrh	r3, [r3, #4]
 8009a9e:	b21a      	sxth	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	b299      	uxth	r1, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3305      	adds	r3, #5
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	021b      	lsls	r3, r3, #8
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	430b      	orrs	r3, r1
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d110      	bne.n	8009ae2 <USBH_ParseEPDesc+0xbc>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	b299      	uxth	r1, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3305      	adds	r3, #5
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	b21b      	sxth	r3, r3
 8009ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ade:	b21b      	sxth	r3, r3
 8009ae0:	e001      	b.n	8009ae6 <USBH_ParseEPDesc+0xc0>
 8009ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	b21b      	sxth	r3, r3
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d116      	bne.n	8009b28 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	78db      	ldrb	r3, [r3, #3]
 8009afe:	f003 0303 	and.w	r3, r3, #3
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d005      	beq.n	8009b12 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	78db      	ldrb	r3, [r3, #3]
 8009b0a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d127      	bne.n	8009b62 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	799b      	ldrb	r3, [r3, #6]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <USBH_ParseEPDesc+0xfc>
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	799b      	ldrb	r3, [r3, #6]
 8009b1e:	2b10      	cmp	r3, #16
 8009b20:	d91f      	bls.n	8009b62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b22:	2303      	movs	r3, #3
 8009b24:	75fb      	strb	r3, [r7, #23]
 8009b26:	e01c      	b.n	8009b62 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	78db      	ldrb	r3, [r3, #3]
 8009b2c:	f003 0303 	and.w	r3, r3, #3
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d10a      	bne.n	8009b4a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	799b      	ldrb	r3, [r3, #6]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <USBH_ParseEPDesc+0x11e>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	799b      	ldrb	r3, [r3, #6]
 8009b40:	2b10      	cmp	r3, #16
 8009b42:	d90e      	bls.n	8009b62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b44:	2303      	movs	r3, #3
 8009b46:	75fb      	strb	r3, [r7, #23]
 8009b48:	e00b      	b.n	8009b62 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	78db      	ldrb	r3, [r3, #3]
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d105      	bne.n	8009b62 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	799b      	ldrb	r3, [r3, #6]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b087      	sub	sp, #28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3301      	adds	r3, #1
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d120      	bne.n	8009bca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	1e9a      	subs	r2, r3, #2
 8009b8e:	88fb      	ldrh	r3, [r7, #6]
 8009b90:	4293      	cmp	r3, r2
 8009b92:	bf28      	it	cs
 8009b94:	4613      	movcs	r3, r2
 8009b96:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3302      	adds	r3, #2
 8009b9c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	82fb      	strh	r3, [r7, #22]
 8009ba2:	e00b      	b.n	8009bbc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009ba4:	8afb      	ldrh	r3, [r7, #22]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4413      	add	r3, r2
 8009baa:	781a      	ldrb	r2, [r3, #0]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009bb6:	8afb      	ldrh	r3, [r7, #22]
 8009bb8:	3302      	adds	r3, #2
 8009bba:	82fb      	strh	r3, [r7, #22]
 8009bbc:	8afa      	ldrh	r2, [r7, #22]
 8009bbe:	8abb      	ldrh	r3, [r7, #20]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d3ef      	bcc.n	8009ba4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	701a      	strb	r2, [r3, #0]
  }
}
 8009bca:	bf00      	nop
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b085      	sub	sp, #20
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	881a      	ldrh	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	4413      	add	r3, r2
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	789b      	ldrb	r3, [r3, #2]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d002      	beq.n	8009c2c <USBH_CtlReq+0x20>
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d00f      	beq.n	8009c4a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009c2a:	e027      	b.n	8009c7c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	88fa      	ldrh	r2, [r7, #6]
 8009c36:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2202      	movs	r2, #2
 8009c42:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009c44:	2301      	movs	r3, #1
 8009c46:	75fb      	strb	r3, [r7, #23]
      break;
 8009c48:	e018      	b.n	8009c7c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 f81c 	bl	8009c88 <USBH_HandleControl>
 8009c50:	4603      	mov	r3, r0
 8009c52:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <USBH_CtlReq+0x54>
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d106      	bne.n	8009c6e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2201      	movs	r2, #1
 8009c64:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	761a      	strb	r2, [r3, #24]
      break;
 8009c6c:	e005      	b.n	8009c7a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d102      	bne.n	8009c7a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2201      	movs	r2, #1
 8009c78:	709a      	strb	r2, [r3, #2]
      break;
 8009c7a:	bf00      	nop
  }
  return status;
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c90:	2301      	movs	r3, #1
 8009c92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	7e1b      	ldrb	r3, [r3, #24]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	2b0a      	cmp	r3, #10
 8009ca0:	f200 8156 	bhi.w	8009f50 <USBH_HandleControl+0x2c8>
 8009ca4:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <USBH_HandleControl+0x24>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	08009cf3 	.word	0x08009cf3
 8009cb4:	08009d5d 	.word	0x08009d5d
 8009cb8:	08009d83 	.word	0x08009d83
 8009cbc:	08009dbb 	.word	0x08009dbb
 8009cc0:	08009de5 	.word	0x08009de5
 8009cc4:	08009e37 	.word	0x08009e37
 8009cc8:	08009e59 	.word	0x08009e59
 8009ccc:	08009e95 	.word	0x08009e95
 8009cd0:	08009ebb 	.word	0x08009ebb
 8009cd4:	08009ef9 	.word	0x08009ef9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f103 0110 	add.w	r1, r3, #16
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	795b      	ldrb	r3, [r3, #5]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f943 	bl	8009f70 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2202      	movs	r2, #2
 8009cee:	761a      	strb	r2, [r3, #24]
      break;
 8009cf0:	e139      	b.n	8009f66 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	795b      	ldrb	r3, [r3, #5]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fc93 	bl	800a624 <USBH_LL_GetURBState>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d11e      	bne.n	8009d46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7c1b      	ldrb	r3, [r3, #16]
 8009d0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	8adb      	ldrh	r3, [r3, #22]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00a      	beq.n	8009d30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d1a:	7b7b      	ldrb	r3, [r7, #13]
 8009d1c:	2b80      	cmp	r3, #128	; 0x80
 8009d1e:	d103      	bne.n	8009d28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2203      	movs	r2, #3
 8009d24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d26:	e115      	b.n	8009f54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2205      	movs	r2, #5
 8009d2c:	761a      	strb	r2, [r3, #24]
      break;
 8009d2e:	e111      	b.n	8009f54 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009d30:	7b7b      	ldrb	r3, [r7, #13]
 8009d32:	2b80      	cmp	r3, #128	; 0x80
 8009d34:	d103      	bne.n	8009d3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2209      	movs	r2, #9
 8009d3a:	761a      	strb	r2, [r3, #24]
      break;
 8009d3c:	e10a      	b.n	8009f54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2207      	movs	r2, #7
 8009d42:	761a      	strb	r2, [r3, #24]
      break;
 8009d44:	e106      	b.n	8009f54 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d003      	beq.n	8009d54 <USBH_HandleControl+0xcc>
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	f040 8100 	bne.w	8009f54 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	220b      	movs	r2, #11
 8009d58:	761a      	strb	r2, [r3, #24]
      break;
 8009d5a:	e0fb      	b.n	8009f54 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6899      	ldr	r1, [r3, #8]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	899a      	ldrh	r2, [r3, #12]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	791b      	ldrb	r3, [r3, #4]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f93a 	bl	8009fee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2204      	movs	r2, #4
 8009d7e:	761a      	strb	r2, [r3, #24]
      break;
 8009d80:	e0f1      	b.n	8009f66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	791b      	ldrb	r3, [r3, #4]
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fc4b 	bl	800a624 <USBH_LL_GetURBState>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d102      	bne.n	8009d9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2209      	movs	r2, #9
 8009d9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	2b05      	cmp	r3, #5
 8009da2:	d102      	bne.n	8009daa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009da4:	2303      	movs	r3, #3
 8009da6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009da8:	e0d6      	b.n	8009f58 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	f040 80d3 	bne.w	8009f58 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	220b      	movs	r2, #11
 8009db6:	761a      	strb	r2, [r3, #24]
      break;
 8009db8:	e0ce      	b.n	8009f58 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6899      	ldr	r1, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	899a      	ldrh	r2, [r3, #12]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	795b      	ldrb	r3, [r3, #5]
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	9000      	str	r0, [sp, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f8ea 	bl	8009fa4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2206      	movs	r2, #6
 8009de0:	761a      	strb	r2, [r3, #24]
      break;
 8009de2:	e0c0      	b.n	8009f66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	795b      	ldrb	r3, [r3, #5]
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fc1a 	bl	800a624 <USBH_LL_GetURBState>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d103      	bne.n	8009e02 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2207      	movs	r2, #7
 8009dfe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e00:	e0ac      	b.n	8009f5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b05      	cmp	r3, #5
 8009e06:	d105      	bne.n	8009e14 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	220c      	movs	r2, #12
 8009e0c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	73fb      	strb	r3, [r7, #15]
      break;
 8009e12:	e0a3      	b.n	8009f5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d103      	bne.n	8009e22 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2205      	movs	r2, #5
 8009e1e:	761a      	strb	r2, [r3, #24]
      break;
 8009e20:	e09c      	b.n	8009f5c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	f040 8099 	bne.w	8009f5c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	220b      	movs	r2, #11
 8009e2e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009e30:	2302      	movs	r3, #2
 8009e32:	73fb      	strb	r3, [r7, #15]
      break;
 8009e34:	e092      	b.n	8009f5c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	791b      	ldrb	r3, [r3, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f8d5 	bl	8009fee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2208      	movs	r2, #8
 8009e54:	761a      	strb	r2, [r3, #24]

      break;
 8009e56:	e086      	b.n	8009f66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	791b      	ldrb	r3, [r3, #4]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fbe0 	bl	800a624 <USBH_LL_GetURBState>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d105      	bne.n	8009e7a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	220d      	movs	r2, #13
 8009e72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e78:	e072      	b.n	8009f60 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d103      	bne.n	8009e88 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	220b      	movs	r2, #11
 8009e84:	761a      	strb	r2, [r3, #24]
      break;
 8009e86:	e06b      	b.n	8009f60 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b05      	cmp	r3, #5
 8009e8c:	d168      	bne.n	8009f60 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	73fb      	strb	r3, [r7, #15]
      break;
 8009e92:	e065      	b.n	8009f60 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	795b      	ldrb	r3, [r3, #5]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	9200      	str	r2, [sp, #0]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f87f 	bl	8009fa4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	220a      	movs	r2, #10
 8009eb6:	761a      	strb	r2, [r3, #24]
      break;
 8009eb8:	e055      	b.n	8009f66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	795b      	ldrb	r3, [r3, #5]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fbaf 	bl	800a624 <USBH_LL_GetURBState>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d105      	bne.n	8009edc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	220d      	movs	r2, #13
 8009ed8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009eda:	e043      	b.n	8009f64 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d103      	bne.n	8009eea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2209      	movs	r2, #9
 8009ee6:	761a      	strb	r2, [r3, #24]
      break;
 8009ee8:	e03c      	b.n	8009f64 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d139      	bne.n	8009f64 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	220b      	movs	r2, #11
 8009ef4:	761a      	strb	r2, [r3, #24]
      break;
 8009ef6:	e035      	b.n	8009f64 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7e5b      	ldrb	r3, [r3, #25]
 8009efc:	3301      	adds	r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	765a      	strb	r2, [r3, #25]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	7e5b      	ldrb	r3, [r3, #25]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d806      	bhi.n	8009f1a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009f18:	e025      	b.n	8009f66 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f20:	2106      	movs	r1, #6
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	795b      	ldrb	r3, [r3, #5]
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f8e8 	bl	800a108 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	791b      	ldrb	r3, [r3, #4]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f8e2 	bl	800a108 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f4e:	e00a      	b.n	8009f66 <USBH_HandleControl+0x2de>

    default:
      break;
 8009f50:	bf00      	nop
 8009f52:	e008      	b.n	8009f66 <USBH_HandleControl+0x2de>
      break;
 8009f54:	bf00      	nop
 8009f56:	e006      	b.n	8009f66 <USBH_HandleControl+0x2de>
      break;
 8009f58:	bf00      	nop
 8009f5a:	e004      	b.n	8009f66 <USBH_HandleControl+0x2de>
      break;
 8009f5c:	bf00      	nop
 8009f5e:	e002      	b.n	8009f66 <USBH_HandleControl+0x2de>
      break;
 8009f60:	bf00      	nop
 8009f62:	e000      	b.n	8009f66 <USBH_HandleControl+0x2de>
      break;
 8009f64:	bf00      	nop
  }

  return status;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af04      	add	r7, sp, #16
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f7e:	79f9      	ldrb	r1, [r7, #7]
 8009f80:	2300      	movs	r3, #0
 8009f82:	9303      	str	r3, [sp, #12]
 8009f84:	2308      	movs	r3, #8
 8009f86:	9302      	str	r3, [sp, #8]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	2300      	movs	r3, #0
 8009f92:	2200      	movs	r2, #0
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 fb14 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b088      	sub	sp, #32
 8009fa8:	af04      	add	r7, sp, #16
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	4611      	mov	r1, r2
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	80fb      	strh	r3, [r7, #6]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fc8:	7979      	ldrb	r1, [r7, #5]
 8009fca:	7e3b      	ldrb	r3, [r7, #24]
 8009fcc:	9303      	str	r3, [sp, #12]
 8009fce:	88fb      	ldrh	r3, [r7, #6]
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	2200      	movs	r2, #0
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 faef 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b088      	sub	sp, #32
 8009ff2:	af04      	add	r7, sp, #16
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	80fb      	strh	r3, [r7, #6]
 800a000:	4613      	mov	r3, r2
 800a002:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a004:	7979      	ldrb	r1, [r7, #5]
 800a006:	2300      	movs	r3, #0
 800a008:	9303      	str	r3, [sp, #12]
 800a00a:	88fb      	ldrh	r3, [r7, #6]
 800a00c:	9302      	str	r3, [sp, #8]
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	2301      	movs	r3, #1
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	2300      	movs	r3, #0
 800a018:	2201      	movs	r2, #1
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fad1 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a020:	2300      	movs	r3, #0

}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b088      	sub	sp, #32
 800a02e:	af04      	add	r7, sp, #16
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	4611      	mov	r1, r2
 800a036:	461a      	mov	r2, r3
 800a038:	460b      	mov	r3, r1
 800a03a:	71fb      	strb	r3, [r7, #7]
 800a03c:	4613      	mov	r3, r2
 800a03e:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	b29b      	uxth	r3, r3
 800a044:	79b9      	ldrb	r1, [r7, #6]
 800a046:	2200      	movs	r2, #0
 800a048:	9203      	str	r2, [sp, #12]
 800a04a:	9302      	str	r3, [sp, #8]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	2301      	movs	r3, #1
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	2303      	movs	r3, #3
 800a056:	2201      	movs	r2, #1
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 fab2 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af04      	add	r7, sp, #16
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	4608      	mov	r0, r1
 800a072:	4611      	mov	r1, r2
 800a074:	461a      	mov	r2, r3
 800a076:	4603      	mov	r3, r0
 800a078:	70fb      	strb	r3, [r7, #3]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70bb      	strb	r3, [r7, #2]
 800a07e:	4613      	mov	r3, r2
 800a080:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a082:	7878      	ldrb	r0, [r7, #1]
 800a084:	78ba      	ldrb	r2, [r7, #2]
 800a086:	78f9      	ldrb	r1, [r7, #3]
 800a088:	8b3b      	ldrh	r3, [r7, #24]
 800a08a:	9302      	str	r3, [sp, #8]
 800a08c:	7d3b      	ldrb	r3, [r7, #20]
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	7c3b      	ldrb	r3, [r7, #16]
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	4603      	mov	r3, r0
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa45 	bl	800a526 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a0b2:	78fb      	ldrb	r3, [r7, #3]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa64 	bl	800a584 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f836 	bl	800a144 <USBH_GetFreePipe>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a0dc:	89fb      	ldrh	r3, [r7, #14]
 800a0de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d00a      	beq.n	800a0fc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a0e6:	78fa      	ldrb	r2, [r7, #3]
 800a0e8:	89fb      	ldrh	r3, [r7, #14]
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	33e0      	adds	r3, #224	; 0xe0
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a0fc:	89fb      	ldrh	r3, [r7, #14]
 800a0fe:	b2db      	uxtb	r3, r3
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	2b0f      	cmp	r3, #15
 800a118:	d80d      	bhi.n	800a136 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	33e0      	adds	r3, #224	; 0xe0
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	33e0      	adds	r3, #224	; 0xe0
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	440b      	add	r3, r1
 800a134:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]
 800a154:	e00f      	b.n	800a176 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	33e0      	adds	r3, #224	; 0xe0
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d102      	bne.n	800a170 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	e007      	b.n	800a180 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	3301      	adds	r3, #1
 800a174:	73fb      	strb	r3, [r7, #15]
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	2b0f      	cmp	r3, #15
 800a17a:	d9ec      	bls.n	800a156 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a17c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a190:	2201      	movs	r2, #1
 800a192:	490e      	ldr	r1, [pc, #56]	; (800a1cc <MX_USB_HOST_Init+0x40>)
 800a194:	480e      	ldr	r0, [pc, #56]	; (800a1d0 <MX_USB_HOST_Init+0x44>)
 800a196:	f7fe fbcb 	bl	8008930 <USBH_Init>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a1a0:	f7f7 fdfc 	bl	8001d9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800a1a4:	490b      	ldr	r1, [pc, #44]	; (800a1d4 <MX_USB_HOST_Init+0x48>)
 800a1a6:	480a      	ldr	r0, [pc, #40]	; (800a1d0 <MX_USB_HOST_Init+0x44>)
 800a1a8:	f7fe fc50 	bl	8008a4c <USBH_RegisterClass>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a1b2:	f7f7 fdf3 	bl	8001d9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a1b6:	4806      	ldr	r0, [pc, #24]	; (800a1d0 <MX_USB_HOST_Init+0x44>)
 800a1b8:	f7fe fcd4 	bl	8008b64 <USBH_Start>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a1c2:	f7f7 fdeb 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a1c6:	bf00      	nop
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	0800a1ed 	.word	0x0800a1ed
 800a1d0:	20000628 	.word	0x20000628
 800a1d4:	20000070 	.word	0x20000070

0800a1d8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a1dc:	4802      	ldr	r0, [pc, #8]	; (800a1e8 <MX_USB_HOST_Process+0x10>)
 800a1de:	f7fe fcd1 	bl	8008b84 <USBH_Process>
}
 800a1e2:	bf00      	nop
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000628 	.word	0x20000628

0800a1ec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d819      	bhi.n	800a234 <USBH_UserProcess+0x48>
 800a200:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <USBH_UserProcess+0x1c>)
 800a202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a206:	bf00      	nop
 800a208:	0800a235 	.word	0x0800a235
 800a20c:	0800a225 	.word	0x0800a225
 800a210:	0800a235 	.word	0x0800a235
 800a214:	0800a22d 	.word	0x0800a22d
 800a218:	0800a21d 	.word	0x0800a21d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a21c:	4b09      	ldr	r3, [pc, #36]	; (800a244 <USBH_UserProcess+0x58>)
 800a21e:	2203      	movs	r2, #3
 800a220:	701a      	strb	r2, [r3, #0]
  break;
 800a222:	e008      	b.n	800a236 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a224:	4b07      	ldr	r3, [pc, #28]	; (800a244 <USBH_UserProcess+0x58>)
 800a226:	2202      	movs	r2, #2
 800a228:	701a      	strb	r2, [r3, #0]
  break;
 800a22a:	e004      	b.n	800a236 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a22c:	4b05      	ldr	r3, [pc, #20]	; (800a244 <USBH_UserProcess+0x58>)
 800a22e:	2201      	movs	r2, #1
 800a230:	701a      	strb	r2, [r3, #0]
  break;
 800a232:	e000      	b.n	800a236 <USBH_UserProcess+0x4a>

  default:
  break;
 800a234:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20000a00 	.word	0x20000a00

0800a248 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08a      	sub	sp, #40	; 0x28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a250:	f107 0314 	add.w	r3, r7, #20
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	605a      	str	r2, [r3, #4]
 800a25a:	609a      	str	r2, [r3, #8]
 800a25c:	60da      	str	r2, [r3, #12]
 800a25e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a268:	d13a      	bne.n	800a2e0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a26a:	2300      	movs	r3, #0
 800a26c:	613b      	str	r3, [r7, #16]
 800a26e:	4b1e      	ldr	r3, [pc, #120]	; (800a2e8 <HAL_HCD_MspInit+0xa0>)
 800a270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a272:	4a1d      	ldr	r2, [pc, #116]	; (800a2e8 <HAL_HCD_MspInit+0xa0>)
 800a274:	f043 0301 	orr.w	r3, r3, #1
 800a278:	6313      	str	r3, [r2, #48]	; 0x30
 800a27a:	4b1b      	ldr	r3, [pc, #108]	; (800a2e8 <HAL_HCD_MspInit+0xa0>)
 800a27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27e:	f003 0301 	and.w	r3, r3, #1
 800a282:	613b      	str	r3, [r7, #16]
 800a284:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a286:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a28a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a28c:	2302      	movs	r3, #2
 800a28e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a290:	2300      	movs	r3, #0
 800a292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a294:	2303      	movs	r3, #3
 800a296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a298:	230a      	movs	r3, #10
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a29c:	f107 0314 	add.w	r3, r7, #20
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4812      	ldr	r0, [pc, #72]	; (800a2ec <HAL_HCD_MspInit+0xa4>)
 800a2a4:	f7f8 fd96 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a2a8:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <HAL_HCD_MspInit+0xa0>)
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ac:	4a0e      	ldr	r2, [pc, #56]	; (800a2e8 <HAL_HCD_MspInit+0xa0>)
 800a2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b2:	6353      	str	r3, [r2, #52]	; 0x34
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <HAL_HCD_MspInit+0xa0>)
 800a2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2bc:	4a0a      	ldr	r2, [pc, #40]	; (800a2e8 <HAL_HCD_MspInit+0xa0>)
 800a2be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2c2:	6453      	str	r3, [r2, #68]	; 0x44
 800a2c4:	4b08      	ldr	r3, [pc, #32]	; (800a2e8 <HAL_HCD_MspInit+0xa0>)
 800a2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2cc:	60fb      	str	r3, [r7, #12]
 800a2ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	2043      	movs	r0, #67	; 0x43
 800a2d6:	f7f8 fcb4 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2da:	2043      	movs	r0, #67	; 0x43
 800a2dc:	f7f8 fccd 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	3728      	adds	r7, #40	; 0x28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	40023800 	.word	0x40023800
 800a2ec:	40020000 	.word	0x40020000

0800a2f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7ff f81f 	bl	8009342 <USBH_LL_IncTimer>
}
 800a304:	bf00      	nop
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7ff f857 	bl	80093ce <USBH_LL_Connect>
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff f860 	bl	80093fc <USBH_LL_Disconnect>
}
 800a33c:	bf00      	nop
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
 800a350:	4613      	mov	r3, r2
 800a352:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff f811 	bl	8009396 <USBH_LL_PortEnabled>
}
 800a374:	bf00      	nop
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff f811 	bl	80093b2 <USBH_LL_PortDisabled>
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d12a      	bne.n	800a400 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a3aa:	4a18      	ldr	r2, [pc, #96]	; (800a40c <USBH_LL_Init+0x74>)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a15      	ldr	r2, [pc, #84]	; (800a40c <USBH_LL_Init+0x74>)
 800a3b6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a3ba:	4b14      	ldr	r3, [pc, #80]	; (800a40c <USBH_LL_Init+0x74>)
 800a3bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a3c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a3c2:	4b12      	ldr	r3, [pc, #72]	; (800a40c <USBH_LL_Init+0x74>)
 800a3c4:	2208      	movs	r2, #8
 800a3c6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a3c8:	4b10      	ldr	r3, [pc, #64]	; (800a40c <USBH_LL_Init+0x74>)
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3ce:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <USBH_LL_Init+0x74>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a3d4:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <USBH_LL_Init+0x74>)
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a3da:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <USBH_LL_Init+0x74>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a3e0:	480a      	ldr	r0, [pc, #40]	; (800a40c <USBH_LL_Init+0x74>)
 800a3e2:	f7f8 fe94 	bl	800310e <HAL_HCD_Init>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a3ec:	f7f7 fcd6 	bl	8001d9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a3f0:	4806      	ldr	r0, [pc, #24]	; (800a40c <USBH_LL_Init+0x74>)
 800a3f2:	f7f9 fa78 	bl	80038e6 <HAL_HCD_GetCurrentFrame>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fe ff92 	bl	8009324 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20000a04 	.word	0x20000a04

0800a410 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a426:	4618      	mov	r0, r3
 800a428:	f7f9 f9e7 	bl	80037fa <HAL_HCD_Start>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	4618      	mov	r0, r3
 800a434:	f000 f952 	bl	800a6dc <USBH_Get_USB_Status>
 800a438:	4603      	mov	r3, r0
 800a43a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f9 f9ef 	bl	8003840 <HAL_HCD_Stop>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f937 	bl	800a6dc <USBH_Get_USB_Status>
 800a46e:	4603      	mov	r3, r0
 800a470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a472:	7bbb      	ldrb	r3, [r7, #14]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a484:	2301      	movs	r3, #1
 800a486:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a48e:	4618      	mov	r0, r3
 800a490:	f7f9 fa37 	bl	8003902 <HAL_HCD_GetCurrentSpeed>
 800a494:	4603      	mov	r3, r0
 800a496:	2b02      	cmp	r3, #2
 800a498:	d00c      	beq.n	800a4b4 <USBH_LL_GetSpeed+0x38>
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d80d      	bhi.n	800a4ba <USBH_LL_GetSpeed+0x3e>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d002      	beq.n	800a4a8 <USBH_LL_GetSpeed+0x2c>
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d003      	beq.n	800a4ae <USBH_LL_GetSpeed+0x32>
 800a4a6:	e008      	b.n	800a4ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ac:	e008      	b.n	800a4c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b2:	e005      	b.n	800a4c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b8:	e002      	b.n	800a4c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a4be:	bf00      	nop
  }
  return  speed;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f9 f9ca 	bl	800387a <HAL_HCD_ResetPort>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f8f5 	bl	800a6dc <USBH_Get_USB_Status>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f7f9 f9d1 	bl	80038be <HAL_HCD_HC_GetXferCount>
 800a51c:	4603      	mov	r3, r0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a526:	b590      	push	{r4, r7, lr}
 800a528:	b089      	sub	sp, #36	; 0x24
 800a52a:	af04      	add	r7, sp, #16
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	4608      	mov	r0, r1
 800a530:	4611      	mov	r1, r2
 800a532:	461a      	mov	r2, r3
 800a534:	4603      	mov	r3, r0
 800a536:	70fb      	strb	r3, [r7, #3]
 800a538:	460b      	mov	r3, r1
 800a53a:	70bb      	strb	r3, [r7, #2]
 800a53c:	4613      	mov	r3, r2
 800a53e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a54e:	787c      	ldrb	r4, [r7, #1]
 800a550:	78ba      	ldrb	r2, [r7, #2]
 800a552:	78f9      	ldrb	r1, [r7, #3]
 800a554:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a556:	9302      	str	r3, [sp, #8]
 800a558:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	4623      	mov	r3, r4
 800a566:	f7f8 fe34 	bl	80031d2 <HAL_HCD_HC_Init>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f8b3 	bl	800a6dc <USBH_Get_USB_Status>
 800a576:	4603      	mov	r3, r0
 800a578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	bd90      	pop	{r4, r7, pc}

0800a584 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a59e:	78fa      	ldrb	r2, [r7, #3]
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7f8 fea4 	bl	80032f0 <HAL_HCD_HC_Halt>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 f894 	bl	800a6dc <USBH_Get_USB_Status>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a5c2:	b590      	push	{r4, r7, lr}
 800a5c4:	b089      	sub	sp, #36	; 0x24
 800a5c6:	af04      	add	r7, sp, #16
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	70fb      	strb	r3, [r7, #3]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	70bb      	strb	r3, [r7, #2]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a5ea:	787c      	ldrb	r4, [r7, #1]
 800a5ec:	78ba      	ldrb	r2, [r7, #2]
 800a5ee:	78f9      	ldrb	r1, [r7, #3]
 800a5f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a5f4:	9303      	str	r3, [sp, #12]
 800a5f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a5f8:	9302      	str	r3, [sp, #8]
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	4623      	mov	r3, r4
 800a606:	f7f8 fe97 	bl	8003338 <HAL_HCD_HC_SubmitRequest>
 800a60a:	4603      	mov	r3, r0
 800a60c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	4618      	mov	r0, r3
 800a612:	f000 f863 	bl	800a6dc <USBH_Get_USB_Status>
 800a616:	4603      	mov	r3, r0
 800a618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	bd90      	pop	{r4, r7, pc}

0800a624 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a636:	78fa      	ldrb	r2, [r7, #3]
 800a638:	4611      	mov	r1, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f9 f92b 	bl	8003896 <HAL_HCD_HC_GetURBState>
 800a640:	4603      	mov	r3, r0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800a656:	20c8      	movs	r0, #200	; 0xc8
 800a658:	f7f7 fe12 	bl	8002280 <HAL_Delay>
  return USBH_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a666:	b480      	push	{r7}
 800a668:	b085      	sub	sp, #20
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	460b      	mov	r3, r1
 800a670:	70fb      	strb	r3, [r7, #3]
 800a672:	4613      	mov	r3, r2
 800a674:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a67c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	212c      	movs	r1, #44	; 0x2c
 800a684:	fb01 f303 	mul.w	r3, r1, r3
 800a688:	4413      	add	r3, r2
 800a68a:	333b      	adds	r3, #59	; 0x3b
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d009      	beq.n	800a6a6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	212c      	movs	r1, #44	; 0x2c
 800a698:	fb01 f303 	mul.w	r3, r1, r3
 800a69c:	4413      	add	r3, r2
 800a69e:	3354      	adds	r3, #84	; 0x54
 800a6a0:	78ba      	ldrb	r2, [r7, #2]
 800a6a2:	701a      	strb	r2, [r3, #0]
 800a6a4:	e008      	b.n	800a6b8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a6a6:	78fb      	ldrb	r3, [r7, #3]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	212c      	movs	r1, #44	; 0x2c
 800a6ac:	fb01 f303 	mul.w	r3, r1, r3
 800a6b0:	4413      	add	r3, r2
 800a6b2:	3355      	adds	r3, #85	; 0x55
 800a6b4:	78ba      	ldrb	r2, [r7, #2]
 800a6b6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7f7 fdd6 	bl	8002280 <HAL_Delay>
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d817      	bhi.n	800a720 <USBH_Get_USB_Status+0x44>
 800a6f0:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <USBH_Get_USB_Status+0x1c>)
 800a6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f6:	bf00      	nop
 800a6f8:	0800a709 	.word	0x0800a709
 800a6fc:	0800a70f 	.word	0x0800a70f
 800a700:	0800a715 	.word	0x0800a715
 800a704:	0800a71b 	.word	0x0800a71b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
    break;
 800a70c:	e00b      	b.n	800a726 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a70e:	2302      	movs	r3, #2
 800a710:	73fb      	strb	r3, [r7, #15]
    break;
 800a712:	e008      	b.n	800a726 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a714:	2301      	movs	r3, #1
 800a716:	73fb      	strb	r3, [r7, #15]
    break;
 800a718:	e005      	b.n	800a726 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a71a:	2302      	movs	r3, #2
 800a71c:	73fb      	strb	r3, [r7, #15]
    break;
 800a71e:	e002      	b.n	800a726 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a720:	2302      	movs	r3, #2
 800a722:	73fb      	strb	r3, [r7, #15]
    break;
 800a724:	bf00      	nop
  }
  return usb_status;
 800a726:	7bfb      	ldrb	r3, [r7, #15]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <__errno>:
 800a734:	4b01      	ldr	r3, [pc, #4]	; (800a73c <__errno+0x8>)
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	20000090 	.word	0x20000090

0800a740 <__libc_init_array>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	4d0d      	ldr	r5, [pc, #52]	; (800a778 <__libc_init_array+0x38>)
 800a744:	4c0d      	ldr	r4, [pc, #52]	; (800a77c <__libc_init_array+0x3c>)
 800a746:	1b64      	subs	r4, r4, r5
 800a748:	10a4      	asrs	r4, r4, #2
 800a74a:	2600      	movs	r6, #0
 800a74c:	42a6      	cmp	r6, r4
 800a74e:	d109      	bne.n	800a764 <__libc_init_array+0x24>
 800a750:	4d0b      	ldr	r5, [pc, #44]	; (800a780 <__libc_init_array+0x40>)
 800a752:	4c0c      	ldr	r4, [pc, #48]	; (800a784 <__libc_init_array+0x44>)
 800a754:	f000 fcc0 	bl	800b0d8 <_init>
 800a758:	1b64      	subs	r4, r4, r5
 800a75a:	10a4      	asrs	r4, r4, #2
 800a75c:	2600      	movs	r6, #0
 800a75e:	42a6      	cmp	r6, r4
 800a760:	d105      	bne.n	800a76e <__libc_init_array+0x2e>
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	f855 3b04 	ldr.w	r3, [r5], #4
 800a768:	4798      	blx	r3
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7ee      	b.n	800a74c <__libc_init_array+0xc>
 800a76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a772:	4798      	blx	r3
 800a774:	3601      	adds	r6, #1
 800a776:	e7f2      	b.n	800a75e <__libc_init_array+0x1e>
 800a778:	0800b6d4 	.word	0x0800b6d4
 800a77c:	0800b6d4 	.word	0x0800b6d4
 800a780:	0800b6d4 	.word	0x0800b6d4
 800a784:	0800b6d8 	.word	0x0800b6d8

0800a788 <malloc>:
 800a788:	4b02      	ldr	r3, [pc, #8]	; (800a794 <malloc+0xc>)
 800a78a:	4601      	mov	r1, r0
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	f000 b87f 	b.w	800a890 <_malloc_r>
 800a792:	bf00      	nop
 800a794:	20000090 	.word	0x20000090

0800a798 <free>:
 800a798:	4b02      	ldr	r3, [pc, #8]	; (800a7a4 <free+0xc>)
 800a79a:	4601      	mov	r1, r0
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	f000 b80b 	b.w	800a7b8 <_free_r>
 800a7a2:	bf00      	nop
 800a7a4:	20000090 	.word	0x20000090

0800a7a8 <memset>:
 800a7a8:	4402      	add	r2, r0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d100      	bne.n	800a7b2 <memset+0xa>
 800a7b0:	4770      	bx	lr
 800a7b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b6:	e7f9      	b.n	800a7ac <memset+0x4>

0800a7b8 <_free_r>:
 800a7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	d044      	beq.n	800a848 <_free_r+0x90>
 800a7be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7c2:	9001      	str	r0, [sp, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f1a1 0404 	sub.w	r4, r1, #4
 800a7ca:	bfb8      	it	lt
 800a7cc:	18e4      	addlt	r4, r4, r3
 800a7ce:	f000 f925 	bl	800aa1c <__malloc_lock>
 800a7d2:	4a1e      	ldr	r2, [pc, #120]	; (800a84c <_free_r+0x94>)
 800a7d4:	9801      	ldr	r0, [sp, #4]
 800a7d6:	6813      	ldr	r3, [r2, #0]
 800a7d8:	b933      	cbnz	r3, 800a7e8 <_free_r+0x30>
 800a7da:	6063      	str	r3, [r4, #4]
 800a7dc:	6014      	str	r4, [r2, #0]
 800a7de:	b003      	add	sp, #12
 800a7e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7e4:	f000 b920 	b.w	800aa28 <__malloc_unlock>
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	d908      	bls.n	800a7fe <_free_r+0x46>
 800a7ec:	6825      	ldr	r5, [r4, #0]
 800a7ee:	1961      	adds	r1, r4, r5
 800a7f0:	428b      	cmp	r3, r1
 800a7f2:	bf01      	itttt	eq
 800a7f4:	6819      	ldreq	r1, [r3, #0]
 800a7f6:	685b      	ldreq	r3, [r3, #4]
 800a7f8:	1949      	addeq	r1, r1, r5
 800a7fa:	6021      	streq	r1, [r4, #0]
 800a7fc:	e7ed      	b.n	800a7da <_free_r+0x22>
 800a7fe:	461a      	mov	r2, r3
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	b10b      	cbz	r3, 800a808 <_free_r+0x50>
 800a804:	42a3      	cmp	r3, r4
 800a806:	d9fa      	bls.n	800a7fe <_free_r+0x46>
 800a808:	6811      	ldr	r1, [r2, #0]
 800a80a:	1855      	adds	r5, r2, r1
 800a80c:	42a5      	cmp	r5, r4
 800a80e:	d10b      	bne.n	800a828 <_free_r+0x70>
 800a810:	6824      	ldr	r4, [r4, #0]
 800a812:	4421      	add	r1, r4
 800a814:	1854      	adds	r4, r2, r1
 800a816:	42a3      	cmp	r3, r4
 800a818:	6011      	str	r1, [r2, #0]
 800a81a:	d1e0      	bne.n	800a7de <_free_r+0x26>
 800a81c:	681c      	ldr	r4, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	6053      	str	r3, [r2, #4]
 800a822:	4421      	add	r1, r4
 800a824:	6011      	str	r1, [r2, #0]
 800a826:	e7da      	b.n	800a7de <_free_r+0x26>
 800a828:	d902      	bls.n	800a830 <_free_r+0x78>
 800a82a:	230c      	movs	r3, #12
 800a82c:	6003      	str	r3, [r0, #0]
 800a82e:	e7d6      	b.n	800a7de <_free_r+0x26>
 800a830:	6825      	ldr	r5, [r4, #0]
 800a832:	1961      	adds	r1, r4, r5
 800a834:	428b      	cmp	r3, r1
 800a836:	bf04      	itt	eq
 800a838:	6819      	ldreq	r1, [r3, #0]
 800a83a:	685b      	ldreq	r3, [r3, #4]
 800a83c:	6063      	str	r3, [r4, #4]
 800a83e:	bf04      	itt	eq
 800a840:	1949      	addeq	r1, r1, r5
 800a842:	6021      	streq	r1, [r4, #0]
 800a844:	6054      	str	r4, [r2, #4]
 800a846:	e7ca      	b.n	800a7de <_free_r+0x26>
 800a848:	b003      	add	sp, #12
 800a84a:	bd30      	pop	{r4, r5, pc}
 800a84c:	20000d08 	.word	0x20000d08

0800a850 <sbrk_aligned>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	4e0e      	ldr	r6, [pc, #56]	; (800a88c <sbrk_aligned+0x3c>)
 800a854:	460c      	mov	r4, r1
 800a856:	6831      	ldr	r1, [r6, #0]
 800a858:	4605      	mov	r5, r0
 800a85a:	b911      	cbnz	r1, 800a862 <sbrk_aligned+0x12>
 800a85c:	f000 f88c 	bl	800a978 <_sbrk_r>
 800a860:	6030      	str	r0, [r6, #0]
 800a862:	4621      	mov	r1, r4
 800a864:	4628      	mov	r0, r5
 800a866:	f000 f887 	bl	800a978 <_sbrk_r>
 800a86a:	1c43      	adds	r3, r0, #1
 800a86c:	d00a      	beq.n	800a884 <sbrk_aligned+0x34>
 800a86e:	1cc4      	adds	r4, r0, #3
 800a870:	f024 0403 	bic.w	r4, r4, #3
 800a874:	42a0      	cmp	r0, r4
 800a876:	d007      	beq.n	800a888 <sbrk_aligned+0x38>
 800a878:	1a21      	subs	r1, r4, r0
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f87c 	bl	800a978 <_sbrk_r>
 800a880:	3001      	adds	r0, #1
 800a882:	d101      	bne.n	800a888 <sbrk_aligned+0x38>
 800a884:	f04f 34ff 	mov.w	r4, #4294967295
 800a888:	4620      	mov	r0, r4
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	20000d0c 	.word	0x20000d0c

0800a890 <_malloc_r>:
 800a890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a894:	1ccd      	adds	r5, r1, #3
 800a896:	f025 0503 	bic.w	r5, r5, #3
 800a89a:	3508      	adds	r5, #8
 800a89c:	2d0c      	cmp	r5, #12
 800a89e:	bf38      	it	cc
 800a8a0:	250c      	movcc	r5, #12
 800a8a2:	2d00      	cmp	r5, #0
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	db01      	blt.n	800a8ac <_malloc_r+0x1c>
 800a8a8:	42a9      	cmp	r1, r5
 800a8aa:	d905      	bls.n	800a8b8 <_malloc_r+0x28>
 800a8ac:	230c      	movs	r3, #12
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	2600      	movs	r6, #0
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b8:	4e2e      	ldr	r6, [pc, #184]	; (800a974 <_malloc_r+0xe4>)
 800a8ba:	f000 f8af 	bl	800aa1c <__malloc_lock>
 800a8be:	6833      	ldr	r3, [r6, #0]
 800a8c0:	461c      	mov	r4, r3
 800a8c2:	bb34      	cbnz	r4, 800a912 <_malloc_r+0x82>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	f7ff ffc2 	bl	800a850 <sbrk_aligned>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	d14d      	bne.n	800a96e <_malloc_r+0xde>
 800a8d2:	6834      	ldr	r4, [r6, #0]
 800a8d4:	4626      	mov	r6, r4
 800a8d6:	2e00      	cmp	r6, #0
 800a8d8:	d140      	bne.n	800a95c <_malloc_r+0xcc>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4638      	mov	r0, r7
 800a8e0:	eb04 0803 	add.w	r8, r4, r3
 800a8e4:	f000 f848 	bl	800a978 <_sbrk_r>
 800a8e8:	4580      	cmp	r8, r0
 800a8ea:	d13a      	bne.n	800a962 <_malloc_r+0xd2>
 800a8ec:	6821      	ldr	r1, [r4, #0]
 800a8ee:	3503      	adds	r5, #3
 800a8f0:	1a6d      	subs	r5, r5, r1
 800a8f2:	f025 0503 	bic.w	r5, r5, #3
 800a8f6:	3508      	adds	r5, #8
 800a8f8:	2d0c      	cmp	r5, #12
 800a8fa:	bf38      	it	cc
 800a8fc:	250c      	movcc	r5, #12
 800a8fe:	4629      	mov	r1, r5
 800a900:	4638      	mov	r0, r7
 800a902:	f7ff ffa5 	bl	800a850 <sbrk_aligned>
 800a906:	3001      	adds	r0, #1
 800a908:	d02b      	beq.n	800a962 <_malloc_r+0xd2>
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	442b      	add	r3, r5
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	e00e      	b.n	800a930 <_malloc_r+0xa0>
 800a912:	6822      	ldr	r2, [r4, #0]
 800a914:	1b52      	subs	r2, r2, r5
 800a916:	d41e      	bmi.n	800a956 <_malloc_r+0xc6>
 800a918:	2a0b      	cmp	r2, #11
 800a91a:	d916      	bls.n	800a94a <_malloc_r+0xba>
 800a91c:	1961      	adds	r1, r4, r5
 800a91e:	42a3      	cmp	r3, r4
 800a920:	6025      	str	r5, [r4, #0]
 800a922:	bf18      	it	ne
 800a924:	6059      	strne	r1, [r3, #4]
 800a926:	6863      	ldr	r3, [r4, #4]
 800a928:	bf08      	it	eq
 800a92a:	6031      	streq	r1, [r6, #0]
 800a92c:	5162      	str	r2, [r4, r5]
 800a92e:	604b      	str	r3, [r1, #4]
 800a930:	4638      	mov	r0, r7
 800a932:	f104 060b 	add.w	r6, r4, #11
 800a936:	f000 f877 	bl	800aa28 <__malloc_unlock>
 800a93a:	f026 0607 	bic.w	r6, r6, #7
 800a93e:	1d23      	adds	r3, r4, #4
 800a940:	1af2      	subs	r2, r6, r3
 800a942:	d0b6      	beq.n	800a8b2 <_malloc_r+0x22>
 800a944:	1b9b      	subs	r3, r3, r6
 800a946:	50a3      	str	r3, [r4, r2]
 800a948:	e7b3      	b.n	800a8b2 <_malloc_r+0x22>
 800a94a:	6862      	ldr	r2, [r4, #4]
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	bf0c      	ite	eq
 800a950:	6032      	streq	r2, [r6, #0]
 800a952:	605a      	strne	r2, [r3, #4]
 800a954:	e7ec      	b.n	800a930 <_malloc_r+0xa0>
 800a956:	4623      	mov	r3, r4
 800a958:	6864      	ldr	r4, [r4, #4]
 800a95a:	e7b2      	b.n	800a8c2 <_malloc_r+0x32>
 800a95c:	4634      	mov	r4, r6
 800a95e:	6876      	ldr	r6, [r6, #4]
 800a960:	e7b9      	b.n	800a8d6 <_malloc_r+0x46>
 800a962:	230c      	movs	r3, #12
 800a964:	603b      	str	r3, [r7, #0]
 800a966:	4638      	mov	r0, r7
 800a968:	f000 f85e 	bl	800aa28 <__malloc_unlock>
 800a96c:	e7a1      	b.n	800a8b2 <_malloc_r+0x22>
 800a96e:	6025      	str	r5, [r4, #0]
 800a970:	e7de      	b.n	800a930 <_malloc_r+0xa0>
 800a972:	bf00      	nop
 800a974:	20000d08 	.word	0x20000d08

0800a978 <_sbrk_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_sbrk_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f7 fb98 	bl	80020b8 <_sbrk>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_sbrk_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_sbrk_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	20000d10 	.word	0x20000d10

0800a998 <siprintf>:
 800a998:	b40e      	push	{r1, r2, r3}
 800a99a:	b500      	push	{lr}
 800a99c:	b09c      	sub	sp, #112	; 0x70
 800a99e:	ab1d      	add	r3, sp, #116	; 0x74
 800a9a0:	9002      	str	r0, [sp, #8]
 800a9a2:	9006      	str	r0, [sp, #24]
 800a9a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9a8:	4809      	ldr	r0, [pc, #36]	; (800a9d0 <siprintf+0x38>)
 800a9aa:	9107      	str	r1, [sp, #28]
 800a9ac:	9104      	str	r1, [sp, #16]
 800a9ae:	4909      	ldr	r1, [pc, #36]	; (800a9d4 <siprintf+0x3c>)
 800a9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b4:	9105      	str	r1, [sp, #20]
 800a9b6:	6800      	ldr	r0, [r0, #0]
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	a902      	add	r1, sp, #8
 800a9bc:	f000 f896 	bl	800aaec <_svfiprintf_r>
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	b01c      	add	sp, #112	; 0x70
 800a9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9cc:	b003      	add	sp, #12
 800a9ce:	4770      	bx	lr
 800a9d0:	20000090 	.word	0x20000090
 800a9d4:	ffff0208 	.word	0xffff0208

0800a9d8 <strcat>:
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	4602      	mov	r2, r0
 800a9dc:	7814      	ldrb	r4, [r2, #0]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	3201      	adds	r2, #1
 800a9e2:	2c00      	cmp	r4, #0
 800a9e4:	d1fa      	bne.n	800a9dc <strcat+0x4>
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	d1f9      	bne.n	800a9e8 <strcat+0x10>
 800a9f4:	bd10      	pop	{r4, pc}

0800a9f6 <strncpy>:
 800a9f6:	b510      	push	{r4, lr}
 800a9f8:	3901      	subs	r1, #1
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	b132      	cbz	r2, 800aa0c <strncpy+0x16>
 800a9fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa02:	f803 4b01 	strb.w	r4, [r3], #1
 800aa06:	3a01      	subs	r2, #1
 800aa08:	2c00      	cmp	r4, #0
 800aa0a:	d1f7      	bne.n	800a9fc <strncpy+0x6>
 800aa0c:	441a      	add	r2, r3
 800aa0e:	2100      	movs	r1, #0
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d100      	bne.n	800aa16 <strncpy+0x20>
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	f803 1b01 	strb.w	r1, [r3], #1
 800aa1a:	e7f9      	b.n	800aa10 <strncpy+0x1a>

0800aa1c <__malloc_lock>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	; (800aa24 <__malloc_lock+0x8>)
 800aa1e:	f000 baf9 	b.w	800b014 <__retarget_lock_acquire_recursive>
 800aa22:	bf00      	nop
 800aa24:	20000d14 	.word	0x20000d14

0800aa28 <__malloc_unlock>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__malloc_unlock+0x8>)
 800aa2a:	f000 baf4 	b.w	800b016 <__retarget_lock_release_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20000d14 	.word	0x20000d14

0800aa34 <__ssputs_r>:
 800aa34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa38:	688e      	ldr	r6, [r1, #8]
 800aa3a:	429e      	cmp	r6, r3
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	4690      	mov	r8, r2
 800aa42:	461f      	mov	r7, r3
 800aa44:	d838      	bhi.n	800aab8 <__ssputs_r+0x84>
 800aa46:	898a      	ldrh	r2, [r1, #12]
 800aa48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa4c:	d032      	beq.n	800aab4 <__ssputs_r+0x80>
 800aa4e:	6825      	ldr	r5, [r4, #0]
 800aa50:	6909      	ldr	r1, [r1, #16]
 800aa52:	eba5 0901 	sub.w	r9, r5, r1
 800aa56:	6965      	ldr	r5, [r4, #20]
 800aa58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa60:	3301      	adds	r3, #1
 800aa62:	444b      	add	r3, r9
 800aa64:	106d      	asrs	r5, r5, #1
 800aa66:	429d      	cmp	r5, r3
 800aa68:	bf38      	it	cc
 800aa6a:	461d      	movcc	r5, r3
 800aa6c:	0553      	lsls	r3, r2, #21
 800aa6e:	d531      	bpl.n	800aad4 <__ssputs_r+0xa0>
 800aa70:	4629      	mov	r1, r5
 800aa72:	f7ff ff0d 	bl	800a890 <_malloc_r>
 800aa76:	4606      	mov	r6, r0
 800aa78:	b950      	cbnz	r0, 800aa90 <__ssputs_r+0x5c>
 800aa7a:	230c      	movs	r3, #12
 800aa7c:	f8ca 3000 	str.w	r3, [sl]
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa90:	6921      	ldr	r1, [r4, #16]
 800aa92:	464a      	mov	r2, r9
 800aa94:	f000 fac0 	bl	800b018 <memcpy>
 800aa98:	89a3      	ldrh	r3, [r4, #12]
 800aa9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	6126      	str	r6, [r4, #16]
 800aaa6:	6165      	str	r5, [r4, #20]
 800aaa8:	444e      	add	r6, r9
 800aaaa:	eba5 0509 	sub.w	r5, r5, r9
 800aaae:	6026      	str	r6, [r4, #0]
 800aab0:	60a5      	str	r5, [r4, #8]
 800aab2:	463e      	mov	r6, r7
 800aab4:	42be      	cmp	r6, r7
 800aab6:	d900      	bls.n	800aaba <__ssputs_r+0x86>
 800aab8:	463e      	mov	r6, r7
 800aaba:	6820      	ldr	r0, [r4, #0]
 800aabc:	4632      	mov	r2, r6
 800aabe:	4641      	mov	r1, r8
 800aac0:	f000 fab8 	bl	800b034 <memmove>
 800aac4:	68a3      	ldr	r3, [r4, #8]
 800aac6:	1b9b      	subs	r3, r3, r6
 800aac8:	60a3      	str	r3, [r4, #8]
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	4433      	add	r3, r6
 800aace:	6023      	str	r3, [r4, #0]
 800aad0:	2000      	movs	r0, #0
 800aad2:	e7db      	b.n	800aa8c <__ssputs_r+0x58>
 800aad4:	462a      	mov	r2, r5
 800aad6:	f000 fac7 	bl	800b068 <_realloc_r>
 800aada:	4606      	mov	r6, r0
 800aadc:	2800      	cmp	r0, #0
 800aade:	d1e1      	bne.n	800aaa4 <__ssputs_r+0x70>
 800aae0:	6921      	ldr	r1, [r4, #16]
 800aae2:	4650      	mov	r0, sl
 800aae4:	f7ff fe68 	bl	800a7b8 <_free_r>
 800aae8:	e7c7      	b.n	800aa7a <__ssputs_r+0x46>
	...

0800aaec <_svfiprintf_r>:
 800aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf0:	4698      	mov	r8, r3
 800aaf2:	898b      	ldrh	r3, [r1, #12]
 800aaf4:	061b      	lsls	r3, r3, #24
 800aaf6:	b09d      	sub	sp, #116	; 0x74
 800aaf8:	4607      	mov	r7, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	4614      	mov	r4, r2
 800aafe:	d50e      	bpl.n	800ab1e <_svfiprintf_r+0x32>
 800ab00:	690b      	ldr	r3, [r1, #16]
 800ab02:	b963      	cbnz	r3, 800ab1e <_svfiprintf_r+0x32>
 800ab04:	2140      	movs	r1, #64	; 0x40
 800ab06:	f7ff fec3 	bl	800a890 <_malloc_r>
 800ab0a:	6028      	str	r0, [r5, #0]
 800ab0c:	6128      	str	r0, [r5, #16]
 800ab0e:	b920      	cbnz	r0, 800ab1a <_svfiprintf_r+0x2e>
 800ab10:	230c      	movs	r3, #12
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	e0d1      	b.n	800acbe <_svfiprintf_r+0x1d2>
 800ab1a:	2340      	movs	r3, #64	; 0x40
 800ab1c:	616b      	str	r3, [r5, #20]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	9309      	str	r3, [sp, #36]	; 0x24
 800ab22:	2320      	movs	r3, #32
 800ab24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab2c:	2330      	movs	r3, #48	; 0x30
 800ab2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acd8 <_svfiprintf_r+0x1ec>
 800ab32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab36:	f04f 0901 	mov.w	r9, #1
 800ab3a:	4623      	mov	r3, r4
 800ab3c:	469a      	mov	sl, r3
 800ab3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab42:	b10a      	cbz	r2, 800ab48 <_svfiprintf_r+0x5c>
 800ab44:	2a25      	cmp	r2, #37	; 0x25
 800ab46:	d1f9      	bne.n	800ab3c <_svfiprintf_r+0x50>
 800ab48:	ebba 0b04 	subs.w	fp, sl, r4
 800ab4c:	d00b      	beq.n	800ab66 <_svfiprintf_r+0x7a>
 800ab4e:	465b      	mov	r3, fp
 800ab50:	4622      	mov	r2, r4
 800ab52:	4629      	mov	r1, r5
 800ab54:	4638      	mov	r0, r7
 800ab56:	f7ff ff6d 	bl	800aa34 <__ssputs_r>
 800ab5a:	3001      	adds	r0, #1
 800ab5c:	f000 80aa 	beq.w	800acb4 <_svfiprintf_r+0x1c8>
 800ab60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab62:	445a      	add	r2, fp
 800ab64:	9209      	str	r2, [sp, #36]	; 0x24
 800ab66:	f89a 3000 	ldrb.w	r3, [sl]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 80a2 	beq.w	800acb4 <_svfiprintf_r+0x1c8>
 800ab70:	2300      	movs	r3, #0
 800ab72:	f04f 32ff 	mov.w	r2, #4294967295
 800ab76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab7a:	f10a 0a01 	add.w	sl, sl, #1
 800ab7e:	9304      	str	r3, [sp, #16]
 800ab80:	9307      	str	r3, [sp, #28]
 800ab82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab86:	931a      	str	r3, [sp, #104]	; 0x68
 800ab88:	4654      	mov	r4, sl
 800ab8a:	2205      	movs	r2, #5
 800ab8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab90:	4851      	ldr	r0, [pc, #324]	; (800acd8 <_svfiprintf_r+0x1ec>)
 800ab92:	f7f5 fb35 	bl	8000200 <memchr>
 800ab96:	9a04      	ldr	r2, [sp, #16]
 800ab98:	b9d8      	cbnz	r0, 800abd2 <_svfiprintf_r+0xe6>
 800ab9a:	06d0      	lsls	r0, r2, #27
 800ab9c:	bf44      	itt	mi
 800ab9e:	2320      	movmi	r3, #32
 800aba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aba4:	0711      	lsls	r1, r2, #28
 800aba6:	bf44      	itt	mi
 800aba8:	232b      	movmi	r3, #43	; 0x2b
 800abaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abae:	f89a 3000 	ldrb.w	r3, [sl]
 800abb2:	2b2a      	cmp	r3, #42	; 0x2a
 800abb4:	d015      	beq.n	800abe2 <_svfiprintf_r+0xf6>
 800abb6:	9a07      	ldr	r2, [sp, #28]
 800abb8:	4654      	mov	r4, sl
 800abba:	2000      	movs	r0, #0
 800abbc:	f04f 0c0a 	mov.w	ip, #10
 800abc0:	4621      	mov	r1, r4
 800abc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc6:	3b30      	subs	r3, #48	; 0x30
 800abc8:	2b09      	cmp	r3, #9
 800abca:	d94e      	bls.n	800ac6a <_svfiprintf_r+0x17e>
 800abcc:	b1b0      	cbz	r0, 800abfc <_svfiprintf_r+0x110>
 800abce:	9207      	str	r2, [sp, #28]
 800abd0:	e014      	b.n	800abfc <_svfiprintf_r+0x110>
 800abd2:	eba0 0308 	sub.w	r3, r0, r8
 800abd6:	fa09 f303 	lsl.w	r3, r9, r3
 800abda:	4313      	orrs	r3, r2
 800abdc:	9304      	str	r3, [sp, #16]
 800abde:	46a2      	mov	sl, r4
 800abe0:	e7d2      	b.n	800ab88 <_svfiprintf_r+0x9c>
 800abe2:	9b03      	ldr	r3, [sp, #12]
 800abe4:	1d19      	adds	r1, r3, #4
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	9103      	str	r1, [sp, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	bfbb      	ittet	lt
 800abee:	425b      	neglt	r3, r3
 800abf0:	f042 0202 	orrlt.w	r2, r2, #2
 800abf4:	9307      	strge	r3, [sp, #28]
 800abf6:	9307      	strlt	r3, [sp, #28]
 800abf8:	bfb8      	it	lt
 800abfa:	9204      	strlt	r2, [sp, #16]
 800abfc:	7823      	ldrb	r3, [r4, #0]
 800abfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ac00:	d10c      	bne.n	800ac1c <_svfiprintf_r+0x130>
 800ac02:	7863      	ldrb	r3, [r4, #1]
 800ac04:	2b2a      	cmp	r3, #42	; 0x2a
 800ac06:	d135      	bne.n	800ac74 <_svfiprintf_r+0x188>
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	1d1a      	adds	r2, r3, #4
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	9203      	str	r2, [sp, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bfb8      	it	lt
 800ac14:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac18:	3402      	adds	r4, #2
 800ac1a:	9305      	str	r3, [sp, #20]
 800ac1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ace8 <_svfiprintf_r+0x1fc>
 800ac20:	7821      	ldrb	r1, [r4, #0]
 800ac22:	2203      	movs	r2, #3
 800ac24:	4650      	mov	r0, sl
 800ac26:	f7f5 faeb 	bl	8000200 <memchr>
 800ac2a:	b140      	cbz	r0, 800ac3e <_svfiprintf_r+0x152>
 800ac2c:	2340      	movs	r3, #64	; 0x40
 800ac2e:	eba0 000a 	sub.w	r0, r0, sl
 800ac32:	fa03 f000 	lsl.w	r0, r3, r0
 800ac36:	9b04      	ldr	r3, [sp, #16]
 800ac38:	4303      	orrs	r3, r0
 800ac3a:	3401      	adds	r4, #1
 800ac3c:	9304      	str	r3, [sp, #16]
 800ac3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac42:	4826      	ldr	r0, [pc, #152]	; (800acdc <_svfiprintf_r+0x1f0>)
 800ac44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac48:	2206      	movs	r2, #6
 800ac4a:	f7f5 fad9 	bl	8000200 <memchr>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d038      	beq.n	800acc4 <_svfiprintf_r+0x1d8>
 800ac52:	4b23      	ldr	r3, [pc, #140]	; (800ace0 <_svfiprintf_r+0x1f4>)
 800ac54:	bb1b      	cbnz	r3, 800ac9e <_svfiprintf_r+0x1b2>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	3307      	adds	r3, #7
 800ac5a:	f023 0307 	bic.w	r3, r3, #7
 800ac5e:	3308      	adds	r3, #8
 800ac60:	9303      	str	r3, [sp, #12]
 800ac62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac64:	4433      	add	r3, r6
 800ac66:	9309      	str	r3, [sp, #36]	; 0x24
 800ac68:	e767      	b.n	800ab3a <_svfiprintf_r+0x4e>
 800ac6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac6e:	460c      	mov	r4, r1
 800ac70:	2001      	movs	r0, #1
 800ac72:	e7a5      	b.n	800abc0 <_svfiprintf_r+0xd4>
 800ac74:	2300      	movs	r3, #0
 800ac76:	3401      	adds	r4, #1
 800ac78:	9305      	str	r3, [sp, #20]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	f04f 0c0a 	mov.w	ip, #10
 800ac80:	4620      	mov	r0, r4
 800ac82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac86:	3a30      	subs	r2, #48	; 0x30
 800ac88:	2a09      	cmp	r2, #9
 800ac8a:	d903      	bls.n	800ac94 <_svfiprintf_r+0x1a8>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d0c5      	beq.n	800ac1c <_svfiprintf_r+0x130>
 800ac90:	9105      	str	r1, [sp, #20]
 800ac92:	e7c3      	b.n	800ac1c <_svfiprintf_r+0x130>
 800ac94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac98:	4604      	mov	r4, r0
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e7f0      	b.n	800ac80 <_svfiprintf_r+0x194>
 800ac9e:	ab03      	add	r3, sp, #12
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	462a      	mov	r2, r5
 800aca4:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <_svfiprintf_r+0x1f8>)
 800aca6:	a904      	add	r1, sp, #16
 800aca8:	4638      	mov	r0, r7
 800acaa:	f3af 8000 	nop.w
 800acae:	1c42      	adds	r2, r0, #1
 800acb0:	4606      	mov	r6, r0
 800acb2:	d1d6      	bne.n	800ac62 <_svfiprintf_r+0x176>
 800acb4:	89ab      	ldrh	r3, [r5, #12]
 800acb6:	065b      	lsls	r3, r3, #25
 800acb8:	f53f af2c 	bmi.w	800ab14 <_svfiprintf_r+0x28>
 800acbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acbe:	b01d      	add	sp, #116	; 0x74
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	ab03      	add	r3, sp, #12
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	462a      	mov	r2, r5
 800acca:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <_svfiprintf_r+0x1f8>)
 800accc:	a904      	add	r1, sp, #16
 800acce:	4638      	mov	r0, r7
 800acd0:	f000 f87a 	bl	800adc8 <_printf_i>
 800acd4:	e7eb      	b.n	800acae <_svfiprintf_r+0x1c2>
 800acd6:	bf00      	nop
 800acd8:	0800b698 	.word	0x0800b698
 800acdc:	0800b6a2 	.word	0x0800b6a2
 800ace0:	00000000 	.word	0x00000000
 800ace4:	0800aa35 	.word	0x0800aa35
 800ace8:	0800b69e 	.word	0x0800b69e

0800acec <_printf_common>:
 800acec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf0:	4616      	mov	r6, r2
 800acf2:	4699      	mov	r9, r3
 800acf4:	688a      	ldr	r2, [r1, #8]
 800acf6:	690b      	ldr	r3, [r1, #16]
 800acf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acfc:	4293      	cmp	r3, r2
 800acfe:	bfb8      	it	lt
 800ad00:	4613      	movlt	r3, r2
 800ad02:	6033      	str	r3, [r6, #0]
 800ad04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad08:	4607      	mov	r7, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b10a      	cbz	r2, 800ad12 <_printf_common+0x26>
 800ad0e:	3301      	adds	r3, #1
 800ad10:	6033      	str	r3, [r6, #0]
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	0699      	lsls	r1, r3, #26
 800ad16:	bf42      	ittt	mi
 800ad18:	6833      	ldrmi	r3, [r6, #0]
 800ad1a:	3302      	addmi	r3, #2
 800ad1c:	6033      	strmi	r3, [r6, #0]
 800ad1e:	6825      	ldr	r5, [r4, #0]
 800ad20:	f015 0506 	ands.w	r5, r5, #6
 800ad24:	d106      	bne.n	800ad34 <_printf_common+0x48>
 800ad26:	f104 0a19 	add.w	sl, r4, #25
 800ad2a:	68e3      	ldr	r3, [r4, #12]
 800ad2c:	6832      	ldr	r2, [r6, #0]
 800ad2e:	1a9b      	subs	r3, r3, r2
 800ad30:	42ab      	cmp	r3, r5
 800ad32:	dc26      	bgt.n	800ad82 <_printf_common+0x96>
 800ad34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad38:	1e13      	subs	r3, r2, #0
 800ad3a:	6822      	ldr	r2, [r4, #0]
 800ad3c:	bf18      	it	ne
 800ad3e:	2301      	movne	r3, #1
 800ad40:	0692      	lsls	r2, r2, #26
 800ad42:	d42b      	bmi.n	800ad9c <_printf_common+0xb0>
 800ad44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad48:	4649      	mov	r1, r9
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	47c0      	blx	r8
 800ad4e:	3001      	adds	r0, #1
 800ad50:	d01e      	beq.n	800ad90 <_printf_common+0xa4>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	68e5      	ldr	r5, [r4, #12]
 800ad56:	6832      	ldr	r2, [r6, #0]
 800ad58:	f003 0306 	and.w	r3, r3, #6
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	bf08      	it	eq
 800ad60:	1aad      	subeq	r5, r5, r2
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	6922      	ldr	r2, [r4, #16]
 800ad66:	bf0c      	ite	eq
 800ad68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad6c:	2500      	movne	r5, #0
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	bfc4      	itt	gt
 800ad72:	1a9b      	subgt	r3, r3, r2
 800ad74:	18ed      	addgt	r5, r5, r3
 800ad76:	2600      	movs	r6, #0
 800ad78:	341a      	adds	r4, #26
 800ad7a:	42b5      	cmp	r5, r6
 800ad7c:	d11a      	bne.n	800adb4 <_printf_common+0xc8>
 800ad7e:	2000      	movs	r0, #0
 800ad80:	e008      	b.n	800ad94 <_printf_common+0xa8>
 800ad82:	2301      	movs	r3, #1
 800ad84:	4652      	mov	r2, sl
 800ad86:	4649      	mov	r1, r9
 800ad88:	4638      	mov	r0, r7
 800ad8a:	47c0      	blx	r8
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d103      	bne.n	800ad98 <_printf_common+0xac>
 800ad90:	f04f 30ff 	mov.w	r0, #4294967295
 800ad94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad98:	3501      	adds	r5, #1
 800ad9a:	e7c6      	b.n	800ad2a <_printf_common+0x3e>
 800ad9c:	18e1      	adds	r1, r4, r3
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	2030      	movs	r0, #48	; 0x30
 800ada2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ada6:	4422      	add	r2, r4
 800ada8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800adac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adb0:	3302      	adds	r3, #2
 800adb2:	e7c7      	b.n	800ad44 <_printf_common+0x58>
 800adb4:	2301      	movs	r3, #1
 800adb6:	4622      	mov	r2, r4
 800adb8:	4649      	mov	r1, r9
 800adba:	4638      	mov	r0, r7
 800adbc:	47c0      	blx	r8
 800adbe:	3001      	adds	r0, #1
 800adc0:	d0e6      	beq.n	800ad90 <_printf_common+0xa4>
 800adc2:	3601      	adds	r6, #1
 800adc4:	e7d9      	b.n	800ad7a <_printf_common+0x8e>
	...

0800adc8 <_printf_i>:
 800adc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adcc:	7e0f      	ldrb	r7, [r1, #24]
 800adce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800add0:	2f78      	cmp	r7, #120	; 0x78
 800add2:	4691      	mov	r9, r2
 800add4:	4680      	mov	r8, r0
 800add6:	460c      	mov	r4, r1
 800add8:	469a      	mov	sl, r3
 800adda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800adde:	d807      	bhi.n	800adf0 <_printf_i+0x28>
 800ade0:	2f62      	cmp	r7, #98	; 0x62
 800ade2:	d80a      	bhi.n	800adfa <_printf_i+0x32>
 800ade4:	2f00      	cmp	r7, #0
 800ade6:	f000 80d8 	beq.w	800af9a <_printf_i+0x1d2>
 800adea:	2f58      	cmp	r7, #88	; 0x58
 800adec:	f000 80a3 	beq.w	800af36 <_printf_i+0x16e>
 800adf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adf8:	e03a      	b.n	800ae70 <_printf_i+0xa8>
 800adfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adfe:	2b15      	cmp	r3, #21
 800ae00:	d8f6      	bhi.n	800adf0 <_printf_i+0x28>
 800ae02:	a101      	add	r1, pc, #4	; (adr r1, 800ae08 <_printf_i+0x40>)
 800ae04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae08:	0800ae61 	.word	0x0800ae61
 800ae0c:	0800ae75 	.word	0x0800ae75
 800ae10:	0800adf1 	.word	0x0800adf1
 800ae14:	0800adf1 	.word	0x0800adf1
 800ae18:	0800adf1 	.word	0x0800adf1
 800ae1c:	0800adf1 	.word	0x0800adf1
 800ae20:	0800ae75 	.word	0x0800ae75
 800ae24:	0800adf1 	.word	0x0800adf1
 800ae28:	0800adf1 	.word	0x0800adf1
 800ae2c:	0800adf1 	.word	0x0800adf1
 800ae30:	0800adf1 	.word	0x0800adf1
 800ae34:	0800af81 	.word	0x0800af81
 800ae38:	0800aea5 	.word	0x0800aea5
 800ae3c:	0800af63 	.word	0x0800af63
 800ae40:	0800adf1 	.word	0x0800adf1
 800ae44:	0800adf1 	.word	0x0800adf1
 800ae48:	0800afa3 	.word	0x0800afa3
 800ae4c:	0800adf1 	.word	0x0800adf1
 800ae50:	0800aea5 	.word	0x0800aea5
 800ae54:	0800adf1 	.word	0x0800adf1
 800ae58:	0800adf1 	.word	0x0800adf1
 800ae5c:	0800af6b 	.word	0x0800af6b
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	1d1a      	adds	r2, r3, #4
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	602a      	str	r2, [r5, #0]
 800ae68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae70:	2301      	movs	r3, #1
 800ae72:	e0a3      	b.n	800afbc <_printf_i+0x1f4>
 800ae74:	6820      	ldr	r0, [r4, #0]
 800ae76:	6829      	ldr	r1, [r5, #0]
 800ae78:	0606      	lsls	r6, r0, #24
 800ae7a:	f101 0304 	add.w	r3, r1, #4
 800ae7e:	d50a      	bpl.n	800ae96 <_printf_i+0xce>
 800ae80:	680e      	ldr	r6, [r1, #0]
 800ae82:	602b      	str	r3, [r5, #0]
 800ae84:	2e00      	cmp	r6, #0
 800ae86:	da03      	bge.n	800ae90 <_printf_i+0xc8>
 800ae88:	232d      	movs	r3, #45	; 0x2d
 800ae8a:	4276      	negs	r6, r6
 800ae8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae90:	485e      	ldr	r0, [pc, #376]	; (800b00c <_printf_i+0x244>)
 800ae92:	230a      	movs	r3, #10
 800ae94:	e019      	b.n	800aeca <_printf_i+0x102>
 800ae96:	680e      	ldr	r6, [r1, #0]
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae9e:	bf18      	it	ne
 800aea0:	b236      	sxthne	r6, r6
 800aea2:	e7ef      	b.n	800ae84 <_printf_i+0xbc>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	6820      	ldr	r0, [r4, #0]
 800aea8:	1d19      	adds	r1, r3, #4
 800aeaa:	6029      	str	r1, [r5, #0]
 800aeac:	0601      	lsls	r1, r0, #24
 800aeae:	d501      	bpl.n	800aeb4 <_printf_i+0xec>
 800aeb0:	681e      	ldr	r6, [r3, #0]
 800aeb2:	e002      	b.n	800aeba <_printf_i+0xf2>
 800aeb4:	0646      	lsls	r6, r0, #25
 800aeb6:	d5fb      	bpl.n	800aeb0 <_printf_i+0xe8>
 800aeb8:	881e      	ldrh	r6, [r3, #0]
 800aeba:	4854      	ldr	r0, [pc, #336]	; (800b00c <_printf_i+0x244>)
 800aebc:	2f6f      	cmp	r7, #111	; 0x6f
 800aebe:	bf0c      	ite	eq
 800aec0:	2308      	moveq	r3, #8
 800aec2:	230a      	movne	r3, #10
 800aec4:	2100      	movs	r1, #0
 800aec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aeca:	6865      	ldr	r5, [r4, #4]
 800aecc:	60a5      	str	r5, [r4, #8]
 800aece:	2d00      	cmp	r5, #0
 800aed0:	bfa2      	ittt	ge
 800aed2:	6821      	ldrge	r1, [r4, #0]
 800aed4:	f021 0104 	bicge.w	r1, r1, #4
 800aed8:	6021      	strge	r1, [r4, #0]
 800aeda:	b90e      	cbnz	r6, 800aee0 <_printf_i+0x118>
 800aedc:	2d00      	cmp	r5, #0
 800aede:	d04d      	beq.n	800af7c <_printf_i+0x1b4>
 800aee0:	4615      	mov	r5, r2
 800aee2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aee6:	fb03 6711 	mls	r7, r3, r1, r6
 800aeea:	5dc7      	ldrb	r7, [r0, r7]
 800aeec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aef0:	4637      	mov	r7, r6
 800aef2:	42bb      	cmp	r3, r7
 800aef4:	460e      	mov	r6, r1
 800aef6:	d9f4      	bls.n	800aee2 <_printf_i+0x11a>
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d10b      	bne.n	800af14 <_printf_i+0x14c>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	07de      	lsls	r6, r3, #31
 800af00:	d508      	bpl.n	800af14 <_printf_i+0x14c>
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	6861      	ldr	r1, [r4, #4]
 800af06:	4299      	cmp	r1, r3
 800af08:	bfde      	ittt	le
 800af0a:	2330      	movle	r3, #48	; 0x30
 800af0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af14:	1b52      	subs	r2, r2, r5
 800af16:	6122      	str	r2, [r4, #16]
 800af18:	f8cd a000 	str.w	sl, [sp]
 800af1c:	464b      	mov	r3, r9
 800af1e:	aa03      	add	r2, sp, #12
 800af20:	4621      	mov	r1, r4
 800af22:	4640      	mov	r0, r8
 800af24:	f7ff fee2 	bl	800acec <_printf_common>
 800af28:	3001      	adds	r0, #1
 800af2a:	d14c      	bne.n	800afc6 <_printf_i+0x1fe>
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295
 800af30:	b004      	add	sp, #16
 800af32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af36:	4835      	ldr	r0, [pc, #212]	; (800b00c <_printf_i+0x244>)
 800af38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af3c:	6829      	ldr	r1, [r5, #0]
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	f851 6b04 	ldr.w	r6, [r1], #4
 800af44:	6029      	str	r1, [r5, #0]
 800af46:	061d      	lsls	r5, r3, #24
 800af48:	d514      	bpl.n	800af74 <_printf_i+0x1ac>
 800af4a:	07df      	lsls	r7, r3, #31
 800af4c:	bf44      	itt	mi
 800af4e:	f043 0320 	orrmi.w	r3, r3, #32
 800af52:	6023      	strmi	r3, [r4, #0]
 800af54:	b91e      	cbnz	r6, 800af5e <_printf_i+0x196>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	f023 0320 	bic.w	r3, r3, #32
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	2310      	movs	r3, #16
 800af60:	e7b0      	b.n	800aec4 <_printf_i+0xfc>
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	f043 0320 	orr.w	r3, r3, #32
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	2378      	movs	r3, #120	; 0x78
 800af6c:	4828      	ldr	r0, [pc, #160]	; (800b010 <_printf_i+0x248>)
 800af6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af72:	e7e3      	b.n	800af3c <_printf_i+0x174>
 800af74:	0659      	lsls	r1, r3, #25
 800af76:	bf48      	it	mi
 800af78:	b2b6      	uxthmi	r6, r6
 800af7a:	e7e6      	b.n	800af4a <_printf_i+0x182>
 800af7c:	4615      	mov	r5, r2
 800af7e:	e7bb      	b.n	800aef8 <_printf_i+0x130>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	6826      	ldr	r6, [r4, #0]
 800af84:	6961      	ldr	r1, [r4, #20]
 800af86:	1d18      	adds	r0, r3, #4
 800af88:	6028      	str	r0, [r5, #0]
 800af8a:	0635      	lsls	r5, r6, #24
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	d501      	bpl.n	800af94 <_printf_i+0x1cc>
 800af90:	6019      	str	r1, [r3, #0]
 800af92:	e002      	b.n	800af9a <_printf_i+0x1d2>
 800af94:	0670      	lsls	r0, r6, #25
 800af96:	d5fb      	bpl.n	800af90 <_printf_i+0x1c8>
 800af98:	8019      	strh	r1, [r3, #0]
 800af9a:	2300      	movs	r3, #0
 800af9c:	6123      	str	r3, [r4, #16]
 800af9e:	4615      	mov	r5, r2
 800afa0:	e7ba      	b.n	800af18 <_printf_i+0x150>
 800afa2:	682b      	ldr	r3, [r5, #0]
 800afa4:	1d1a      	adds	r2, r3, #4
 800afa6:	602a      	str	r2, [r5, #0]
 800afa8:	681d      	ldr	r5, [r3, #0]
 800afaa:	6862      	ldr	r2, [r4, #4]
 800afac:	2100      	movs	r1, #0
 800afae:	4628      	mov	r0, r5
 800afb0:	f7f5 f926 	bl	8000200 <memchr>
 800afb4:	b108      	cbz	r0, 800afba <_printf_i+0x1f2>
 800afb6:	1b40      	subs	r0, r0, r5
 800afb8:	6060      	str	r0, [r4, #4]
 800afba:	6863      	ldr	r3, [r4, #4]
 800afbc:	6123      	str	r3, [r4, #16]
 800afbe:	2300      	movs	r3, #0
 800afc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc4:	e7a8      	b.n	800af18 <_printf_i+0x150>
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	462a      	mov	r2, r5
 800afca:	4649      	mov	r1, r9
 800afcc:	4640      	mov	r0, r8
 800afce:	47d0      	blx	sl
 800afd0:	3001      	adds	r0, #1
 800afd2:	d0ab      	beq.n	800af2c <_printf_i+0x164>
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	079b      	lsls	r3, r3, #30
 800afd8:	d413      	bmi.n	800b002 <_printf_i+0x23a>
 800afda:	68e0      	ldr	r0, [r4, #12]
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	4298      	cmp	r0, r3
 800afe0:	bfb8      	it	lt
 800afe2:	4618      	movlt	r0, r3
 800afe4:	e7a4      	b.n	800af30 <_printf_i+0x168>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4632      	mov	r2, r6
 800afea:	4649      	mov	r1, r9
 800afec:	4640      	mov	r0, r8
 800afee:	47d0      	blx	sl
 800aff0:	3001      	adds	r0, #1
 800aff2:	d09b      	beq.n	800af2c <_printf_i+0x164>
 800aff4:	3501      	adds	r5, #1
 800aff6:	68e3      	ldr	r3, [r4, #12]
 800aff8:	9903      	ldr	r1, [sp, #12]
 800affa:	1a5b      	subs	r3, r3, r1
 800affc:	42ab      	cmp	r3, r5
 800affe:	dcf2      	bgt.n	800afe6 <_printf_i+0x21e>
 800b000:	e7eb      	b.n	800afda <_printf_i+0x212>
 800b002:	2500      	movs	r5, #0
 800b004:	f104 0619 	add.w	r6, r4, #25
 800b008:	e7f5      	b.n	800aff6 <_printf_i+0x22e>
 800b00a:	bf00      	nop
 800b00c:	0800b6a9 	.word	0x0800b6a9
 800b010:	0800b6ba 	.word	0x0800b6ba

0800b014 <__retarget_lock_acquire_recursive>:
 800b014:	4770      	bx	lr

0800b016 <__retarget_lock_release_recursive>:
 800b016:	4770      	bx	lr

0800b018 <memcpy>:
 800b018:	440a      	add	r2, r1
 800b01a:	4291      	cmp	r1, r2
 800b01c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b020:	d100      	bne.n	800b024 <memcpy+0xc>
 800b022:	4770      	bx	lr
 800b024:	b510      	push	{r4, lr}
 800b026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b02a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b02e:	4291      	cmp	r1, r2
 800b030:	d1f9      	bne.n	800b026 <memcpy+0xe>
 800b032:	bd10      	pop	{r4, pc}

0800b034 <memmove>:
 800b034:	4288      	cmp	r0, r1
 800b036:	b510      	push	{r4, lr}
 800b038:	eb01 0402 	add.w	r4, r1, r2
 800b03c:	d902      	bls.n	800b044 <memmove+0x10>
 800b03e:	4284      	cmp	r4, r0
 800b040:	4623      	mov	r3, r4
 800b042:	d807      	bhi.n	800b054 <memmove+0x20>
 800b044:	1e43      	subs	r3, r0, #1
 800b046:	42a1      	cmp	r1, r4
 800b048:	d008      	beq.n	800b05c <memmove+0x28>
 800b04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b04e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b052:	e7f8      	b.n	800b046 <memmove+0x12>
 800b054:	4402      	add	r2, r0
 800b056:	4601      	mov	r1, r0
 800b058:	428a      	cmp	r2, r1
 800b05a:	d100      	bne.n	800b05e <memmove+0x2a>
 800b05c:	bd10      	pop	{r4, pc}
 800b05e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b066:	e7f7      	b.n	800b058 <memmove+0x24>

0800b068 <_realloc_r>:
 800b068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06c:	4680      	mov	r8, r0
 800b06e:	4614      	mov	r4, r2
 800b070:	460e      	mov	r6, r1
 800b072:	b921      	cbnz	r1, 800b07e <_realloc_r+0x16>
 800b074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b078:	4611      	mov	r1, r2
 800b07a:	f7ff bc09 	b.w	800a890 <_malloc_r>
 800b07e:	b92a      	cbnz	r2, 800b08c <_realloc_r+0x24>
 800b080:	f7ff fb9a 	bl	800a7b8 <_free_r>
 800b084:	4625      	mov	r5, r4
 800b086:	4628      	mov	r0, r5
 800b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08c:	f000 f81b 	bl	800b0c6 <_malloc_usable_size_r>
 800b090:	4284      	cmp	r4, r0
 800b092:	4607      	mov	r7, r0
 800b094:	d802      	bhi.n	800b09c <_realloc_r+0x34>
 800b096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b09a:	d812      	bhi.n	800b0c2 <_realloc_r+0x5a>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4640      	mov	r0, r8
 800b0a0:	f7ff fbf6 	bl	800a890 <_malloc_r>
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d0ed      	beq.n	800b086 <_realloc_r+0x1e>
 800b0aa:	42bc      	cmp	r4, r7
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	bf28      	it	cs
 800b0b2:	463a      	movcs	r2, r7
 800b0b4:	f7ff ffb0 	bl	800b018 <memcpy>
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	f7ff fb7c 	bl	800a7b8 <_free_r>
 800b0c0:	e7e1      	b.n	800b086 <_realloc_r+0x1e>
 800b0c2:	4635      	mov	r5, r6
 800b0c4:	e7df      	b.n	800b086 <_realloc_r+0x1e>

0800b0c6 <_malloc_usable_size_r>:
 800b0c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ca:	1f18      	subs	r0, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bfbc      	itt	lt
 800b0d0:	580b      	ldrlt	r3, [r1, r0]
 800b0d2:	18c0      	addlt	r0, r0, r3
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <_init>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	bf00      	nop
 800b0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0de:	bc08      	pop	{r3}
 800b0e0:	469e      	mov	lr, r3
 800b0e2:	4770      	bx	lr

0800b0e4 <_fini>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	bf00      	nop
 800b0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ea:	bc08      	pop	{r3}
 800b0ec:	469e      	mov	lr, r3
 800b0ee:	4770      	bx	lr
